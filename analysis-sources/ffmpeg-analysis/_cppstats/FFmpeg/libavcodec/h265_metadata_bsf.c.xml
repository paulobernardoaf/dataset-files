<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h265_metadata_bsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h265.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h265_profile_level.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>PASS</name></decl>,

<decl><name>INSERT</name></decl>,

<decl><name>REMOVE</name></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>LEVEL_UNSET</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>LEVEL_AUTO</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>H265MetadataContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>access_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H265RawAUD</name></type> <name>aud_nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sample_aspect_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_full_range_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colour_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transfer_characteristics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matrix_coefficients</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_sample_loc_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tick_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poc_proportional_to_timing_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_ticks_poc_diff_one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crop_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crop_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crop_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crop_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_guess</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_warned</name></decl>;</decl_stmt>

}</block></struct></type> <name>H265MetadataContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h265_metadata_guess_level</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265LevelDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawProfileTierLevel</name> <modifier>*</modifier></type><name>ptl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawHRDParameters</name> <modifier>*</modifier></type><name>hrd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bit_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tile_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_dec_pic_buffering</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_VPS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptl</name> <operator>=</operator> <operator>&amp;</operator><name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_dec_pic_buffering</name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd</name> <operator>=</operator> <operator>&amp;</operator><name><name>vps</name><operator>-&gt;</operator><name>hrd_parameters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptl</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_dec_pic_buffering</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_max_dec_pic_buffering_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>hrd_parameters</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_PPS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tile_cols</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tile_rows</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hrd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <operator>(</operator><name><name>hrd</name><operator>-&gt;</operator><name>nal_sub_layer_hrd_parameters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bit_rate_value_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>hrd</name><operator>-&gt;</operator><name>bit_rate_scale</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <operator>(</operator><name><name>hrd</name><operator>-&gt;</operator><name>vcl_sub_layer_hrd_parameters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bit_rate_value_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>hrd</name><operator>-&gt;</operator><name>bit_rate_scale</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <name>bit_rate</name> <operator>*</operator> <literal type="number">11</literal> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ff_h265_guess_level</name><argument_list>(<argument><expr><name>ptl</name></expr></argument>, <argument><expr><name>bit_rate</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tile_rows</name></expr></argument>, <argument><expr><name>tile_cols</name></expr></argument>,

<argument><expr><name>max_dec_pic_buffering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stream appears to conform to "</literal>

<literal type="string">"level %s.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>level_guess</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>level_idc</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h265_metadata_update_level</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>level_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>LEVEL_UNSET</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>LEVEL_AUTO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level_guess</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>level_idc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level_guess</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>level_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to determine level "</literal>

<literal type="string">"of stream: using level 8.5.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>level_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>level_idc</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>level_idc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h265_metadata_update_vps</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>,

<parameter><decl><type><name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>UINT32_MAX</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>UINT32_MAX</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_poc_diff_one</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_ticks_poc_diff_one_minus1</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_poc_diff_one</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_poc_diff_one</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>h265_metadata_update_level</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_level_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h265_metadata_update_sps</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>,

<parameter><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_vui</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crop_unit_x</name></decl>, <decl><type ref="prev"/><name>crop_unit_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>sar_idc</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>&amp;&amp;</operator>

<name>den</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_width</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_height</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OR_INFER</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>present_flag</name></type></parameter>, <parameter><type><name>infer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (value &gt;= 0) { field = value; need_vui = 1; } else if (!present_flag) field = infer; } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>video_format</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>video_full_range_flag</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_OR_INFER</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_format</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>video_format</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_signal_type_present_flag</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OR_INFER</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_full_range_flag</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>video_full_range_flag</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_signal_type_present_flag</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_OR_INFER</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_primaries</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colour_primaries</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_description_present_flag</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OR_INFER</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>transfer_characteristics</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_description_present_flag</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OR_INFER</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>matrix_coefficients</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_description_present_flag</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_loc_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_sample_loc_type_top_field</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_loc_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_sample_loc_type_bottom_field</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_loc_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_loc_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>UINT32_MAX</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>UINT32_MAX</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_time_scale</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_num_units_in_tick</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_vui</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_poc_diff_one</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_num_ticks_poc_diff_one_minus1</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_poc_diff_one</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_poc_diff_one</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>crop_unit_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_unit_y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>crop_unit_x</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_unit_y</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROP</name><parameter_list>(<parameter><type><name>border</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ctx-&gt;crop_ ##border &gt;= 0) { if (ctx-&gt;crop_ ##border % unit != 0) { av_log(bsf, AV_LOG_ERROR, "Invalid value for crop_%s: " "must be a multiple of %d.\n", #border, unit); return AVERROR(EINVAL); } sps-&gt;conf_win_ ##border ##_offset = ctx-&gt;crop_ ##border / unit; sps-&gt;conformance_window_flag = 1; } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>crop_unit_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>crop_unit_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>crop_unit_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROP</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>crop_unit_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CROP</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>need_vui</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>h265_metadata_update_level</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_level_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h265_metadata_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No NAL units in packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>HEVC_NAL_AUD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name> <operator>==</operator> <name>REMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name> <operator>==</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H265RawAUD</name> <modifier>*</modifier></type><name>aud</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aud_nal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>temporal_id</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>layer_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawNALUnitHeader</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nal</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>nuh_temporal_id_plus1</name></name> <operator>&lt;</operator> <name>temporal_id</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temporal_id</name> <operator>=</operator> <name><name>nal</name><operator>-&gt;</operator><name>nuh_temporal_id_plus1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&lt;=</operator> <name>HEVC_NAL_RSV_VCL31</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>layer_id</name> <operator>=</operator> <name><name>nal</name><operator>-&gt;</operator><name>nuh_layer_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name> <operator>&amp;&amp;</operator>

<name>pic_type</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pic_type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_P</name> <operator>&amp;&amp;</operator>

<name>pic_type</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pic_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>aud</name><operator>-&gt;</operator><name>nal_unit_header</name></name> <operator>=</operator> <operator>(</operator><name>H265RawNALUnitHeader</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>HEVC_NAL_AUD</name></expr>,

<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <name>layer_id</name></expr>,

<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <name>temporal_id</name> <operator>+</operator> <literal type="number">1</literal></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aud</name><operator>-&gt;</operator><name>pic_type</name></name> <operator>=</operator> <name>pic_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_NAL_AUD</name></expr></argument>, <argument><expr><name>aud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to insert AUD.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>LEVEL_AUTO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>level_guess</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>h265_metadata_guess_level</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>HEVC_NAL_VPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h265_metadata_update_vps</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h265_metadata_update_sps</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h265_metadata_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>LEVEL_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>h265_metadata_guess_level</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>HEVC_NAL_VPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h265_metadata_update_vps</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h265_metadata_update_sps</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h265_metadata_close</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(H265MetadataContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_BSF_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>h265_metadata_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Access Unit Delimiter NAL units"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><name>PASS</name></expr>, <expr><name>REMOVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"aud"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"aud"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"insert"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INSERT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"aud"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"remove"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REMOVE</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"aud"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sample_aspect_ratio"</literal></expr>, <expr><literal type="string">"Set sample aspect ratio (table E-1)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_aspect_ratio</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video_format"</literal></expr>, <expr><literal type="string">"Set video format (table E-2)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video_full_range_flag"</literal></expr>, <expr><literal type="string">"Set video full range flag"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"colour_primaries"</literal></expr>, <expr><literal type="string">"Set colour primaries (table E-3)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"transfer_characteristics"</literal></expr>, <expr><literal type="string">"Set transfer characteristics (table E-4)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"matrix_coefficients"</literal></expr>, <expr><literal type="string">"Set matrix coefficients (table E-5)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_sample_loc_type"</literal></expr>, <expr><literal type="string">"Set chroma sample location type (figure E-1)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_sample_loc_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tick_rate"</literal></expr>,

<expr><literal type="string">"Set VPS and VUI tick rate (num_units_in_tick / time_scale)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"num_ticks_poc_diff_one"</literal></expr>,

<expr><literal type="string">"Set VPS and VUI number of ticks per POC increment"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>num_ticks_poc_diff_one</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop_left"</literal></expr>, <expr><literal type="string">"Set left border crop offset"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_left</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>HEVC_MAX_WIDTH</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop_right"</literal></expr>, <expr><literal type="string">"Set right border crop offset"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_right</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>HEVC_MAX_WIDTH</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop_top"</literal></expr>, <expr><literal type="string">"Set top border crop offset"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_top</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>HEVC_MAX_HEIGHT</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop_bottom"</literal></expr>, <expr><literal type="string">"Set bottom border crop offset"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crop_bottom</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>HEVC_MAX_HEIGHT</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Set level (tables A.6 and A.7)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LEVEL_UNSET</name></expr> }</block></expr>, <expr><name>LEVEL_UNSET</name></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"Attempt to guess level from stream properties"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LEVEL_AUTO</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"level"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, .flags = FLAGS, .unit = "level"</cpp:value></cpp:define>

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1"</literal></argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2.1"</literal></argument>, <argument><literal type="number">63</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3"</literal></argument>, <argument><literal type="number">90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3.1"</literal></argument>, <argument><literal type="number">93</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4"</literal></argument>, <argument><literal type="number">120</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4.1"</literal></argument>, <argument><literal type="number">123</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5"</literal></argument>, <argument><literal type="number">150</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.1"</literal></argument>, <argument><literal type="number">153</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.2"</literal></argument>, <argument><literal type="number">156</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6"</literal></argument>, <argument><literal type="number">180</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.1"</literal></argument>, <argument><literal type="number">183</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.2"</literal></argument>, <argument><literal type="number">186</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"8.5"</literal></argument>, <argument><literal type="number">255</literal></argument>)</argument_list></macro> }</block></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEVEL</name></cpp:undef>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>h265_metadata_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"h265_metadata_bsf"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>h265_metadata_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>h265_metadata_codec_ids</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CODEC_ID_HEVC</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_hevc_metadata_bsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_metadata"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>H265MetadataContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>h265_metadata_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>h265_metadata_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>h265_metadata_close</name></expr>,

<expr><operator>.</operator><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name>h265_metadata_filter</name></expr>,

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>h265_metadata_codec_ids</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
