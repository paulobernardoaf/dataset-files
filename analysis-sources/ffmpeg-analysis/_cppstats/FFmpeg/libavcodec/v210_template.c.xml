<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\v210_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip(v, 1&lt;&lt;(depth-8), ((1&lt;&lt;depth)-(1&lt;&lt;(depth-8))-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_PIXELS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { val = CLIP(*a++, depth) &lt;&lt; (10-depth); val |= (CLIP(*b++, depth) &lt;&lt; (20-depth)) | (CLIP(*c++, depth) &lt;&lt; (30-depth)); AV_WL32(dst, val); dst += 4; } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>v210_enc</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V210EncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aligned_width</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">47</literal><operator>)</operator> <operator>/</operator> <literal type="number">48</literal><operator>)</operator> <operator>*</operator> <literal type="number">48</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>aligned_width</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_padding</name> <init>= <expr><name>stride</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">11</literal><operator>)</operator> <operator>/</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TYPE</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TYPE</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TYPE</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sample_size</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <call><name><name>s</name><operator>-&gt;</operator><name>RENAME</name></name><argument_list>(<argument><expr><name>sample_factor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sample_w</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name>sample_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>sample_w</name> <operator>*</operator> <name>sample_size</name></expr>;</expr_stmt>

<function_decl><type><name><name>s</name><operator>-&gt;</operator><name>RENAME</name></name></type>(<name>pack_line</name>)<parameter_list>(<parameter><decl><type><name>y</name></type></decl></parameter>, <parameter><decl><type><name>u</name></type></decl></parameter>, <parameter><decl><type><name>v</name></type></decl></parameter>, <parameter><decl><type><name>dst</name></type></decl></parameter>, <parameter><decl><type><name>w</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>sample_w</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <call><name><name>s</name><operator>-&gt;</operator><name>RENAME</name></name><argument_list>(<argument><expr><name>sample_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_PIXELS</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_PIXELS</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_PIXELS</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_PIXELS</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_PIXELS</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>*</operator><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">10</literal><operator>-</operator><name>DEPTH</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><call><name>CLIP</name><argument_list>(<argument><expr><operator>*</operator><name>u</name><operator>++</operator></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">20</literal><operator>-</operator><name>DEPTH</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>CLIP</name><argument_list>(<argument><expr><operator>*</operator><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">30</literal><operator>-</operator><name>DEPTH</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>*</operator><name>v</name><operator>++</operator></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">10</literal><operator>-</operator><name>DEPTH</name><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>CLIP</name><argument_list>(<argument><expr><operator>*</operator><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>DEPTH</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">20</literal><operator>-</operator><name>DEPTH</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>line_padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>BYTES_PER_PIXEL</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>BYTES_PER_PIXEL</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <name>BYTES_PER_PIXEL</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
