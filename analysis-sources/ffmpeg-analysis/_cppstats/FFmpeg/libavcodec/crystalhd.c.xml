<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\crystalhd.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>600</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/bc_dts_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/bc_dts_defs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/libcrystalhd_if.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_PROC_TIMEOUT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMESTAMP_UNIT</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>RET_ERROR</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>RET_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>RET_COPY_AGAIN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block></enum></type> <name>CopyRet</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OpaqueList</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>OpaqueList</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fake_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>reordered_opaque</name></decl>;</decl_stmt>

}</block></struct></type> <name>OpaqueList</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_70012</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>need_second_field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>draining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sWidth</name></decl>;</decl_stmt>

}</block></struct></type> <name>CHDContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"crystalhd_downscale_width"</literal></expr>,

<expr><literal type="string">"Turn on downscaling to the specified width"</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CHDContext</name></expr></argument>, <argument><expr><name>sWidth</name></expr></argument>)</argument_list></call></expr>,

<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT32_MAX</name></expr>,

<expr><name>AV_OPT_FLAG_VIDEO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>BC_MEDIA_SUBTYPE</name></type> <name>id2subtype</name><parameter_list>(<parameter><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<return>return <expr><name>BC_MSUBTYPE_DIVX</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V3</name></expr>:</case>

<return>return <expr><name>BC_MSUBTYPE_DIVX311</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<return>return <expr><name>BC_MSUBTYPE_MPEG2VIDEO</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_VC1</name></expr>:</case>

<return>return <expr><name>BC_MSUBTYPE_VC1</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_WMV3</name></expr>:</case>

<return>return <expr><name>BC_MSUBTYPE_WMV3</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<return>return <expr><name>BC_MSUBTYPE_H264</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>BC_MSUBTYPE_INVALID</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>print_frame_info</name><parameter_list>(<parameter><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tYBuffSz: %u\n"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>YbuffSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tYBuffDoneSz: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>YBuffDoneSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tUVBuffDoneSz: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>UVBuffDoneSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tTimestamp: %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>timeStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tPicture Number: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>picture_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tWidth: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tHeight: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tChroma: 0x%03x\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>chroma_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tPulldown: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>pulldown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tFlags: 0x%08x\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tFrame Rate/Res: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tAspect Ratio: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tColor Primaries: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>colour_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tMetaData: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>picture_meta_payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tSession Number: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>sess_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tycom: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>ycom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tCustom Aspect: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>custom_aspect_ratio_width_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tFrames to Drop: %u\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>n_drop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\tH264 Valid Fields: 0x%08x\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>other</name><operator>.</operator><name>h264</name><operator>.</operator><name>valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>opaque_list_push</name><parameter_list>(<parameter><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>reordered_opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>newNode</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>OpaqueList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newNode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unable to allocate new node in OpaqueList.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newNode</name><operator>-&gt;</operator><name>fake_timestamp</name></name> <operator>=</operator> <name>TIMESTAMP_UNIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>newNode</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newNode</name><operator>-&gt;</operator><name>fake_timestamp</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>fake_timestamp</name></name> <operator>+</operator> <name>TIMESTAMP_UNIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newNode</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newNode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newNode</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <name>reordered_opaque</name></expr>;</expr_stmt>

<return>return <expr><name><name>newNode</name><operator>-&gt;</operator><name>fake_timestamp</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpaqueList</name> <modifier>*</modifier></type><name>opaque_list_pop</name><parameter_list>(<parameter><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>fake_timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: Attempted to query non-existent timestamps.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>fake_timestamp</name></name> <operator>==</operator> <name>fake_timestamp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>fake_timestamp</name></name> <operator>==</operator> <name>fake_timestamp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>current</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: Couldn't match fake_timestamp.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>need_second_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>draining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DtsFlushInput</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>device</name></decl>;</decl_stmt>

<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DtsStopDecoder</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DtsCloseDecoder</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DtsDeviceClose</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CHDContext</name><modifier>*</modifier></type> <name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_INFO_CRYSTAL</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_INPUT_FORMAT</name></type> <name>format</name> <init>= <expr><block>{

<expr><operator>.</operator><name>FGTEnable</name> <operator>=</operator> <name>FALSE</name></expr>,

<expr><operator>.</operator><name>Progressive</name> <operator>=</operator> <name>TRUE</name></expr>,

<expr><operator>.</operator><name>OptFlags</name> <operator>=</operator> <literal type="number">0x80000000</literal> <operator>|</operator> <name>vdecFrameRate59_94</name> <operator>|</operator> <literal type="number">0x40</literal></expr>,

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_MEDIA_SUBTYPE</name></type> <name>subtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mode</name> <init>= <expr><name>DTS_PLAYBACK_MODE</name> <operator>|</operator>

<name>DTS_LOAD_FILE_PLAY_FW</name> <operator>|</operator>

<name>DTS_SKIP_TX_CHK_CPB</name> <operator>|</operator>

<name>DTS_PLAYBACK_DROP_RPT_MODE</name> <operator>|</operator>

<name>DTS_SINGLE_THREADED_MODE</name> <operator>|</operator>

<call><name>DTS_DFLT_RESOLUTION</name><argument_list>(<argument><expr><name>vdecRESOLUTION_1080p23_976</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD Init for %s\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUYV422</name></expr>;</expr_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>draining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>subtype</name> <operator>=</operator> <call><name>id2subtype</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>subtype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BC_MSUBTYPE_H264</name></expr>:</case>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>startCodeSz</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<case>case <expr><name>BC_MSUBTYPE_VC1</name></expr>:</case>

<case>case <expr><name>BC_MSUBTYPE_WVC1</name></expr>:</case>

<case>case <expr><name>BC_MSUBTYPE_WMV3</name></expr>:</case>

<case>case <expr><name>BC_MSUBTYPE_WMVA</name></expr>:</case>

<case>case <expr><name>BC_MSUBTYPE_MPEG2VIDEO</name></expr>:</case>

<case>case <expr><name>BC_MSUBTYPE_DIVX</name></expr>:</case>

<case>case <expr><name>BC_MSUBTYPE_DIVX311</name></expr>:</case>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>pMetaData</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>metaDataSz</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: Unknown codec name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>mSubtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sWidth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>bEnableScaling</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>ScalingParams</name><operator>.</operator><name>sWidth</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sWidth</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: starting up\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsDeviceOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: DtsDeviceOpen failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsCrystalHDVersion</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: DtsCrystalHDVersion failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>is_70012</name></name> <operator>=</operator> <name><name>version</name><operator>.</operator><name>device</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>is_70012</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>subtype</name> <operator>==</operator> <name>BC_MSUBTYPE_DIVX</name> <operator>||</operator> <name>subtype</name> <operator>==</operator> <name>BC_MSUBTYPE_DIVX311</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: BCM70012 doesn't support MPEG4-ASP/DivX/Xvid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsSetInputFormat</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: SetInputFormat failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsOpenDecoder</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name>BC_STREAM_TYPE_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: DtsOpenDecoder failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsSetColorSpace</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name>OUTPUT_MODE422_YUY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: DtsSetColorSpace failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsStartDecoder</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: DtsStartDecoder failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsStartCapture</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: DtsStartCapture failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: Init complete.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CopyRet</name></type> <name>copy_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_STATUS</name></type> <name>decoder_status</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bottom_field</name> <init>= <expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_BOTTOMFIELD</name><operator>)</operator> <operator>==</operator>

<name>VDEC_FLAG_BOTTOMFIELD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bottom_first</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_BOTTOM_FIRST</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>Ybuff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sStride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dStride</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>timeStamp</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OpaqueList</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>opaque_list_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>timeStamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pkt_pts</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"output \"pts\": %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>timeStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsGetDriverStatus</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoder_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: GetDriverStatus failed: %u\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>RET_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>interlaced</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_INTERLACED_SRC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Interlaced state: %d\n"</literal></expr></argument>,

<argument><expr><name>interlaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>need_second_field</name></name> <operator>=</operator> <name>interlaced</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>need_second_field</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bwidth</name> <operator>=</operator> <call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bwidth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>is_70012</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pStride</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">720</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pStride</name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">1280</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pStride</name> <operator>=</operator> <literal type="number">1280</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>pStride</name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sStride</name> <operator>=</operator> <call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>pStride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sStride</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RET_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sStride</name> <operator>=</operator> <name>bwidth</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dStride</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: Copying out frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name>sStride</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interlaced</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Interlaced: bottom field\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dY</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Interlaced: top field\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>sY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sY</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>dY</name><operator>++</operator></expr><operator>,</operator> <expr><name>sY</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dst</name><index>[<expr><name>dY</name> <operator>*</operator> <name>dStride</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>src</name><index>[<expr><name>sY</name> <operator>*</operator> <name>sStride</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dY</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dStride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sStride</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <name>interlaced</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interlaced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>!</operator><name>bottom_first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pkt_pts</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name> <init>= <expr><name>pkt_pts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>need_second_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>RET_COPY_AGAIN</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>RET_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CopyRet</name></type> <name>receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_PROC_OUT</name></type> <name>output</name> <init>= <expr><block>{

<expr><operator>.</operator><name><name>PicInfo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name><name>PicInfo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>dev</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DtsProcOutputNoCopy</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>OUTPUT_PROC_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BC_STS_FMT_CHANGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: Initial format change\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<switch>switch <condition>( <expr><name><name>output</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>aspect_ratio</name></name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>vdecAspectRatioSquare</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio12_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio10_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio16_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio40_33</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio24_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio20_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio32_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio80_33</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio18_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio15_11</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio64_33</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio160_99</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{<expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio4_3</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio16_9</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>vdecAspectRatio221_1</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{<expr><literal type="number">221</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>RET_COPY_AGAIN</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>.</operator><name>PoutFlags</name></name> <operator>&amp;</operator> <name>BC_POUT_FLAGS_PIB_VALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_frame_info</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_ret</name> <operator>=</operator> <call><name>copy_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: ProcOutput succeeded with "</literal>

<literal type="string">"invalid PIB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_ret</name> <operator>=</operator> <name>RET_COPY_AGAIN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DtsReleaseOutputBuffs</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>copy_ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BC_STS_BUSY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>RET_COPY_AGAIN</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: ProcOutput failed %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>RET_ERROR</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crystalhd_decode_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>bc_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>dev</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>filtered_packet</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: decode_packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avpkt</name> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>opaque_list_push</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"input \"pts\": %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bc_ret</name> <operator>=</operator> <call><name>DtsProcInput</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bc_ret</name> <operator>==</operator> <name>BC_STS_BUSY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: ProcInput returned busy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bc_ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"CrystalHD: ProcInput failed: %u\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: No more input data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>draining</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filtered_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crystalhd_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>bc_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_STATUS</name></type> <name>decoder_status</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CopyRet</name></type> <name>rec_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHDContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>dev</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: receive_frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_get_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <call><name>DtsTxFreeSize</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: Waiting for space in input buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>crystalhd_decode_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>bc_ret</name> <operator>=</operator> <call><name>DtsGetDriverStatus</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoder_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bc_ret</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: GetDriverStatus failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoder_status</name><operator>.</operator><name>ReadyListCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"CrystalHD: Insufficient frames ready. Returning\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rec_ret</name> <operator>=</operator> <name>RET_OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rec_ret</name> <operator>=</operator> <call><name>receive_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>rec_ret</name> <operator>==</operator> <name>RET_COPY_AGAIN</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>rec_ret</name> <operator>==</operator> <name>RET_ERROR</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>got_frame</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>priv</name><operator>-&gt;</operator><name>draining</name></name></expr> ?</condition><then> <expr><name>AVERROR_EOF</name></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_CRYSTALHD_DECODER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>bsf_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass x##_crystalhd_class = { .class_name = #x "_crystalhd", .item_name = av_default_item_name, .option = options, .version = LIBAVUTIL_VERSION_INT, }; AVCodec ff_##x##_crystalhd_decoder = { .name = #x "_crystalhd", .long_name = NULL_IF_CONFIG_SMALL("CrystalHD " #X " decoder"), .type = AVMEDIA_TYPE_VIDEO, .id = AV_CODEC_ID_##X, .priv_data_size = sizeof(CHDContext), .priv_class = &amp;x##_crystalhd_class, .init = init, .close = uninit, .receive_frame = crystalhd_receive_frame, .flush = flush, .bsfs = bsf_name, .capabilities = AV_CODEC_CAP_DELAY | AV_CODEC_CAP_AVOID_PROBING | AV_CODEC_CAP_HARDWARE, .pix_fmts = (const enum AVPixelFormat[]){AV_PIX_FMT_YUYV422, AV_PIX_FMT_NONE}, .wrapper_name = "crystalhd", };</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_CRYSTALHD_DECODER</name></expr></cpp:if>

<macro><name>DEFINE_CRYSTALHD_DECODER</name><argument_list>(<argument>h264</argument>, <argument>H264</argument>, <argument><literal type="string">"h264_mp4toannexb"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2_CRYSTALHD_DECODER</name></expr></cpp:if>

<macro><name>DEFINE_CRYSTALHD_DECODER</name><argument_list>(<argument>mpeg2</argument>, <argument>MPEG2VIDEO</argument>, <argument>NULL</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG4_CRYSTALHD_DECODER</name></expr></cpp:if>

<macro><name>DEFINE_CRYSTALHD_DECODER</name><argument_list>(<argument>mpeg4</argument>, <argument>MPEG4</argument>, <argument><literal type="string">"mpeg4_unpack_bframes"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MSMPEG4_CRYSTALHD_DECODER</name></expr></cpp:if>

<macro><name>DEFINE_CRYSTALHD_DECODER</name><argument_list>(<argument>msmpeg4</argument>, <argument>MSMPEG4V3</argument>, <argument>NULL</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_CRYSTALHD_DECODER</name></expr></cpp:if>

<macro><name>DEFINE_CRYSTALHD_DECODER</name><argument_list>(<argument>vc1</argument>, <argument>VC1</argument>, <argument>NULL</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_CRYSTALHD_DECODER</name></expr></cpp:if>

<macro><name>DEFINE_CRYSTALHD_DECODER</name><argument_list>(<argument>wmv3</argument>, <argument>WMV3</argument>, <argument>NULL</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
