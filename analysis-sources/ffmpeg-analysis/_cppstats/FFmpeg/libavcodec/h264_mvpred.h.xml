<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_mvpred.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>fetch_diagonal_mv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>C</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>part_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>topright_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <name>part_width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DIAG_MV</name><parameter_list>(<parameter><type><name>MV_OP</name></type></parameter>, <parameter><type><name>REF_OP</name></type></parameter>, <parameter><type><name>XY</name></type></parameter>, <parameter><type><name>Y4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const int xy = XY, y4 = Y4; const int mb_type = mb_types[xy + (y4 &gt;&gt; 2) * h-&gt;mb_stride]; if (!USES_LIST(mb_type, list)) return LIST_NOT_USED; mv = h-&gt;cur_pic_ptr-&gt;motion_val[list][h-&gt;mb2b_xy[xy] + 3 + y4 * h-&gt;b_stride]; sl-&gt;mv_cache[list][scan8[0] - 2][0] = mv[0]; sl-&gt;mv_cache[list][scan8[0] - 2][1] = mv[1] MV_OP; return h-&gt;cur_pic_ptr-&gt;ref_index[list][4 * xy + 1 + (y4 &amp; ~1)] REF_OP;</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>topright_ref</name> <operator>==</operator> <name>PART_NOT_AVAILABLE</name>

<operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>PART_NOT_AVAILABLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>mb_types</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>mb_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>C</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_DIAG_MV</name><argument_list>(<argument><expr><operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_DIAG_MV</name><argument_list>(<argument><expr><operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">36</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_DIAG_MV</name></cpp:undef>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>topright_ref</name> <operator>!=</operator> <name>PART_NOT_AVAILABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>C</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <name>part_width</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>topright_ref</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"topright MV not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>C</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>pred_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>part_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index8</name> <init>= <expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>top_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index8</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index8</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>A</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index8</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>B</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index8</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diagonal_ref</name></decl>, <decl><type ref="prev"/><name>match_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>part_width</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>part_width</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>part_width</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <call><name>fetch_diagonal_mv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>index8</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>part_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>match_count</name> <operator>=</operator> <operator>(</operator><name>diagonal_ref</name> <operator>==</operator> <name>ref</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>top_ref</name> <operator>==</operator> <name>ref</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>left_ref</name> <operator>==</operator> <name>ref</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_motion match_count=%d\n"</literal></expr></argument>, <argument><expr><name>match_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>match_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left_ref</name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>top_ref</name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>top_ref</name> <operator>==</operator> <name>PART_NOT_AVAILABLE</name> <operator>&amp;&amp;</operator>

<name>diagonal_ref</name> <operator>==</operator> <name>PART_NOT_AVAILABLE</name> <operator>&amp;&amp;</operator>

<name>left_ref</name> <operator>!=</operator> <name>PART_NOT_AVAILABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"pred_motion (%2d %2d %2d) (%2d %2d %2d) (%2d %2d %2d) -&gt; (%2d %2d %2d) at %2d %2d %d list %d\n"</literal></expr></argument>,

<argument><expr><name>top_ref</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>diagonal_ref</name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>left_ref</name></expr></argument>,

<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>*</operator><name>mx</name></expr></argument>, <argument><expr><operator>*</operator><name>my</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>pred_16x8_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>top_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>B</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_16x8: (%2d %2d %2d) at %2d %2d %d list %d\n"</literal></expr></argument>,

<argument><expr><name>top_ref</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_ref</name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>A</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_16x8: (%2d %2d %2d) at %2d %2d %d list %d\n"</literal></expr></argument>,

<argument><expr><name>left_ref</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left_ref</name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pred_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>pred_8x16_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>A</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_8x16: (%2d %2d %2d) at %2d %2d %d list %d\n"</literal></expr></argument>,

<argument><expr><name>left_ref</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left_ref</name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diagonal_ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <call><name>fetch_diagonal_mv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_8x16: (%2d %2d %2d) at %2d %2d %d list %d\n"</literal></expr></argument>,

<argument><expr><name>diagonal_ref</name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diagonal_ref</name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pred_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_MV_MBAFF</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>refn</name></type></parameter>, <parameter><type><name>mvn</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (FRAME_MBAFF(h)) { if (MB_FIELD(sl)) { if (!IS_INTERLACED(type)) { refn &lt;&lt;= 1; AV_COPY32(mvbuf[idx], mvn); mvbuf[idx][1] /= 2; mvn = mvbuf[idx]; } } else { if (IS_INTERLACED(type)) { refn &gt;&gt;= 1; AV_COPY32(mvbuf[idx], mvn); mvbuf[idx][1] *= 2; mvn = mvbuf[idx]; } } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>pred_pskip_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></expr></argument>, <argument><expr><name>zeromv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>mvbuf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator><name>mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_ref</name></decl>, <decl><type ref="prev"/><name>left_ref</name></decl>, <decl><type ref="prev"/><name>diagonal_ref</name></decl>, <decl><type ref="prev"/><name>match_count</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>A</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>B</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left_ref</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>mv</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIX_MV_MBAFF</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>, <argument><expr><name>left_ref</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>left_ref</name> <operator>|</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>zeromv</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left_ref</name> <operator>=</operator> <name>LIST_NOT_USED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name>zeromv</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>zeromv</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top_ref</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>mv</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIX_MV_MBAFF</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr></argument>, <argument><expr><name>top_ref</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top_ref</name> <operator>|</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>zeromv</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top_ref</name> <operator>=</operator> <name>LIST_NOT_USED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>zeromv</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>zeromv</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_pskip: (%d) (%d) at %2d %2d\n"</literal></expr></argument>,

<argument><expr><name>top_ref</name></expr></argument>, <argument><expr><name>left_ref</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>topright_mb_xy</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>mv</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>topright_mb_xy</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIX_MV_MBAFF</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_type</name></name></expr></argument>, <argument><expr><name>diagonal_ref</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>topright_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <name>LIST_NOT_USED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name>zeromv</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>topleft_mb_xy</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topleft_partition</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>mv</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_mb_xy</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>b_stride</name> <operator>+</operator>

<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topleft_partition</name></name> <operator>&amp;</operator> <literal type="number">2</literal> <operator>*</operator> <name>b_stride</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIX_MV_MBAFF</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name></expr></argument>, <argument><expr><name>diagonal_ref</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <name>LIST_NOT_USED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name>zeromv</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>diagonal_ref</name> <operator>=</operator> <name>PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name>zeromv</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>match_count</name> <operator>=</operator> <operator>!</operator><name>diagonal_ref</name> <operator>+</operator> <operator>!</operator><name>top_ref</name> <operator>+</operator> <operator>!</operator><name>left_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_pskip_motion match_count=%d\n"</literal></expr></argument>, <argument><expr><name>match_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>match_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>top_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>zeromv</name>:</label>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_decode_neighbors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>topleft_xy</name></decl>, <decl><type ref="prev"/><name>top_xy</name></decl>, <decl><type ref="prev"/><name>topright_xy</name></decl>, <decl><type ref="prev"/><name><name>left_xy</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>left_block_options</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_partition</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top_xy</name> <operator>=</operator> <name>mb_xy</name> <operator>-</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>&lt;&lt;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>topleft_xy</name> <operator>=</operator> <name>top_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>topright_xy</name> <operator>=</operator> <name>top_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_block</name></name> <operator>=</operator> <name><name>left_block_options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_mb_field_flag</name> <init>= <expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>curr_mb_field_flag</name> <init>= <expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left_mb_field_flag</name> <operator>!=</operator> <name>curr_mb_field_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name>mb_xy</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_mb_field_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_block</name></name> <operator>=</operator> <name><name>left_block_options</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>topleft_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_partition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_block</name></name> <operator>=</operator> <name><name>left_block_options</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curr_mb_field_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>topleft_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>top_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>topright_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>top_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>top_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left_mb_field_flag</name> <operator>!=</operator> <name>curr_mb_field_flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curr_mb_field_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_block</name></name> <operator>=</operator> <name><name>left_block_options</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_block</name></name> <operator>=</operator> <name><name>left_block_options</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_mb_xy</name></name> <operator>=</operator> <name>topleft_xy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name> <operator>=</operator> <name>top_xy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_mb_xy</name></name> <operator>=</operator> <name>topright_xy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>topleft_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_type</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>topright_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>FMO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>topleft_xy</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>topleft_xy</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>topright_xy</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_decode_caches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>topleft_xy</name></decl>, <decl><type ref="prev"/><name>top_xy</name></decl>, <decl><type ref="prev"/><name>topright_xy</name></decl>, <decl><type ref="prev"/><name><name>left_xy</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>topleft_type</name></decl>, <decl><type ref="prev"/><name>top_type</name></decl>, <decl><type ref="prev"/><name>topright_type</name></decl>, <decl><type ref="prev"/><name><name>left_type</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left_block</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>left_block</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nnz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nnz_cache</name></decl>;</decl_stmt>

<expr_stmt><expr><name>topleft_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>topleft_mb_xy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>top_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>topright_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>topright_mb_xy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>topleft_type</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>topleft_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>top_type</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>topright_type</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>topright_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SKIP</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type_mask</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name></expr> ?</condition><then> <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>top_samples_available</name></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_samples_available</name></name> <operator>=</operator> <literal type="number">0xEEEA</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top_type</name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>=</operator> <literal type="number">0xB3FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_samples_available</name></name> <operator>=</operator> <literal type="number">0x33FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_samples_available</name></name> <operator>=</operator> <literal type="number">0x26EA</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0xDFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0x5FFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0xFF5F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0xFF5F</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left_typei</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>==</operator> <name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>left_typei</name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0xDF5F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0x5F5F</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0xDF5F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0x5F5F</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>topleft_type</name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topleft_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>topright_type</name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>topright_samples_available</name></name> <operator>&amp;=</operator> <literal type="number">0xFBFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb2br_xy</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>!</operator><operator>(</operator><name>top_type</name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb2br_xy</name><index>[<expr><name><name>left_xy</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mode</name><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name><name>left_block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mode</name><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name><name>left_block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>!</operator><operator>(</operator><name><name>left_type</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <name>type_mask</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nnz_cache</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>top_empty</name> <init>= <expr><ternary><condition><expr><call><name>CABAC</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x40404040</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>top_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>top_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>top_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>left_type</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name><name>left_xy</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><name><name>left_block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>CABAC</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>CABAC</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>top_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_cbp</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_cbp</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x7CF</literal></expr> </then><else>: <expr><literal type="number">0x00F</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_cbp</name></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F0</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_cbp</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x7CF</literal></expr> </then><else>: <expr><literal type="number">0x00F</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTER</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref_cache</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>list</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator><name>mv_cache</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator><name>mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>USES_LIST</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><name>b_xy</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>top_xy</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>top_xy</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name>top_type</name></expr> ?</condition><then> <expr><name>LIST_NOT_USED</name></expr> </then><else>: <expr><name>PART_NOT_AVAILABLE</name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x8</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cache_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>left_xy</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b8_xy</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>left_xy</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>mv</name><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <name><name>left_block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><name>cache_idx</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>mv</name><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <name><name>left_block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>b8_xy</name> <operator>+</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><name>cache_idx</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>b8_xy</name> <operator>+</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><name>cache_idx</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><name>cache_idx</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>left_type</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>LIST_NOT_USED</name></expr>

</then><else>: <expr><name>PART_NOT_AVAILABLE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b8_xy</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <name><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>b8_xy</name> <operator>+</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr> ?</condition><then> <expr><name>LIST_NOT_USED</name></expr>

</then><else>: <expr><name>PART_NOT_AVAILABLE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name>topright_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>topright_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><name>b_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>topright_xy</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>topright_type</name></expr> ?</condition><then> <expr><name>LIST_NOT_USED</name></expr>

</then><else>: <expr><name>PART_NOT_AVAILABLE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ref_cache</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name>topleft_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>topleft_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>b_stride</name> <operator>+</operator>

<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topleft_partition</name></name> <operator>&amp;</operator> <literal type="number">2</literal> <operator>*</operator> <name>b_stride</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b8_xy</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>topleft_xy</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>topleft_partition</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><name>b_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>b8_xy</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>topleft_type</name></expr> ?</condition><then> <expr><name>LIST_NOT_USED</name></expr>

</then><else>: <expr><name>PART_NOT_AVAILABLE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_SKIP</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_SKIP</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>mvd_cache</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mvd_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>mvd</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mvd_table</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>mv_cache</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CABAC</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2br_xy</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvd</name><index>[<expr><name>b_xy</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2br_xy</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvd</name><index>[<expr><name>b_xy</name> <operator>-</operator> <name><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvd</name><index>[<expr><name>b_xy</name> <operator>-</operator> <name><name>left_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2br_xy</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvd</name><index>[<expr><name>b_xy</name> <operator>-</operator> <name><name>left_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvd</name><index>[<expr><name>b_xy</name> <operator>-</operator> <name><name>left_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_ZERO16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO16</name><argument_list>(<argument><expr><name><name>mvd_cache</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>direct_cache</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>direct_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>direct_table</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>direct_table</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>direct_cache</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>MB_TYPE_16x16</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0x01010101u</literal> <operator>*</operator> <operator>(</operator><name>MB_TYPE_DIRECT2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_8X8</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b8_xy</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>top_xy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>direct_table</name><index>[<expr><name>b8_xy</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>direct_table</name><index>[<expr><name>b8_xy</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0x01010101</literal> <operator>*</operator> <operator>(</operator><name>MB_TYPE_16x16</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_DIRECT2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IS_8X8</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>direct_table</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_16x16</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_DIRECT2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IS_8X8</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>direct_table</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>left_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>direct_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_16x16</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_MVS</name></cpp:macro> <cpp:value>MAP_F2F(scan8[0] - 1 - 1 * 8, topleft_type) MAP_F2F(scan8[0] + 0 - 1 * 8, top_type) MAP_F2F(scan8[0] + 1 - 1 * 8, top_type) MAP_F2F(scan8[0] + 2 - 1 * 8, top_type) MAP_F2F(scan8[0] + 3 - 1 * 8, top_type) MAP_F2F(scan8[0] + 4 - 1 * 8, topright_type) MAP_F2F(scan8[0] - 1 + 0 * 8, left_type[LTOP]) MAP_F2F(scan8[0] - 1 + 1 * 8, left_type[LTOP]) MAP_F2F(scan8[0] - 1 + 2 * 8, left_type[LBOT]) MAP_F2F(scan8[0] - 1 + 3 * 8, left_type[LBOT])</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_F2F</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>mb_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!IS_INTERLACED(mb_type) &amp;&amp; sl-&gt;ref_cache[list][idx] &gt;= 0) { sl-&gt;ref_cache[list][idx] *= 2; sl-&gt;mv_cache[list][idx][1] /= 2; sl-&gt;mvd_cache[list][idx][1] &gt;&gt;= 1; }</cpp:value></cpp:define>

<expr_stmt><expr><name>MAP_MVS</name></expr></expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP_F2F</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_F2F</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>mb_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (IS_INTERLACED(mb_type) &amp;&amp; sl-&gt;ref_cache[list][idx] &gt;= 0) { sl-&gt;ref_cache[list][idx] &gt;&gt;= 1; sl-&gt;mv_cache[list][idx][1] *= 2; sl-&gt;mvd_cache[list][idx][1] &lt;&lt;= 1; }</cpp:value></cpp:define>

<expr_stmt><expr><name>MAP_MVS</name></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP_F2F</name></cpp:undef>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>neighbor_transform_size</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>!</operator><operator>!</operator><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>av_unused</name></type> <name>decode_mb_skip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_L0L1</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name> <operator>|</operator> <name>MB_TYPE_SKIP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_decode_neighbors</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_decode_caches</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_pred_direct_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_P0L0</name> <operator>|</operator> <name>MB_TYPE_P1L0</name> <operator>|</operator> <name>MB_TYPE_SKIP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_decode_neighbors</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pred_pskip_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>write_back_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>mb_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>prev_mb_skipped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
