<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\roqvideoenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"roqvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_BIAS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CBS_4x4</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CBS_2x2</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROQ_LAMBDA_SCALE</name></cpp:macro> <cpp:value>((uint64_t) FF_LAMBDA_SCALE)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unpack_roq_cell</name><parameter_list>(<parameter><decl><type><name>roq_cell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>u</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>u</name></expr></argument> , <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>u</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>u</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>u</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unpack_roq_qcell</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>cb2</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>roq_qcell</name> <modifier>*</modifier></type><name>qcell</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>u</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>offsets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cp</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>u</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>cp</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>=</operator> <name><name>cb2</name><index>[<expr><name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>cp</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>cp</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cb2</name><index>[<expr><name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>cp</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>cp</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>cb2</name><index>[<expr><name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>cp</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>cp</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>cb2</name><index>[<expr><name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>cp</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enlarge_roq_mb4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>base</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>u</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>cp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cp</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <name><name>base</name><index>[<expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>x</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>cp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>square</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>x</name><operator>*</operator><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eval_sse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff</name> <operator>+=</operator> <call><name>square</name><argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>diff</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>block_sse</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>buf2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>stride1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>stride2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sse</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><name>CHROMA_BIAS</name></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sse</name> <operator>+=</operator> <name>bias</name><operator>*</operator><call><name>eval_sse</name><argument_list>(<argument><expr><name><name>buf1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y1</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name><name>stride1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>x1</name></expr></argument>,

<argument><expr><name><name>buf2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y2</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name><name>stride2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>x2</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>sse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_motion_dist</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>motion_vect</name></type> <name>vect</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>=<expr><name><name>vect</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name><init>=<expr><name><name>vect</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mx</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">7</literal> <operator>||</operator> <name>mx</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>my</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">7</literal> <operator>||</operator> <name>my</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>mx</name> <operator>&gt;</operator> <name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><name>size</name> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>my</name> <operator>&gt;</operator> <name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>block_sse</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>squared_diff_macroblock</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>b</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name></decl>, <decl><type ref="prev"/><name>sdiff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>cp</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>cp</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>cp</name></expr> ?</condition><then> <expr><name>CHROMA_BIAS</name></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sdiff</name> <operator>+=</operator> <name>bias</name><operator>*</operator><call><name>eval_sse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>size</name><operator>*</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>size</name><operator>*</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sdiff</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SubcelEvaluation</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>eval_dist</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_bit_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_coding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>subCels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_vect</name></type> <name>motion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbEntry</name></decl>;</decl_stmt>

}</block></struct></type> <name>SubcelEvaluation</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CelEvaluation</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>eval_dist</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_coding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SubcelEvaluation</name></type> <name><name>subCels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_vect</name></type> <name>motion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbEntry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sourceX</name></decl>, <name>sourceY</name>;</decl_stmt>

}</block></struct></type> <name>CelEvaluation</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RoqCodebooks</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>numCB4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numCB2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>usedCB2</name><index>[<expr><name>MAX_CBS_2x2</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>usedCB4</name><index>[<expr><name>MAX_CBS_4x4</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>unpacked_cb2</name><index>[<expr><name>MAX_CBS_2x2</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>unpacked_cb4</name><index>[<expr><name>MAX_CBS_4x4</name><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>unpacked_cb4_enlarged</name><index>[<expr><name>MAX_CBS_4x4</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RoqCodebooks</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RoqTempData</name>

<block>{

<decl_stmt><decl><type><name>CelEvaluation</name> <modifier>*</modifier></type><name>cel_evals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>f2i4</name><index>[<expr><name>MAX_CBS_4x4</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>i2f4</name><index>[<expr><name>MAX_CBS_4x4</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>f2i2</name><index>[<expr><name>MAX_CBS_2x2</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>i2f2</name><index>[<expr><name>MAX_CBS_2x2</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mainChunkSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numCB4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numCB2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RoqCodebooks</name></type> <name>codebooks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>closest_cb2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>used_option</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RoqTempdata</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_cel_evals</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CelEvaluation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name><index>[<expr><name>n</name></expr> ]</index></name><operator>.</operator><name>sourceX</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>sourceY</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_frame_mb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>mb</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cp</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>cp</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>dim</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>mb</name><operator>++</operator> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>cp</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>index_mb</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>cluster</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>cb</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numCB</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lDiff</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>pick</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>numCB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>squared_diff_macroblock</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name>cb</name> <operator>+</operator> <name>i</name><operator>*</operator><name>dim</name><operator>*</operator><name>dim</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>lDiff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lDiff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pick</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>outIndex</name> <operator>=</operator> <name>pick</name></expr>;</expr_stmt>

<return>return <expr><name>lDiff</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_MOTION</name><parameter_list>(<parameter><type><name>MOTION</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { diff = eval_motion_dist(enc, j, i, MOTION, blocksize); if (diff &lt; lowestdiff) { lowestdiff = diff; bestpick = MOTION; } } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>motion_search</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>motion_vect</name></type> <name><name>offsets</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>lowestdiff</name></decl>, <decl><type ref="prev"/><name>oldbest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>off</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_vect</name></type> <name>bestpick</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_vect</name> <modifier>*</modifier></type><name>last_motion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_vect</name> <modifier>*</modifier></type><name>this_motion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_vect</name></type> <name>vect</name></decl>, <decl><type ref="prev"/><name>vect2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name><init>=<expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><name>blocksize</name><operator>)</operator><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><name>blocksize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_motion</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>last_motion4</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>this_motion</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>last_motion</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>last_motion8</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>this_motion</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>blocksize</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><name>blocksize</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lowestdiff</name> <operator>=</operator> <macro><name>eval_motion_dist</name><argument_list>(<argument>enc</argument>, <argument>j</argument>, <argument>i</argument>, <argument>(motion_vect) {{<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}}</argument>,

<argument>blocksize</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestpick</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestpick</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name><index>[<expr><operator>(</operator><name>i</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>j</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>/</operator><name>blocksize</name><operator>)</operator><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><name>blocksize</name> <operator>+</operator> <name>j</name><operator>/</operator><name>blocksize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name><name>last_motion</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name><name>last_motion</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>/</operator><name>blocksize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><name>blocksize</name> <operator>+</operator> <name>j</name><operator>/</operator><name>blocksize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name><name>last_motion</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>i</name><operator>/</operator><name>blocksize</name><operator>)</operator><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><name>blocksize</name> <operator>+</operator> <name>j</name><operator>/</operator><name>blocksize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>off</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><name>blocksize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>off</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name><name>off</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vect</name><operator>.</operator><name>d</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>this_motion</name><index>[<expr><name><name>off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>this_motion</name><index>[<expr><name><name>off</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>this_motion</name><index>[<expr><name><name>off</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name>vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name><name>this_motion</name><index>[<expr><name><name>off</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name><name>this_motion</name><index>[<expr><name><name>off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vect</name> <operator>=</operator> <name>bestpick</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldbest</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>oldbest</name> <operator>!=</operator> <name>lowestdiff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oldbest</name> <operator>=</operator> <name>lowestdiff</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vect2</name> <operator>=</operator> <name>vect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect2</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>offsets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vect2</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>offsets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVAL_MOTION</name><argument_list>(<argument><expr><name>vect2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vect</name> <operator>=</operator> <name>bestpick</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>/</operator><name>blocksize</name><operator>)</operator><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><name>blocksize</name> <operator>+</operator> <name>j</name><operator>/</operator><name>blocksize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this_motion</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>bestpick</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gather_data_for_subcel</name><parameter_list>(<parameter><decl><type><name>SubcelEvaluation</name> <modifier>*</modifier></type><name>subcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mb4</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mb2</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cluster_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>best_dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>bitsUsed</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">34</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>motion</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name><index>[<expr><name>y</name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">16</literal> <operator>+</operator> <name>x</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_FCC</name></expr>]</index></name> <operator>=</operator>

<call><name>eval_motion_dist</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name><index>[<expr><name>y</name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">16</literal> <operator>+</operator> <name>x</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_FCC</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_MOT</name></expr>]</index></name> <operator>=</operator> <call><name>block_sse</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_MOT</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cluster_index</name> <operator>=</operator> <name>y</name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">16</literal> <operator>+</operator> <name>x</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_frame_mb</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mb4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_SLD</name></expr>]</index></name> <operator>=</operator> <call><name>index_mb</name><argument_list>(<argument><expr><name>mb4</name></expr></argument>,

<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>unpacked_cb4</name></name></expr></argument>,

<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>numCB4</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>subcel</name><operator>-&gt;</operator><name>cbEntry</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_CCC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tempData</name><operator>-&gt;</operator><name>closest_cb2</name><index>[<expr><name>cluster_index</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_frame_mb</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name></name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>y</name><operator>+</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>mb2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_CCC</name></expr>]</index></name> <operator>+=</operator>

<call><name>squared_diff_macroblock</name><argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>unpacked_cb2</name></name> <operator>+</operator> <name><name>subcel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>mb2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>ROQ_LAMBDA_SCALE</name><operator>*</operator><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name><operator>*</operator><name><name>bitsUsed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator>

<name>best_dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>best_coding</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subcel</name><operator>-&gt;</operator><name>best_bit_use</name></name> <operator>=</operator> <name><name>bitsUsed</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>ROQ_LAMBDA_SCALE</name><operator>*</operator><name><name>subcel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name><operator>*</operator><name><name>bitsUsed</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gather_data_for_cel</name><parameter_list>(<parameter><decl><type><name>CelEvaluation</name> <modifier>*</modifier></type><name>cel</name></decl></parameter>, <parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,

<parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mb8</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">64</literal> <operator>+</operator> <name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>best_dist</name></decl>, <decl><type ref="prev"/><name>divide_bit_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bitsUsed</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>motion</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_FCC</name></expr>]</index></name> <operator>=</operator>

<call><name>eval_motion_dist</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_FCC</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_MOT</name></expr>]</index></name> <operator>=</operator> <call><name>block_sse</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name></expr></argument>,

<argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_MOT</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_frame_mb</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name></name></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name></expr></argument>, <argument><expr><name>mb8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_SLD</name></expr>]</index></name> <operator>=</operator>

<call><name>index_mb</name><argument_list>(<argument><expr><name>mb8</name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>unpacked_cb4_enlarged</name></name></expr></argument>,

<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>numCB4</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cel</name><operator>-&gt;</operator><name>cbEntry</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gather_data_for_subcel</name><argument_list>(<argument><expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gather_data_for_subcel</name><argument_list>(<argument><expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gather_data_for_subcel</name><argument_list>(<argument><expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gather_data_for_subcel</name><argument_list>(<argument><expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceX</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cel</name><operator>-&gt;</operator><name>sourceY</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_CCC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>divide_bit_use</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>RoQ_ID_CCC</name></expr>]</index></name> <operator>+=</operator>

<name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>eval_dist</name><index>[<expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>best_coding</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>divide_bit_use</name> <operator>+=</operator> <name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>best_bit_use</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitsUsed</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>divide_bit_use</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>ROQ_LAMBDA_SCALE</name><operator>*</operator><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name><operator>*</operator><name><name>bitsUsed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator>

<name>best_dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cel</name><operator>-&gt;</operator><name>best_coding</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>ROQ_LAMBDA_SCALE</name><operator>*</operator><name><name>cel</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name><operator>*</operator><name><name>bitsUsed</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>used_option</name><index>[<expr><name><name>cel</name><operator>-&gt;</operator><name>best_coding</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>mainChunkSize</name></name> <operator>+=</operator> <name><name>bitsUsed</name><index>[<expr><name><name>cel</name><operator>-&gt;</operator><name>best_coding</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cel</name><operator>-&gt;</operator><name>best_coding</name></name> <operator>==</operator> <name>RoQ_ID_SLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB4</name><index>[<expr><name><name>cel</name><operator>-&gt;</operator><name>cbEntry</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cel</name><operator>-&gt;</operator><name>best_coding</name></name> <operator>==</operator> <name>RoQ_ID_CCC</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>best_coding</name> <operator>==</operator> <name>RoQ_ID_SLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB4</name><index>[<expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbEntry</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>best_coding</name> <operator>==</operator> <name>RoQ_ID_CCC</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB2</name><index>[<expr><name><name>cel</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remap_codebooks</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>idx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>quake3_compat</name></name></expr> ?</condition><then> <expr><name>MAX_CBS_4x4</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>MAX_CBS_4x4</name></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB4</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>i2f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>f2i4</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB2</name><index>[<expr><name><name>enc</name><operator>-&gt;</operator><name>cb4x4</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>numCB4</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_CBS_2x2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>i2f2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>f2i2</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>numCB2</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_codebooks</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>outp</name><init>= <expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tempData</name><operator>-&gt;</operator><name>numCB2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name>RoQ_QUAD_CODEBOOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>numCB2</name></name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name><name>tempData</name><operator>-&gt;</operator><name>numCB4</name></name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>numCB4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>numCB2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tempData</name><operator>-&gt;</operator><name>numCB2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name><name>tempData</name><operator>-&gt;</operator><name>f2i2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name><name>tempData</name><operator>-&gt;</operator><name>f2i2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name><index>[<expr><name><name>tempData</name><operator>-&gt;</operator><name>f2i2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tempData</name><operator>-&gt;</operator><name>numCB4</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>i2f2</name><index>[<expr><name><name>enc</name><operator>-&gt;</operator><name>cb4x4</name><index>[<expr><name><name>tempData</name><operator>-&gt;</operator><name>f2i4</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>motion_arg</name><parameter_list>(<parameter><decl><type><name>motion_vect</name></type> <name>mot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ax</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>mot</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ay</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>mot</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>ax</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ay</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>CodingSpool</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>typeSpool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>typeSpoolLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>argumentSpool</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pout</name></decl>;</decl_stmt>

}</block></struct></type> <name>CodingSpool</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_typecode</name><parameter_list>(<parameter><decl><type><name>CodingSpool</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>typeSpool</name></name> <operator>|=</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>typeSpoolLength</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>typeSpoolLength</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>typeSpoolLength</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>typeSpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>argumentSpool</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>args</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>argumentSpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>typeSpoolLength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>typeSpool</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>argumentSpool</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reconstruct_and_encode_image</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numBlocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subX</name></decl>, <decl><type ref="prev"/><name>subY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>roq_qcell</name> <modifier>*</modifier></type><name>qcell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CelEvaluation</name> <modifier>*</modifier></type><name>eval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodingSpool</name></type> <name>spool</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spool</name><operator>.</operator><name>typeSpool</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spool</name><operator>.</operator><name>typeSpoolLength</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spool</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name><name>spool</name><operator>.</operator><name>argumentSpool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spool</name><operator>.</operator><name>pout</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tempData</name><operator>-&gt;</operator><name>used_option</name><index>[<expr><name>RoQ_ID_CCC</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>mainChunkSize</name></name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name>RoQ_QUAD_VQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>mainChunkSize</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>numBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>eval</name> <operator>=</operator> <name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>sourceX</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>sourceY</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name><name>eval</name><operator>-&gt;</operator><name>eval_dist</name><index>[<expr><name><name>eval</name><operator>-&gt;</operator><name>best_coding</name></name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>best_coding</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RoQ_ID_MOT</name></expr>:</case>

<expr_stmt><expr><call><name>write_typecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spool</name></expr></argument>, <argument><expr><name>RoQ_ID_MOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RoQ_ID_FCC</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spool</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><call><name>motion_arg</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>motion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_typecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spool</name></expr></argument>, <argument><expr><name>RoQ_ID_FCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_motion_8x8</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>motion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>motion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RoQ_ID_SLD</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spool</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>i2f4</name><index>[<expr><name><name>eval</name><operator>-&gt;</operator><name>cbEntry</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_typecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spool</name></expr></argument>, <argument><expr><name>RoQ_ID_SLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qcell</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>cb4x4</name></name> <operator>+</operator> <name><name>eval</name><operator>-&gt;</operator><name>cbEntry</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument> , <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name></expr></argument> , <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_4x4</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RoQ_ID_CCC</name></expr>:</case>

<expr_stmt><expr><call><name>write_typecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spool</name></expr></argument>, <argument><expr><name>RoQ_ID_CCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>subX</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>subY</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>best_coding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RoQ_ID_MOT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>RoQ_ID_FCC</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spool</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><call><name>motion_arg</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>motion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_motion_4x4</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subX</name></expr></argument>, <argument><expr><name>subY</name></expr></argument>,

<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>motion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>motion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RoQ_ID_SLD</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spool</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>i2f4</name><index>[<expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cbEntry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qcell</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>cb4x4</name></name> <operator>+</operator> <name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cbEntry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subX</name></expr></argument> , <argument><expr><name>subY</name></expr></argument> ,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subX</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>subY</name></expr></argument> ,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subX</name></expr></argument> , <argument><expr><name>subY</name><operator>+</operator><literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subX</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>subY</name><operator>+</operator><literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name><name>qcell</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RoQ_ID_CCC</name></expr>:</case>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cb_idx</name> <init>= <expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>subCels</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spool</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>i2f2</name><index>[<expr><name>cb_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_apply_vector_2x2</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subX</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>subY</name> <operator>+</operator> <operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name>cb_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>write_typecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spool</name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>subCels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>best_coding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<while>while <condition>(<expr><name><name>spool</name><operator>.</operator><name>typeSpoolLength</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_typecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spool</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>frame_block_to_cell</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>top</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name><name>stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>left</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>block</name><operator>++</operator> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>top</name><operator>+</operator><name>i</name><operator>)</operator><operator>*</operator><name><name>stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>left</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>block</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>block</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>v</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_clusters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yuvClusters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>frame_block_to_cell</name><argument_list>(<argument><expr><name>yuvClusters</name> <operator>+</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>k</name><operator>)</operator><operator>*</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>k</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>l</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>yuvClusters</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_codebook</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempdata</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputCount</name></decl></parameter>, <parameter><decl><type><name>roq_cell</name> <modifier>*</modifier></type><name>results</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_size</name> <init>= <expr><name>size</name><operator>*</operator><name>size</name><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>c_size</name></expr></argument>, <argument><expr><name>cbsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>closest_cb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codebook</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>closest_cb</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>c_size</name></expr></argument>, <argument><expr><name>inputCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>closest_cb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>closest_cb</name> <operator>=</operator> <name><name>tempdata</name><operator>-&gt;</operator><name>closest_cb2</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_init_elbg</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <name>c_size</name></expr></argument>, <argument><expr><name>inputCount</name></expr></argument>, <argument><expr><name>codebook</name></expr></argument>,

<argument><expr><name>cbsize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>closest_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_do_elbg</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <name>c_size</name></expr></argument>, <argument><expr><name>inputCount</name></expr></argument>, <argument><expr><name>codebook</name></expr></argument>,

<argument><expr><name>cbsize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>closest_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>codebook</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cbsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>c_size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>results</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>results</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator> <operator>+</operator> <name>CHROMA_BIAS</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><name>CHROMA_BIAS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>results</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator> <operator>+</operator> <name>CHROMA_BIAS</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><name>CHROMA_BIAS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>results</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>closest_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codebook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_new_codebooks</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RoqCodebooks</name> <modifier>*</modifier></type><name>codebooks</name> <init>= <expr><operator>&amp;</operator><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mb2</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>roq_cell</name> <modifier>*</modifier></type><name>results4</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>roq_cell</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_CBS_4x4</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yuvClusters</name><init>=<expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">6</literal><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>points</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>results4</name> <operator>||</operator> <operator>!</operator><name>yuvClusters</name> <operator>||</operator> <operator>!</operator><name>points</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>create_clusters</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>yuvClusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max</name><operator>*</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bias</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name><operator>%</operator><literal type="number">6</literal><operator>)</operator><operator>&lt;</operator><literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>CHROMA_BIAS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bias</name><operator>*</operator><name><name>yuvClusters</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>generate_codebook</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>max</name></expr></argument>,

<argument><expr><name>results4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>quake3_compat</name></name></expr> ?</condition><then> <expr><name>MAX_CBS_4x4</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>MAX_CBS_4x4</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>codebooks</name><operator>-&gt;</operator><name>numCB4</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>quake3_compat</name></name></expr> ?</condition><then> <expr><name>MAX_CBS_4x4</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>MAX_CBS_4x4</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>closest_cb2</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tempData</name><operator>-&gt;</operator><name>closest_cb2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>generate_codebook</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>max</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>MAX_CBS_2x2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>codebooks</name><operator>-&gt;</operator><name>numCB2</name></name> <operator>=</operator> <name>MAX_CBS_2x2</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>codebooks</name><operator>-&gt;</operator><name>numCB2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unpack_roq_cell</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb2x2</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>unpacked_cb2</name></name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>codebooks</name><operator>-&gt;</operator><name>numCB4</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>unpack_roq_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>results4</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>index_mb</name><argument_list>(<argument><expr><name>mb2</name></expr></argument>, <argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>unpacked_cb2</name></name></expr></argument>, <argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>numCB2</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>cb4x4</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>unpack_roq_qcell</name><argument_list>(<argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>unpacked_cb2</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>cb4x4</name></name> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>unpacked_cb4</name></name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enlarge_roq_mb4</name><argument_list>(<argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>unpacked_cb4</name></name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>codebooks</name><operator>-&gt;</operator><name>unpacked_cb4_enlarged</name></name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>yuvClusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>results4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>roq_encode_video</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RoqTempdata</name> <modifier>*</modifier></type><name>tempData</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>tmpData</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tempData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tempData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_cel_evals</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>generate_new_codebooks</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>motion_search</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>motion_search</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>retry_encode</name>:</label>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gather_data_for_cel</name><argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>tempData</name><operator>-&gt;</operator><name>mainChunkSize</name></name><operator>/</operator><literal type="number">8</literal> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>quake3_compat</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name> <operator>&gt;</operator> <literal type="number">100000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot encode video in Quake compatible form\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Warning, generated a frame too big for Quake (%d &gt; 65535), "</literal>

<literal type="string">"now switching to a bigger qscale value.\n"</literal></expr></argument>,

<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>mainChunkSize</name></name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*=</operator> <literal type="number">1.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempData</name><operator>-&gt;</operator><name>mainChunkSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>used_option</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>used_option</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tempData</name><operator>-&gt;</operator><name>codebooks</name><operator>.</operator><name>usedCB2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>retry_encode</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remap_codebooks</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_codebooks</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reconstruct_and_encode_image</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>tempData</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>motion_vect</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>last_motion4</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>motion_vect</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>last_motion8</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tempData</name><operator>-&gt;</operator><name>cel_evals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tempData</name><operator>-&gt;</operator><name>closest_cb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>roq_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>tmpData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>last_motion4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>last_motion8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>roq_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dimensions must be divisible by 16\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dimensions are max %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>quake3_compat</name></name></expr> ?</condition><then> <expr><literal type="number">32768</literal></expr> </then><else>: <expr><literal type="number">65535</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Warning: dimensions not power of two, this is not supported by quake\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>first_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>roq_encode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>tmpData</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RoqTempdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name></name> <operator>=</operator>

<call><name>av_mallocz_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>motion_vect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>last_motion4</name></name> <operator>=</operator>

<call><name>av_malloc_array</name> <argument_list>(<argument><expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>motion_vect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name></name> <operator>=</operator>

<call><name>av_mallocz_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">64</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>motion_vect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>last_motion8</name></name> <operator>=</operator>

<call><name>av_malloc_array</name> <argument_list>(<argument><expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>enc</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">64</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>motion_vect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>tmpData</name></name> <operator>||</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>this_motion4</name></name> <operator>||</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>last_motion4</name></name> <operator>||</operator>

<operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>this_motion8</name></name> <operator>||</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>last_motion8</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>roq_encode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>roq_write_video_info_chunk</name><parameter_list>(<parameter><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name>RoQ_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>roq_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RoqContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>frame_to_enc</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>quality</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>ROQ_LAMBDA_SCALE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">64</literal><operator>)</operator> <operator>*</operator> <literal type="number">138</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>first_frame</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>roq_write_video_info_chunk</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>first_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>roq_encode_video</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>framesSinceKeyframe</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(RoqContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"quake3_compat"</literal></expr>, <expr><literal type="string">"Whether to respect known limitations in Quake 3 decoder"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>quake3_compat</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>roq_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"RoQ"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_roq_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"roqvideo"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"id RoQ video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ROQ</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RoqContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>roq_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>roq_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>roq_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>roq_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
