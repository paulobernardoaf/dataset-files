<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\g2meet.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elsdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegtables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPIC_PIX_STACK_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPIC_PIX_STACK_MAX</name></cpp:macro> <cpp:value>(EPIC_PIX_STACK_SIZE - 1)</cpp:value></cpp:define>

<enum>enum <name>ChunkType</name> <block>{

<decl><name>DISPLAY_INFO</name> <init>= <expr><literal type="number">0xC8</literal></expr></init></decl>,

<decl><name>TILE_DATA</name></decl>,

<decl><name>CURSOR_POS</name></decl>,

<decl><name>CURSOR_SHAPE</name></decl>,

<decl><name>CHUNK_CC</name></decl>,

<decl><name>CHUNK_CD</name></decl>

}</block>;</enum>

<enum>enum <name>Compression</name> <block>{

<decl><name>COMPR_EPIC_J_B</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>COMPR_KEMPF_J_B</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>luma_quant</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">39</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">46</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">51</literal></expr>,

<expr><literal type="number">36</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">50</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_quant</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ePICPixListElem</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ePICPixListElem</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>rung</name></decl>;</decl_stmt>

}</block></struct></type> <name>ePICPixListElem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ePICPixHashElem</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ePICPixListElem</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

}</block></struct></type> <name>ePICPixHashElem</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPIC_HASH_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ePICPixHash</name> <block>{

<decl_stmt><decl><type><name>ePICPixHashElem</name> <modifier>*</modifier></type><name><name>bucket</name><index>[<expr><name>EPIC_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bucket_size</name><index>[<expr><name>EPIC_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bucket_fill</name><index>[<expr><name>EPIC_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ePICPixHash</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ePICContext</name> <block>{

<decl_stmt><decl><type><name>ElsDecCtx</name></type> <name>els_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_run_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ElsUnsignedRung</name></type> <name>unsigned_rung</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>W_flag_rung</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>N_flag_rung</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>W_ctx_rung</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>N_ctx_rung</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nw_pred_rung</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ne_pred_rung</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>prev_row_rung</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>runlen_zeroes</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>runlen_one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stack_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>stack</name><index>[<expr><name>EPIC_PIX_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ePICPixHash</name></type> <name>hash</name></decl>;</decl_stmt>

}</block></struct></type> <name>ePICContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JPGContext</name> <block>{

<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScanTable</name></type> <name>scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name><name>dc_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <name><name>ac_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>prev_dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

}</block></struct></type> <name>JPGContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>G2MContext</name> <block>{

<decl_stmt><decl><type><name>ePICContext</name></type> <name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPGContext</name></type> <name>jc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compression</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>, <name>bpp</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_width</name></decl>, <name>orig_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_width</name></decl>, <name>tile_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tiles_x</name></decl>, <name>tiles_y</name>, <name>tile_x</name>, <name>tile_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>framebuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>framebuf_stride</name></decl>, <name>old_width</name>, <name>old_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>synth_tile</name></decl>, <modifier>*</modifier><name>jpeg_tile</name>, <modifier>*</modifier><name>epic_buf</name>, <modifier>*</modifier><name>epic_buf_base</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_stride</name></decl>, <name>epic_buf_stride</name>, <name>old_tile_w</name>, <name>old_tile_h</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>swapuv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>kempf_buf</name></decl>, <modifier>*</modifier><name>kempf_flags</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_w</name></decl>, <name>cursor_h</name>, <name>cursor_x</name>, <name>cursor_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_hot_x</name></decl>, <name>cursor_hot_y</name>;</decl_stmt>

}</block></struct></type> <name>G2MContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>build_vlc</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bits_table</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>val_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_codes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>huff_size</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>huff_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>huff_sym</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name>huff_size</name></expr></argument>, <argument><expr><name>huff_code</name></expr></argument>, <argument><expr><name>bits_table</name></expr></argument>, <argument><expr><name>val_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>huff_sym</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>is_ac</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>is_ac</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>huff_sym</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>nb_codes</name></expr></argument>, <argument><expr><name>huff_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>huff_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>huff_sym</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>jpg_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>JPGContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_dc_luminance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_dc</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_dc_chrominance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_dc</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ac_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_ac_luminance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_ac_luminance</name></expr></argument>, <argument><expr><literal type="number">251</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ac_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_ac_chrominance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_ac_chrominance</name></expr></argument>, <argument><expr><literal type="number">251</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>,

<argument><expr><name>ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>jpg_free_context</name><parameter_list>(<parameter><decl><type><name>JPGContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ac_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jpg_unescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_start</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dst_size</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>dst_start</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpg_decode_block</name><parameter_list>(<parameter><decl><type><name>JPGContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_chroma</name> <init>= <expr><operator>!</operator><operator>!</operator><name>plane</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>qmat</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><name>chroma_quant</name></expr> </then><else>: <expr><name>luma_quant</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>is_chroma</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>get_xbits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>dc</name> <operator>*</operator> <name><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ac_vlc</name><index>[<expr><name>is_chroma</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nbits</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_xbits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>*=</operator> <name><name>qmat</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>yuv2rgb</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ridx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>ridx</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <operator>(</operator><literal type="number">91881</literal> <operator>*</operator> <name>V</name> <operator>+</operator> <literal type="number">32768</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">22554</literal> <operator>*</operator> <name>U</name> <operator>-</operator> <literal type="number">46802</literal> <operator>*</operator> <name>V</name> <operator>+</operator> <literal type="number">32768</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <name>ridx</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <operator>(</operator><literal type="number">116130</literal> <operator>*</operator> <name>U</name> <operator>+</operator> <literal type="number">32768</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpg_decode_data</name><parameter_list>(<parameter><decl><type><name>JPGContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_mbs</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>swapuv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_w</name></decl>, <decl><type ref="prev"/><name>mb_h</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unesc_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ridx</name> <init>= <expr><ternary><condition><expr><name>swapuv</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>src_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>jpg_unescape</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unesc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>unesc_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>unesc_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_w</name> <operator>=</operator> <name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_h</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_mbs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_mbs</name> <operator>=</operator> <name>mb_w</name> <operator>*</operator> <name>mb_h</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bx</name> <operator>=</operator>

<name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_blocks</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name>mb_h</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name>mb_w</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mask</name><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mask</name><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>mask</name><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mask_stride</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>mask</name><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>mask_stride</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bx</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mask</name><index>[<expr><name>mb_x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>mask_stride</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_mbs</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpg_decode_block</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpg_decode_block</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>bx</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>by</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>U</name></decl>, <decl><type ref="prev"/><name>V</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yuv2rgb</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>ridx</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_mbs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bx</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>by</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>mask_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_NEIGHBOURS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>W = curr_row[(x) - 1]; N = above_row[(x)]; WW = curr_row[(x) - 2]; NW = above_row[(x) - 1]; NE = above_row[(x) + 1]; NN = above2_row[(x)]; NNW = above2_row[(x) - 1]; NWW = above_row[(x) - 2]; NNE = above2_row[(x) + 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_NEIGHBOURS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NNW = NN; NN = NNE; NWW = NW; NW = N; N = NE; NE = above_row[(x) + 1]; NNE = above2_row[(x) + 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_shift</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G_shift</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_shift</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>djb2_hash</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <literal type="number">33</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <literal type="number">33</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <literal type="number">33</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <literal type="number">33</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>h</name> <operator>&amp;</operator> <operator>(</operator><name>EPIC_HASH_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epic_hash_init</name><parameter_list>(<parameter><decl><type><name>ePICPixHash</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ePICPixHashElem</name> <modifier>*</modifier></type><name>epic_hash_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ePICPixHash</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><call><name>djb2_hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ePICPixHashElem</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>bucket_fill</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_id</name> <operator>==</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ePICPixHashElem</name> <modifier>*</modifier></type><name>epic_hash_add</name><parameter_list>(<parameter><decl><type><name>ePICPixHash</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ePICPixHashElem</name> <modifier>*</modifier></type><name>bucket</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>djb2_hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>bucket_size</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>hash</name><operator>-&gt;</operator><name>bucket</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hash</name><operator>-&gt;</operator><name>bucket_fill</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>bucket_size</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bucket_size</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bucket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bucket</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>bucket</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bucket_size</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name><name>hash</name><operator>-&gt;</operator><name>bucket_fill</name><index>[<expr><name>idx</name></expr>]</index></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>pix_id</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_add_pixel_to_cache</name><parameter_list>(<parameter><decl><type><name>ePICPixHash</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ePICPixListElem</name> <modifier>*</modifier></type><name>new_elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ePICPixHashElem</name> <modifier>*</modifier></type><name>hash_elem</name> <init>= <expr><call><name>epic_hash_find</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_elem</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hash_elem</name> <operator>=</operator> <call><name>epic_hash_add</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_elem</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_elem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_elem</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>pixel</name></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>new_elem</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>epic_cache_entries_for_pixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ePICPixHash</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ePICPixHashElem</name> <modifier>*</modifier></type><name>hash_elem</name> <init>= <expr><call><name>epic_hash_find</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_elem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epic_free_pixel_cache</name><parameter_list>(<parameter><decl><type><name>ePICPixHash</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EPIC_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>bucket_fill</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ePICPixListElem</name> <modifier>*</modifier></type><name>list_elem</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>list_elem</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ePICPixListElem</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>list_elem</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>list_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list_elem</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bucket_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>hash</name><operator>-&gt;</operator><name>bucket_fill</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_pixel_on_stack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>pix</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>i</name> <operator>!=</operator> <name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOSIGNED</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((val) &gt;&gt; 1) ^ -((val) &amp; 1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>epic_decode_component_pred</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>W</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>NW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>delta</name> <init>= <expr><call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>mid_pred</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name> <operator>+</operator> <name>W</name> <operator>-</operator> <name>NW</name></expr></argument>, <argument><expr><name>W</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>TOSIGNED</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>epic_decode_pixel_pred</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>curr_row</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>above_row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>W</name></decl>, <decl><type ref="prev"/><name>NW</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>GN</name></decl>, <decl><type ref="prev"/><name>GW</name></decl>, <decl><type ref="prev"/><name>GNW</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>W</name> <operator>=</operator> <name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>N</name> <operator>=</operator> <name><name>above_row</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>NW</name> <operator>=</operator> <name><name>above_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>GN</name> <operator>=</operator> <operator>(</operator><name>N</name> <operator>&gt;&gt;</operator> <name>G_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GW</name> <operator>=</operator> <operator>(</operator><name>W</name> <operator>&gt;&gt;</operator> <name>G_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>GNW</name> <operator>=</operator> <operator>(</operator><name>NW</name> <operator>&gt;&gt;</operator> <name>G_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>epic_decode_component_pred</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>GN</name></expr></argument>, <argument><expr><name>GW</name></expr></argument>, <argument><expr><name>GNW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>G</name> <operator>+</operator> <call><name>epic_decode_component_pred</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>N</name> <operator>&gt;&gt;</operator> <name>R_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <name>GN</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>W</name> <operator>&gt;&gt;</operator> <name>R_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <name>GW</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>NW</name> <operator>&gt;&gt;</operator> <name>R_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <name>GNW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>G</name> <operator>+</operator> <call><name>epic_decode_component_pred</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>N</name> <operator>&gt;&gt;</operator> <name>B_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <name>GN</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>W</name> <operator>&gt;&gt;</operator> <name>B_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <name>GW</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>NW</name> <operator>&gt;&gt;</operator> <name>B_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <name>GNW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>above_row</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pred</name> <operator>&gt;&gt;</operator> <name>R_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <call><name>TOSIGNED</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pred</name> <operator>&gt;&gt;</operator> <name>G_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <call><name>TOSIGNED</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pred</name> <operator>&gt;&gt;</operator> <name>B_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <call><name>TOSIGNED</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>R</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>G</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>B</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>R</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal> <operator>||</operator> <name>G</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal> <operator>||</operator> <name>B</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"RGB %d %d %d is out of range\n"</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>R</name> <operator>&lt;&lt;</operator> <name>R_shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>G</name> <operator>&lt;&lt;</operator> <name>G_shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>B</name> <operator>&lt;&lt;</operator> <name>B_shift</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_predict_pixel</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rung</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPix</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><name>rung</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pPix</name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name><operator>++</operator> <operator>&amp;</operator> <name>EPIC_PIX_STACK_MAX</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_handle_edges</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>curr_row</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>above_row</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>y</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>pPix</name> <operator>=</operator> <operator>(</operator><call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>R_shift</name><operator>)</operator> <operator>|</operator>

<operator>(</operator><call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>G_shift</name><operator>)</operator> <operator>|</operator>

<operator>(</operator><call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>B_shift</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>epic_predict_pixel</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>W_flag_rung</name></name></expr></argument>, <argument><expr><name>pPix</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>above_row</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name> <operator>||</operator> <name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>pix</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>epic_predict_pixel</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>N_flag_rung</name></name></expr></argument>, <argument><expr><name>pPix</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_decode_run_length</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_width</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>curr_row</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>above_row</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>above2_row</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRun</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>got_pixel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>WWneW</name></decl>, <decl><type ref="prev"/><name>old_WWneW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>W</name></decl>, <decl><type ref="prev"/><name>WW</name></decl>, <decl><type ref="prev"/><name>N</name></decl>, <decl><type ref="prev"/><name>NN</name></decl>, <decl><type ref="prev"/><name>NW</name></decl>, <decl><type ref="prev"/><name>NE</name></decl>, <decl><type ref="prev"/><name>NWW</name></decl>, <decl><type ref="prev"/><name>NNW</name></decl>, <decl><type ref="prev"/><name>NNE</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pRun</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_NEIGHBOURS</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>next_run_pos</name></name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>WWneW</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>WW</name> <operator>!=</operator> <name>W</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>|</operator>

<operator>(</operator><name>NW</name> <operator>!=</operator> <name>W</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<operator>(</operator><name>N</name> <operator>!=</operator> <name>NE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<operator>(</operator><name>NW</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator>

<operator>(</operator><name>NWW</name> <operator>!=</operator> <name>NW</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>

<operator>(</operator><name>NNE</name> <operator>!=</operator> <name>NE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator>

<operator>(</operator><name>NN</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator>

<operator>(</operator><name>NNW</name> <operator>!=</operator> <name>NW</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>WWneW</name> <operator>=</operator> <call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>W_ctx_rung</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>WWneW</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WWneW</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>WWneW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name><operator>++</operator> <operator>&amp;</operator> <name>EPIC_PIX_STACK_MAX</name></expr>]</index></name> <operator>=</operator> <name>W</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pPix</name> <operator>=</operator> <name>W</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_pixel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>NWneW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>got_pixel</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>NWneW</name> <operator>=</operator> <operator>*</operator><name>pPix</name> <operator>!=</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name>NWneW</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>pRun</name></expr> ?</condition><then> <expr><name>NWneW</name></expr> </then><else>: <expr><name>NW</name> <operator>!=</operator> <name>W</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>NW</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>NWneW</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>WWneW</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break> 

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_pixel_on_stack</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>WWneW</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><operator>*</operator><name>pRun</name></expr> ?</condition><then> <expr><name>old_WWneW</name></expr> </then><else>: <expr><name>WW</name> <operator>!=</operator> <name>W</name></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>|</operator>

<name>NWneW</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<operator>(</operator><name>N</name> <operator>!=</operator> <name>NE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<operator>(</operator><name>NW</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator>

<operator>(</operator><name>NWW</name> <operator>!=</operator> <name>NW</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>

<operator>(</operator><name>NNE</name> <operator>!=</operator> <name>NE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator>

<operator>(</operator><name>NN</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator>

<operator>(</operator><name>NNW</name> <operator>!=</operator> <name>NW</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>N_ctx_rung</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NWneW</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pPix</name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_pixel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><name>NWneW</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old_WWneW</name> <operator>=</operator> <name>WWneW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_pixel_on_stack</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name><operator>++</operator> <operator>&amp;</operator> <name>EPIC_PIX_STACK_MAX</name></expr>]</index></name> <operator>=</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRun</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <operator>*</operator><name>pRun</name> <operator>&gt;=</operator> <name>tile_width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UPDATE_NEIGHBOURS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <operator>*</operator><name>pRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NWneW</name> <operator>&amp;&amp;</operator> <name>NW</name> <operator>==</operator> <name>N</name> <operator>&amp;&amp;</operator> <name>N</name> <operator>==</operator> <name>NE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>rle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_pos</name> <init>= <expr><name>x</name> <operator>+</operator> <operator>*</operator><name>pRun</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>= <expr><name><name>above_row</name><index>[<expr><name>start_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name>start_pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>tile_width</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>above_row</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <name>pix</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>run</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>start_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>av_ceil_log2</name><argument_list>(<argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>prev_row_rung</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pRun</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>rle</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pos</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator> <operator>+</operator> <name>rle</name> <operator>&lt;</operator> <name>run</name> <operator>&amp;&amp;</operator>

<call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>runlen_one</name></name></expr>

</then><else>: <expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>runlen_zeroes</name><index>[<expr><name>pos</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pRun</name> <operator>+=</operator> <name>rle</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <operator>*</operator><name>pRun</name> <operator>&gt;=</operator> <name>tile_width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOAD_NEIGHBOURS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <operator>*</operator><name>pRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WWneW</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>NWneW</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>WWneW</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>|</operator>

<name>NWneW</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<operator>(</operator><name>N</name> <operator>!=</operator> <name>NE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<operator>(</operator><name>NW</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator>

<operator>(</operator><name>NWW</name> <operator>!=</operator> <name>NW</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>

<operator>(</operator><name>NNE</name> <operator>!=</operator> <name>NE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator>

<operator>(</operator><name>NN</name> <operator>!=</operator> <name>N</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator>

<operator>(</operator><name>NNW</name> <operator>!=</operator> <name>NW</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>WWneW</name> <operator>=</operator> <call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>W_ctx_rung</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>WWneW</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>next_run_pos</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>*</operator><name>pRun</name></expr>;</expr_stmt>

<return>return <expr><name>got_pixel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_predict_pixel2</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rung</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPix</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><name>rung</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pPix</name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name><operator>++</operator> <operator>&amp;</operator> <name>EPIC_PIX_STACK_MAX</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_predict_from_NW_NE</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tile_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>curr_row</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>above_row</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>NW</name> <init>= <expr><name><name>above_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NW</name> <operator>!=</operator> <name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>NW</name> <operator>!=</operator> <name><name>above_row</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_pixel_on_stack</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>NW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>epic_predict_pixel2</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>nw_pred_rung</name><index>[<expr><name>NW</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pPix</name></expr></argument>, <argument><expr><name>NW</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>run</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>tile_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>NE</name> <init>= <expr><name><name>above_row</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NE</name> <operator>!=</operator> <name><name>above_row</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_pixel_on_stack</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>epic_predict_pixel2</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>ne_pred_rung</name><index>[<expr><name>NE</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pPix</name></expr></argument>, <argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_decode_from_cache</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>W</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ePICPixListElem</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ePICPixHashElem</name> <modifier>*</modifier></type><name>hash_elem</name> <init>= <expr><call><name>epic_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>W</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_elem</name> <operator>||</operator> <operator>!</operator><name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_pixel_on_stack</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>pixel</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_els_decode_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>rung</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pPix</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>pixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hash_elem</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name><operator>++</operator> <operator>&amp;</operator> <name>EPIC_PIX_STACK_MAX</name></expr>]</index></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>pixel</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_decode_tile</name><parameter_list>(<parameter><decl><type><name>ePICContext</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tile_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>curr_row</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>above_row</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>above2_row</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>tile_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>out</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>above2_row</name> <operator>=</operator> <name>above_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>above_row</name> <operator>=</operator> <name>curr_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_row</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>dc</name><operator>-&gt;</operator><name>next_run_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>tile_width</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>els_ctx</name><operator>.</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name>pix</name> <operator>!=</operator> <name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pix</name> <operator>!=</operator> <name><name>above_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name>pix</name> <operator>!=</operator> <name><name>above_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pix</name> <operator>!=</operator> <name><name>above_row</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>epic_cache_entries_for_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curr_row</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>epic_decode_pixel_pred</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>curr_row</name></expr></argument>, <argument><expr><name>above_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>got_pixel</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stack_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <name>tile_width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>got_pixel</name> <operator>=</operator> <call><name>epic_handle_edges</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>curr_row</name></expr></argument>, <argument><expr><name>above_row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>got_pixel</name> <operator>=</operator> <call><name>epic_decode_run_length</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>,

<argument><expr><name>curr_row</name></expr></argument>, <argument><expr><name>above_row</name></expr></argument>,

<argument><expr><name>above2_row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_pixel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>got_pixel</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_pixel</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>epic_predict_from_NW_NE</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>run</name></expr></argument>,

<argument><expr><name>tile_width</name></expr></argument>, <argument><expr><name>curr_row</name></expr></argument>,

<argument><expr><name>above_row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref_pix</name> <init>= <expr><name><name>curr_row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name> <operator>||</operator> <operator>!</operator><call><name>epic_decode_from_cache</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>ref_pix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>epic_decode_pixel_pred</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>curr_row</name></expr></argument>, <argument><expr><name>above_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_pixel_on_stack</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>epic_add_pixel_to_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>,

<argument><expr><name>ref_pix</name></expr></argument>,

<argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>run</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curr_row</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epic_jb_decode_tile</name><parameter_list>(<parameter><decl><type><name>G2MContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_y</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extrabytes</name></decl>, <decl><type ref="prev"/><name>tile_width</name></decl>, <decl><type ref="prev"/><name>tile_height</name></decl>, <decl><type ref="prev"/><name>awidth</name></decl>, <decl><type ref="prev"/><name>aheight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>els_dsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_size</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>extrabytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>prefix</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>extrabytes</name> <operator>&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</condition> <incr><expr><name>extrabytes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>extrabytes</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>src_size</name> <operator>&lt;</operator> <name>extrabytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ePIC: invalid data size VLI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>els_dsize</name> <operator>=</operator> <name>prefix</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <name>extrabytes</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>extrabytes</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>els_dsize</name> <operator>=</operator> <operator>(</operator><name>els_dsize</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>src_size</name> <operator>&lt;</operator> <name>els_dsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ePIC: data too short, needed %"</literal><name>SIZE_SPECIFIER</name><literal type="string">", got %"</literal><name>SIZE_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>els_dsize</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tile_width</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>tile_x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tile_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>tile_y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>awidth</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>tile_width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aheight</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>tile_height</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>els_dsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tr_r</name></decl>, <decl><type ref="prev"/><name>tr_g</name></decl>, <decl><type ref="prev"/><name>tr_b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_els_decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>els_dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>epic_hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tr_r</name> <operator>=</operator> <call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tr_g</name> <operator>=</operator> <call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tr_b</name> <operator>=</operator> <call><name>ff_els_decode_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>els_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>els_ctx</name><operator>.</operator><name>err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"ePIC: couldn't decode transparency pixel!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_els_decoder_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>epic_decode_tile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>epic_free_pixel_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_els_decoder_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ec</name><operator>.</operator><name>unsigned_rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"ePIC: tile decoding failed, frame=%d, tile_x=%d, tile_y=%d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>, <argument><expr><name>tile_x</name></expr></argument>, <argument><expr><name>tile_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>+</operator> <name>tile_x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator>

<name>tile_y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tile_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>R_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>G_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>B_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>epic_buf_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>src_size</name> <operator>&gt;</operator> <name>els_dsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>jpg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bstride</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>tile_width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nblocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>estride</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf_stride</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>els_dsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_size</name> <operator>-=</operator> <name>els_dsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tr</name> <operator>=</operator> <operator>(</operator><name>tr_r</name> <operator>&lt;&lt;</operator> <name>R_shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tr_g</name> <operator>&lt;&lt;</operator> <name>G_shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tr_b</name> <operator>&lt;&lt;</operator> <name>B_shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>aheight</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>bstride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tile_height</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_width</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>bstride</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>estride</name></expr>]</index></name> <operator>==</operator> <name>tr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>bstride</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nblocks</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>estride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name> <operator>*</operator> <name>aheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jpg_decode_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>, <argument><expr><name>awidth</name></expr></argument>, <argument><expr><name>aheight</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr></argument>, <argument><expr><name>bstride</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>swapuv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>+</operator> <name>tile_x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator>

<name>tile_y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>jpg</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tile_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>tr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>jpg</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>epic_buf_stride</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>jpg</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>+</operator> <name>tile_x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator>

<name>tile_y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>jpg_decode_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>swapuv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kempf_restore_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>jpeg_tile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tidx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>align_width</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>npal</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>npal</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>npal</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr><operator>,</operator> <expr><name>jpeg_tile</name> <operator>+=</operator> <name>tile_stride</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <name>tidx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>pal</name> <operator>+</operator> <name>col</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>jpeg_tile</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>nb</name> <operator>*</operator> <operator>(</operator><name>align_width</name> <operator>-</operator> <name>width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kempf_decode_tile</name><parameter_list>(<parameter><decl><type><name>G2MContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_y</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hdr</name></decl>, <decl><type ref="prev"/><name>zsize</name></decl>, <decl><type ref="prev"/><name>npal</name></decl>, <decl><type ref="prev"/><name>tidx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">768</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>transp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uLongf</name></type> <name>dlen</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nblocks</name></decl>, <decl><type ref="prev"/><name>cblocks</name></decl>, <decl><type ref="prev"/><name>bstride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>bitbuf</name></decl>, <decl><type ref="prev"/><name>coded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>+</operator> <name>tile_x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator>

<name>tile_y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>tile_x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>tile_y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_type</name> <operator>=</operator> <name>hdr</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>transp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>transp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sub_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>jpg_decode_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_end</name> <operator>-</operator> <name>src</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_type</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>transp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>npal</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_end</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <name>npal</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pal</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>npal</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>npal</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_type</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>pal</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>transp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src_end</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zsize</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_end</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <name>zsize</name> <operator>+</operator> <operator>(</operator><name>sub_type</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uncompress</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>zsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kempf_restore_buf</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>npal</name></expr></argument>, <argument><expr><name>tidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cblocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bstride</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&gt;=</operator> <name>src_end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitbuf</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <name>bitbuf</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbuf</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cblocks</name> <operator>+=</operator> <name>coded</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cblocks</name> <operator>&gt;</operator> <name>nblocks</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>bstride</name></expr>]</index></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>bstride</name></expr>]</index></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>bstride</name></expr>]</index></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>bstride</name></expr>]</index></name> <operator>=</operator> <name>coded</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jpg_decode_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_end</name> <operator>-</operator> <name>src</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr></argument>, <argument><expr><name>bstride</name></expr></argument>, <argument><expr><name>nblocks</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kempf_restore_buf</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>npal</name></expr></argument>, <argument><expr><name>tidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g2m_init_buffers</name><parameter_list>(<parameter><decl><type><name>G2MContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>aligned_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>old_width</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>old_height</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aligned_height</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></argument>, <argument><expr><name>aligned_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>synth_tile</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name> <operator>||</operator>

<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>epic_buf_base</name></name><operator>)</operator> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>old_tile_w</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>old_tile_h</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf_stride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aligned_height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>synth_tile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>epic_buf_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>synth_tile</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name> <operator>*</operator> <name>aligned_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_stride</name></name> <operator>*</operator> <name>aligned_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>aligned_height</name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <name>aligned_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>synth_tile</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name> <operator>||</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf_stride</name></name> <operator>*</operator> <name>aligned_height</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>epic_buf_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>epic_buf_base</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g2m_load_cursor</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>G2MContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_size</name></decl>, <decl><type ref="prev"/><name>cursor_w</name></decl>, <decl><type ref="prev"/><name>cursor_h</name></decl>, <decl><type ref="prev"/><name>cursor_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cursor_hot_x</name></decl>, <decl><type ref="prev"/><name>cursor_hot_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_fmt</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_size</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_w</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_h</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_hot_x</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_hot_y</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_fmt</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_stride</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>cursor_w</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cursor_fmt</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cursor_w</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>cursor_w</name></expr></argument> &gt;</argument_list></name> <literal type="number">256</literal> <operator>||</operator>

<name><name>cursor_h</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>cursor_h</name></expr></argument> &gt;</argument_list></name> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid cursor dimensions %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>cursor_w</name></expr></argument>, <argument><expr><name>cursor_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_hot_x</name> <operator>&gt;</operator> <name>cursor_w</name> <operator>||</operator> <name>cursor_hot_y</name> <operator>&gt;</operator> <name>cursor_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid hotspot position %"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>cursor_hot_x</name></expr></argument>, <argument><expr><name>cursor_hot_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_hot_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cursor_hot_x</name></expr></argument>, <argument><expr><name>cursor_w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_hot_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cursor_hot_y</name></expr></argument>, <argument><expr><name>cursor_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_size</name> <operator>-</operator> <literal type="number">9</literal> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>cur_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid cursor data size %"</literal><name>PRIu32</name><literal type="string">"/%u\n"</literal></expr></argument>,

<argument><expr><name>cur_size</name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_fmt</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cursor_fmt</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Cursor format %d"</literal></expr></argument>,

<argument><expr><name>cursor_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name>cursor_stride</name> <operator>*</operator> <name>cursor_h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate cursor buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name> <operator>=</operator> <name>cursor_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name> <operator>=</operator> <name>cursor_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_hot_x</name></name> <operator>=</operator> <name>cursor_hot_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_hot_y</name></name> <operator>=</operator> <name>cursor_hot_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_fmt</name></name> <operator>=</operator> <name>cursor_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_stride</name></name> <operator>=</operator> <name>cursor_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cursor_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask_bit</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>mask_bit</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> 

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name> <operator>*</operator> <operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_ALPHA</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>new</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>src = (src * (256 - alpha) + new * alpha) &gt;&gt; 8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>g2m_paint_cursor</name><parameter_list>(<parameter><decl><type><name>G2MContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_x</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_hot_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_y</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_hot_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>h</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <operator>-</operator><name>x</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <operator>-</operator><name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha</name> <init>= <expr><name><name>cursor</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APPLY_ALPHA</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cursor</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPLY_ALPHA</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cursor</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPLY_ALPHA</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cursor</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>cursor_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g2m_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>G2MContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>bc</name></decl>, <decl><type ref="prev"/><name>tbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_size</name></decl>, <decl><type ref="prev"/><name>r_mask</name></decl>, <decl><type ref="prev"/><name>g_mask</name></decl>, <decl><type ref="prev"/><name>b_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_type</name></decl>, <decl><type ref="prev"/><name>chunk_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Frame should have at least 12 bytes, got %d instead\n"</literal></expr></argument>,

<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>magic</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>magic</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xF</literal><operator>)</operator> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>magic</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>magic</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Wrong magic %08X\n"</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swapuv</name></name> <operator>=</operator> <name>magic</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_start</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chunk size %"</literal><name>PRIu32</name><literal type="string">" type %02X\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DISPLAY_INFO</name></expr>:</case>

<expr_stmt><expr><name>got_header</name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>got_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid display info size %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid frame dimensions %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>header_fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Compression method %d"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>|</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>av_image_check_size2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid tile dimensions %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tiles_x</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tiles_y</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator>

<operator>(</operator><name>chunk_size</name> <operator>-</operator> <literal type="number">21</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Display info: missing bitmasks!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r_mask</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_mask</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_mask</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r_mask</name> <operator>!=</operator> <literal type="number">0xFF0000</literal> <operator>||</operator> <name>g_mask</name> <operator>!=</operator> <literal type="number">0xFF00</literal> <operator>||</operator> <name>b_mask</name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"Bitmasks: R=%"</literal><name>PRIX32</name><literal type="string">", G=%"</literal><name>PRIX32</name><literal type="string">", B=%"</literal><name>PRIX32</name></expr></argument>,

<argument><expr><name>r_mask</name></expr></argument>, <argument><expr><name>g_mask</name></expr></argument>, <argument><expr><name>b_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"bpp=%d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>g2m_init_buffers</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>header_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TILE_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>tiles_x</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>tiles_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"No display info - skipping tile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile data size %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tile_x</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tile_y</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tile_x</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>tiles_x</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>tile_y</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>tiles_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid tile pos %d,%d (in %dx%d grid)\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tiles_x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tiles_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COMPR_EPIC_J_B</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>epic_jb_decode_tile</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_y</name></name></expr></argument>,

<argument><expr><name>buf</name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COMPR_KEMPF_J_B</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kempf_decode_tile</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_y</name></name></expr></argument>,

<argument><expr><name>buf</name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding tile %d,%d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tile_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURSOR_POS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid cursor pos size %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_x</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cursor_y</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURSOR_SHAPE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid cursor data size %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g2m_load_cursor</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_CC</name></expr>:</case>

<case>case <expr><name>CHUNK_CD</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Skipping chunk type %02d\n"</literal></expr></argument>,

<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>chunk_start</name> <operator>+</operator> <name>chunk_size</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>got_header</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>got_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name>got_header</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name>got_header</name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>framebuf_stride</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>g2m_paint_cursor</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_picture_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

<label><name>header_fail</name>:</label>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tiles_x</name></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>tiles_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g2m_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G2MContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpg_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot initialise VLCs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jpg_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>orig_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>orig_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g2m_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G2MContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jpg_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>epic_buf_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>epic_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>kempf_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>synth_tile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>jpeg_tile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>framebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_g2m_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g2m"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Go2Meeting"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_G2M</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G2MContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g2m_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>g2m_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>g2m_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
