<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qsvenc_hevc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2645_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsvenc.h"</cpp:file></cpp:include>

<enum>enum <name>LoadPlugin</name> <block>{

<decl><name>LOAD_PLUGIN_NONE</name></decl>,

<decl><name>LOAD_PLUGIN_HEVC_SW</name></decl>,

<decl><name>LOAD_PLUGIN_HEVC_HW</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>QSVHEVCEncContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVEncContext</name></type> <name>qsv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>load_plugin</name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVHEVCEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_fake_vps</name><parameter_list>(<parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H2645RBSP</name></type> <name>sps_rbsp</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H2645NAL</name></type> <name>sps_nal</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCSPS</name></type> <name>sps</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCVPS</name></type> <name>vps</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vps_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vps_rbsp_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_extradata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sps_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>vps_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No extradata returned from libmfx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps_rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sps_rbsp</name><operator>.</operator><name>rbsp_buffer_alloc_size</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps_rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h2645_extract_rbsp</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps_rbsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps_nal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error unescaping the SPS buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sps_nal</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sps_nal</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps_rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>HEVC_NAL_SPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected NAL type in the extradata: %d\n"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps_rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hevc_parse_sps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps_rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing the SPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_max_layers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_max_sub_layers</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>max_sub_layers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_temporal_id_nesting_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>temporal_id_nesting_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vps</name><operator>.</operator><name>ptl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sps</name><operator>.</operator><name>ptl</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vps</name><operator>.</operator><name>ptl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_sub_layer_ordering_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HEVC_MAX_SUB_LAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_max_dec_pic_buffering</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_max_latency_increase</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_latency_increase</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_num_layer_sets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_timing_info_present_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>vui</name><operator>.</operator><name>vui_timing_info_present_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_num_units_in_tick</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>vui</name><operator>.</operator><name>vui_num_units_in_tick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_time_scale</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>vui</name><operator>.</operator><name>vui_time_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>vui</name><operator>.</operator><name>vui_poc_proportional_to_timing_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_num_ticks_poc_diff_one</name></name> <operator>=</operator> <name><name>sps</name><operator>.</operator><name>vui</name><operator>.</operator><name>vui_num_ticks_poc_diff_one_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>.</operator><name>vps_num_hrd_parameters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hevc_encode_nal_vps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vps</name></expr></argument>, <argument><expr><name><name>sps</name><operator>.</operator><name>vps_id</name></name></expr></argument>, <argument><expr><name>vps_rbsp_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vps_rbsp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error writing the VPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>vps_rbsp_buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>vps_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vps_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>HEVC_NAL_VPS</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>bytestream2_peek_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>vps_size</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_extradata</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>vps_size</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_extradata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_extradata</name></expr></argument>, <argument><expr><name>vps_buf</name></expr></argument>, <argument><expr><name>vps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_extradata</name> <operator>+</operator> <name>vps_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>new_extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+=</operator> <name>vps_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qsv_enc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVHEVCEncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>load_plugin</name></name> <operator>!=</operator> <name>LOAD_PLUGIN_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>uid_hevcenc_sw</name> <init>= <expr><literal type="string">"2fca99749fdb49aeb121a5b63ef568f7"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>uid_hevcenc_hw</name> <init>= <expr><literal type="string">"6fadc791a0c2eb479ab6dcd5ea9da347"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>load_plugins</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"load_plugins is not empty, but load_plugin is not set to 'none'."</literal>

<literal type="string">"The load_plugin value will be ignored.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>load_plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>load_plugin</name></name> <operator>==</operator> <name>LOAD_PLUGIN_HEVC_SW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>load_plugins</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>uid_hevcenc_sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>load_plugins</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>uid_hevcenc_hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>load_plugins</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>idr_interval</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_enc_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>hevc_vps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>generate_fake_vps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_qsv_enc_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_enc_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVHEVCEncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_qsv_encode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_packet</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qsv_enc_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVHEVCEncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_qsv_enc_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(QSVHEVCEncContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>QSV_COMMON_OPTS</name>

<block>{ <expr><literal type="string">"idr_interval"</literal></expr>, <expr><literal type="string">"Distance (in I-frames) between IDR frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>idr_interval</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"idr_interval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"begin_only"</literal></expr>, <expr><literal type="string">"Output an IDR-frame only at the beginning of the stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"idr_interval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"load_plugin"</literal></expr>, <expr><literal type="string">"A user plugin to load in an internal session"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>load_plugin</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LOAD_PLUGIN_HEVC_HW</name></expr> }</block></expr>, <expr><name>LOAD_PLUGIN_NONE</name></expr>, <expr><name>LOAD_PLUGIN_HEVC_HW</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"load_plugin"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LOAD_PLUGIN_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"load_plugin"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hevc_sw"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LOAD_PLUGIN_HEVC_SW</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"load_plugin"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hevc_hw"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LOAD_PLUGIN_HEVC_HW</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"load_plugin"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"load_plugins"</literal></expr>, <expr><literal type="string">"A :-separate list of hexadecimal plugin UIDs to load in an internal session"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>load_plugins</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">""</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"unknown"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_HEVC_MAIN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main10"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_HEVC_MAIN10</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mainsp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_HEVC_MAINSP</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gpb"</literal></expr>, <expr><literal type="string">"1: GPB (generalized P/B frame); 0: regular P frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>gpb</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"tile_cols"</literal></expr>, <expr><literal type="string">"Number of columns for tiled encoding"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>tile_cols</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tile_rows"</literal></expr>, <expr><literal type="string">"Number of rows for tiled encoding"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>tile_rows</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"hevc_qsv encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>qsv_enc_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"1M"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"refs"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"248"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"trellis"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"+cgop"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"b_strategy"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hevc_qsv_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_qsv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"HEVC (Intel Quick Sync Video acceleration)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QSVHEVCEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qsv_enc_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>qsv_enc_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>qsv_enc_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HYBRID</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_P010</name></expr>,

<expr><name>AV_PIX_FMT_QSV</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>qsv_enc_defaults</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"qsv"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
