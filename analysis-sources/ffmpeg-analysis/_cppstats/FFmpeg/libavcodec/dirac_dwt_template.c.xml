<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dirac_dwt_template.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_8bit</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_8bit</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_8bit</name></cpp:undef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_10bit</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_10bit</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_10bit</name></cpp:undef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_12bit</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_12bit</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_12bit</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose53iL0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>RENAME</name></type>(<name>interleave</name>)<parameter_list>(<parameter><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>add</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>add</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_dirac53i</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_temp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_53iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>COMPOSE_53iL0</name> <argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DIRAC53iH0</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DIRAC53iH0</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>interleave</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name><operator>+</operator><name>w2</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_dd97i</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_tmp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_53iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_53iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>w2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>w2</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>COMPOSE_DD97iH0</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_dd137i</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_tmp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DD137iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DD137iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DD137iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DD137iL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>w2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>w2</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>COMPOSE_DD97iH0</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_haari</name>)<parameter_list>(<parameter><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>COMPOSE_HAARiL0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_HAARiH0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>interleave</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name><operator>+</operator><name>w2</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_haar0i</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_temp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_haari</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_haar1i</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_temp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_haari</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_fidelityi</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name></type> <name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_tmp</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_FIDELITYiH0</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">4</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_FIDELITYiL0</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>interleave</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name><operator>+</operator><name>w2</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>horizontal_compose_daub97i</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_temp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iL1</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iL1</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iH1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iH1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>b2</name> <operator>=</operator> <call><name>COMPOSE_DAUB97iL0</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>COMPOSE_DAUB97iL0</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>COMPOSE_DAUB97iH0</name><argument_list>( <argument><expr><name>b0</name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr> ]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><call><name>COMPOSE_DAUB97iH0</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_dirac53iH0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DIRAC53iH0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_dd97iH0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b3</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b4</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DD97iH0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_dd137iL0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b3</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b4</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DD137iL0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_haar</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_HAARiL0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_HAARiH0</name><argument_list>(<argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_fidelityiH0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b5</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b6</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b7</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_FIDELITYiH0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b5</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b6</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b7</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_fidelityiL0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b5</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b6</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b7</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>_b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_FIDELITYiL0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b5</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b6</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b7</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_daub97iH0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iH0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_daub97iH1</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iH1</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_daub97iL0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iL0</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertical_compose_daub97iL1</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPE</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name>_b2</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>COMPOSE_DAUB97iL1</name><argument_list>(<argument><expr><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_dd97i_dy</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_l0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_5tap</name></type> <name>vertical_compose_h0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name> <operator>+</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">5</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_l0</name><argument_list>( <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_h0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>-</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">0</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_dirac53i_dy</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_l0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_h0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name> <operator>+</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_l0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">0</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_h0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>-</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">0</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_dd137i_dy</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vertical_compose_5tap</name></type> <name>vertical_compose_l0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_5tap</name></type> <name>vertical_compose_h0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name> <operator>+</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">5</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_l0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_h0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>-</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">0</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_haari_dy</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vertical_compose_2tap</name></type> <name>vertical_compose</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>)</operator><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vertical_compose</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_fidelity</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vertical_compose_9tap</name></type> <name>vertical_compose_l0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_9tap</name></type> <name>vertical_compose_h0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vertical_compose_h0</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vertical_compose_l0</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>height</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_daub97i_dy</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_l0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_h0</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_l1</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vertical_compose_3tap</name></type> <name>vertical_compose_h1</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name> <operator>+</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">3</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_l1</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">2</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_h1</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_l0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">0</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vertical_compose_h0</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>-</operator><literal type="number">1</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><literal type="number">0</literal><operator>&lt;</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose97i_init</name>)<parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> , <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose53i_init</name>)<parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_dd97i_init</name>)<parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>spatial_compose_dd137i_init</name>)<parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>RENAME</name></type>(<name>ff_spatial_idwt_init</name>)<parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dwt_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>TYPE</name> <operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>temp</name></name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>decomposition_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride_l</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>stride</name></name> <operator>&lt;&lt;</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>DWT_DIRAC_DD9_7</name></expr>:</case>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_dd97i_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name><operator>+</operator><name>level</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>hl</name></expr></argument>, <argument><expr><name>stride_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_LEGALL5_3</name></expr>:</case>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose53i_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name><operator>+</operator><name>level</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>hl</name></expr></argument>, <argument><expr><name>stride_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_DD13_7</name></expr>:</case>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_dd137i_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name><operator>+</operator><name>level</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>hl</name></expr></argument>, <argument><expr><name>stride_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_HAAR0</name></expr>:</case>

<case>case <expr><name>DWT_DIRAC_HAAR1</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_DAUB9_7</name></expr>:</case>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose97i_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name></name><operator>+</operator><name>level</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>hl</name></expr></argument>, <argument><expr><name>stride_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DWT_DIRAC_DD9_7</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_dd97i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose53iL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_dd97iH0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_dd97i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_LEGALL5_3</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_dirac53i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose53iL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_dirac53iH0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_dirac53i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_DD13_7</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_dd137i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_dd137iL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_dd97iH0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_dd137i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_HAAR0</name></expr>:</case>

<case>case <expr><name>DWT_DIRAC_HAAR1</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_haari_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_haar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>DWT_DIRAC_HAAR0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_haar0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_haar1i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_FIDELITY</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_fidelity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_fidelityiL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_fidelityiH0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_fidelityi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>DWT_DIRAC_DAUB9_7</name></expr>:</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>spatial_compose_daub97i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_daub97iL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_daub97iH0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l1</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_daub97iL1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h1</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>vertical_compose_daub97iH1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>horizontal_compose_daub97i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE</name></cpp:undef>

</unit>
