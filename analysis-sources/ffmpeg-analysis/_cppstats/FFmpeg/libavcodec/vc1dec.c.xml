<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vc1dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg_er.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3IMAGE_DECODER</name> <operator>||</operator> <name>CONFIG_VC1IMAGE_DECODER</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>SpriteData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>coefs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>effect_type</name></decl>, <name>effect_flag</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>effect_pcount1</name></decl>, <name>effect_pcount2</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>effect_params1</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>, <name><name>effect_params2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name>;</decl_stmt> 

}</block></struct></type> <name>SpriteData</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_fp_val</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_sprite_parse_transform</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_parse_sprites</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>SpriteData</name><modifier>*</modifier></type> <name>sd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sprite</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sprite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sprite</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name></expr>;</condition> <incr><expr><name>sprite</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vc1_sprite_parse_transform</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>sprite</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Non-zero rotation coefficients"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><ternary><condition><expr><name>sprite</name></expr> ?</condition><then> <expr><literal type="string">"S2:"</literal></expr> </then><else>: <expr><literal type="string">"S1:"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %d.%.3d"</literal></expr></argument>,

<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>effect_type</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>effect_pcount1</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><call><name>vc1_sprite_parse_transform</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<expr_stmt><expr><call><name>vc1_sprite_parse_transform</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc1_sprite_parse_transform</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name></name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sd</name><operator>-&gt;</operator><name>effect_pcount1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>effect_type</name></name> <operator>!=</operator> <literal type="number">13</literal> <operator>||</operator> <name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Effect: %d; params: "</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sd</name><operator>-&gt;</operator><name>effect_pcount1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %d.%.2d"</literal></expr></argument>,

<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_pcount2</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>effect_pcount2</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many effect parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>effect_pcount2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Effect params 2: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name><name>sd</name><operator>-&gt;</operator><name>effect_pcount2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_fp_val</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %d.%.2d"</literal></expr></argument>,

<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>effect_params2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>effect_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Effect flag set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>gb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>gb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>-</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Buffer not fully read\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_draw_sprites</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>SpriteData</name><modifier>*</modifier></type> <name>sd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>row</name></decl>, <decl><type ref="prev"/><name>sprite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sr_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>src_h</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>xoff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>xadv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>yoff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>yadv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ysub</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xoff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xadv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xadv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>output_width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name><name>xoff</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xadv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>xadv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name><name>xoff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>v</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>yoff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yadv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name><name>yoff</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>v</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>output_width</name></name><operator>&gt;&gt;</operator><operator>!</operator><operator>!</operator><name>plane</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>row</name> <argument_list type="generic">&lt; <argument><expr><name><name>v</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>&gt;</argument_list></name><operator>&gt;</operator><operator>!</operator><operator>!</operator><name>plane</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator>

<name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>row</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sprite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sprite</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name></expr>;</condition> <incr><expr><name>sprite</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iplane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iline</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ycoord</name> <init>= <expr><name><name>yoff</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>+</operator> <name><name>yadv</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>*</operator> <name>row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yline</name> <init>= <expr><name>ycoord</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ysub</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>=</operator> <name>ycoord</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sprite</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iplane</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iline</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_line</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>yline</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>plane</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>iline</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xoff</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>xadv</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>src_h</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>iplane</name> <operator>+</operator> <operator>(</operator><name><name>xoff</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>yline</name> <operator>*</operator> <name>iline</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ysub</name><index>[<expr><name>sprite</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src_h</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>iplane</name> <operator>+</operator> <operator>(</operator><name><name>xoff</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>next_line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>yline</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>yline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_h</name></name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iplane</name> <operator>+</operator> <name>yline</name> <operator>*</operator> <name>iline</name></expr></argument>, <argument><expr><name><name>xoff</name><index>[<expr><name>sprite</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>xadv</name><index>[<expr><name>sprite</name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>yline</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ysub</name><index>[<expr><name>sprite</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>yline</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_h</name></name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>iplane</name> <operator>+</operator> <name>next_line</name></expr></argument>, <argument><expr><name><name>xoff</name><index>[<expr><name>sprite</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>xadv</name><index>[<expr><name>sprite</name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr_cache</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yline</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src_h</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_h</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>sprite</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ysub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_v_single</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ysub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ysub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ysub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_v_double_twoscale</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ysub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src_h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ysub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ysub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_v_double_onescale</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ysub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src_h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ysub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_v_double_onescale</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ysub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>alpha</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>sprite_v_double_noscale</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plane</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xoff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yoff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_decode_sprites</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpriteData</name></type> <name>sd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vc1_parse_sprites</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Got no sprites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Need two sprites, only got one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vc1_draw_sprites</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_sprite_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name></expr></argument>&gt;</argument_list></name><operator>&gt;</operator><operator>!</operator><operator>!</operator><name>plane</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vc1_decode_init_alloc_tables</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name> <operator>=</operator> <call><name>av_malloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name> <operator>=</operator> <call><name>av_malloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>forward_mb_plane</name></name> <operator>=</operator> <call><name>av_malloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>acpred_plane</name></name> <operator>=</operator> <call><name>av_malloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name></name> <operator>=</operator> <call><name>av_malloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>forward_mb_plane</name></name> <operator>||</operator>

<operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>acpred_plane</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>n_allocated_blks</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>n_allocated_blks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbp_base</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cbp_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>block</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>cbp_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cbp</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>cbp_base</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttblk_base</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ttblk_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ttblk</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ttblk_base</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>is_intra_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>is_intra_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>is_intra</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>is_intra_base</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>luma_mv_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>luma_mv_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>luma_mv_base</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mb_type_base</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>mb_type_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_type_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_type_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>blk_mv_type_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>blk_mv_type_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>blk_mv_type</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>blk_mv_type_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_f_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f_next_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f_next_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f_next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_f_next_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f_next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_f_next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_intrax8_common_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>x8</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ff_vc1_decode_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc1_init_transposed_scantables</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>transpose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 3) | (((x) &amp; 7) &lt;&lt; 3))</cpp:value></cpp:define>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>transpose</name><argument_list>(<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>transpose</name><argument_list>(<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>transpose</name><argument_list>(<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x8</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>transpose</name><argument_list>(<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zzi_8x8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>transpose</name><argument_list>(<argument><expr><name><name>ff_vc1_adv_interlaced_8x8_zz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>left_blk_sh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>top_blk_sh</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vc1_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>output_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>output_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_init_common</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_decode_sequence_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>res_sprite</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Non sprite WMV3IMAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Extra data: %i bits left, value: %X\n"</literal></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Read %i bits in overflow\n"</literal></expr></argument>, <argument><expr><operator>-</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>buf2_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seq_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ep_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata size too small: %i\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>next</name> <operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf2_size</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf2_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VC1_CODE_SEQHDR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_decode_sequence_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seq_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_ENTRYPOINT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_decode_entry_point</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ep_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seq_initialized</name> <operator>||</operator> <operator>!</operator><name>ep_initialized</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incomplete extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>res_sprite</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>ff_get_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_msmpeg4_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_decode_init_alloc_tables</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_vc1_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264chroma_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>h264chroma</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_qpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>color_prim</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>color_prim</name></name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>color_prim</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>color_prim</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>transfer_char</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>transfer_char</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>transfer_char</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>matrix_coef</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>matrix_coef</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>matrix_coef</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>matrix_coef</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>res_fasttx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vc1_init_transposed_scantables</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>zz_8x8</name></name></expr></argument>, <argument><expr><name>ff_wmv1_scantable</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>left_blk_sh</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>top_blk_sh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>||</operator>

<name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>||</operator>

<name><name>v</name><operator>-&gt;</operator><name>output_width</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>||</operator>

<name><name>v</name><operator>-&gt;</operator><name>output_height</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"odd sprites support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vc1_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>sr_rows</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>hrd_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>hrd_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>forward_mb_plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>acpred_plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mb_type_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>blk_mv_type_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f_next_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_intrax8_common_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>x8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>n_slices</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_start</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf_start_second_field</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name></decl>, <decl><type ref="prev"/><name>n_slices1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mby_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rawbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>raw_size</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>slices</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</struct>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>buf_size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VC1_CODE_ENDOFSEQ</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>buf_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_MARKER</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>buf</name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>next</name> <operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VC1_CODE_FRAME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_start</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_size2</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_FIELD</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_start_second_field</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n_slices</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slices</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size3</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>gb</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>,

<argument><expr><name>buf_size3</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>+</operator> <literal type="number">31</literal> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>rawbuf</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>raw_size</name> <operator>=</operator> <name>size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n_slices1</name> <operator>=</operator> <name>n_slices</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>n_slices</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VC1_CODE_ENTRYPOINT</name></expr>:</case> 

<expr_stmt><expr><name>buf_size2</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf_size2</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vc1_decode_entry_point</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_SLICE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n_slices</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slices</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size3</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>gb</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>,

<argument><expr><name>buf_size3</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>rawbuf</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>raw_size</name> <operator>=</operator> <name>size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n_slices</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>divider</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>divider</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>divider</name> <operator>==</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <name>buf_size</name><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>divider</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VC1_CODE_FIELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error in WVC1 interlaced frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_start_second_field</name> <operator>=</operator> <name>divider</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n_slices</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slices</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>buf_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size3</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>divider</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <name>divider</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>gb</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>,

<argument><expr><name>buf_size3</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>rawbuf</name> <operator>=</operator> <name>divider</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slices</name><index>[<expr><name>n_slices</name></expr>]</index></name><operator>.</operator><name>raw_size</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <name>divider</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n_slices1</name> <operator>=</operator> <name>n_slices</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n_slices</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf_size2</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>divider</name> <operator>-</operator> <name>buf</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_size2</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf_size2</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>res_sprite</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>new_sprite</name></name> <operator>=</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>two_sprites</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>new_sprite</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>sprite_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>sprite_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>image</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vc1_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_msmpeg4_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_decode_init_alloc_tables</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>res_sprite</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name><operator>&lt;=</operator><literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>first_pic_header_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>&lt;</operator> <name>PROFILE_ADVANCED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_parse_frame_header</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>first_pic_header_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pict_type: %c\n"</literal></expr></argument>, <argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sprite decoder: expected I-frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sprite decoder: expected Frames not Fields\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"image too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>droppable</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Skipping B frame without reference frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_p_frame_damaged</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_p_frame_damaged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpv_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>field_picture</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>PROGRESSIVE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>tff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>rff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>rptfrm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>rptfrm</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>qpel_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_qpel_pixels_tab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>qpel_avg</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>&amp;&amp;</operator> <name>buf_start_second_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>PICT_BOTTOM_FIELD</name> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>tff</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>start_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><name>buf_start_second_field</name> <operator>-</operator> <name>buf_start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_slices1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><name>buf_start_second_field</name> <operator>-</operator> <name>buf_start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rawbuf</name> <operator>-</operator> <name>buf_start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_slices1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mby_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rawbuf</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>end_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>n_slices1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>n_slices1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mby_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>PICT_TOP_FIELD</name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>tff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"parsing header for second field failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>start_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start_second_field</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>buf_size</name><operator>)</operator> <operator>-</operator> <name>buf_start_second_field</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_slices</name> <operator>-</operator> <name>n_slices1</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start_second_field</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>buf_size</name><operator>)</operator> <operator>-</operator> <name>buf_start_second_field</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start_second_field</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>n_slices1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>rawbuf</name> <operator>-</operator> <name>buf_start_second_field</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n_slices1</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mby_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rawbuf</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>end_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>start_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>buf_size</name><operator>)</operator> <operator>-</operator> <name>buf_start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_slices</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>buf_size</name><operator>)</operator> <operator>-</operator> <name>buf_start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rawbuf</name> <operator>-</operator> <name>buf_start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mby_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rawbuf</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>raw_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>end_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>header_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mpeg_er_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>end_mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name> <argument_list>(<argument><expr><name>mb_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>slices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>&gt;=</operator> <name>mb_height</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice %d starts beyond "</literal>

<literal type="string">"picture boundary (%d &gt;= %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>slices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mby_start</name></expr></argument>, <argument><expr><name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>&amp;</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>n_slices1</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header_ret</name> <operator>=</operator> <call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Field header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pic_header_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>header_ret</name> <operator>=</operator> <call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>%</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>second_field</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>n_slices</name> <operator>)</operator></expr> ?</condition><then> <expr><name>mb_height</name></expr> </then><else>: <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_height</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>%</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>n_slices</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"first field slice count too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>n_slices1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>mb_height</name></expr> </then><else>: <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_height</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mby_start</name> <operator>%</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"end mb y %d %d invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>cbpcy_vlc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing cbpcy_vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_vc1_decode_blocks</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>n_slices</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_BI</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f_next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f_next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Consumed %i/%i bits\n"</literal></expr></argument>,

<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>error_occurred</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_er_frame_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_mpv_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1IMAGE</name></expr>)</condition> <block>{<block_content>

<label><name>image</name>:</label>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3IMAGE_DECODER</name> <operator>||</operator> <name>CONFIG_VC1IMAGE_DECODER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vc1_decode_sprites</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>sprite_output_frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_debug_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_debug_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>vc1_hwaccel_pixfmt_list_420</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_DXVA2_HWACCEL</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_D3D11VA_HWACCEL</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,

<expr><name>AV_PIX_FMT_D3D11</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_NVDEC_HWACCEL</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_CUDA</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_VAAPI_HWACCEL</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_VAAPI</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_VDPAU_HWACCEL</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_VDPAU</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vc1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vc1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SMPTE VC-1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VC1Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vc1_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vc1_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vc1_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>ff_mpeg_flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>vc1_hwaccel_pixfmt_list_420</name></expr>,

<expr><operator>.</operator><name>hw_configs</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecHWConfigInternal</name><operator>*</operator><index>[]</index><operator>)</operator> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_DXVA2_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_DXVA2</name><argument_list>(<argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_D3D11VA_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_D3D11VA</name><argument_list>(<argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_D3D11VA2_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_D3D11VA2</name><argument_list>(<argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_NVDEC_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_NVDEC</name><argument_list>(<argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_VAAPI_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_VAAPI</name><argument_list>(<argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_VDPAU_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_VDPAU</name><argument_list>(<argument><expr><name>vc1</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <macro><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument>ff_vc1_profiles</argument>)</argument_list></macro></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmv3_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv3"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Video 9"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV3</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VC1Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vc1_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vc1_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vc1_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>ff_mpeg_flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>vc1_hwaccel_pixfmt_list_420</name></expr>,

<expr><operator>.</operator><name>hw_configs</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecHWConfigInternal</name><operator>*</operator><index>[]</index><operator>)</operator> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_DXVA2_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_DXVA2</name><argument_list>(<argument><expr><name>wmv3</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_D3D11VA_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_D3D11VA</name><argument_list>(<argument><expr><name>wmv3</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_D3D11VA2_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_D3D11VA2</name><argument_list>(<argument><expr><name>wmv3</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_NVDEC_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_NVDEC</name><argument_list>(<argument><expr><name>wmv3</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_VAAPI_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_VAAPI</name><argument_list>(<argument><expr><name>wmv3</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_VDPAU_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_VDPAU</name><argument_list>(<argument><expr><name>wmv3</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <macro><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument>ff_vc1_profiles</argument>)</argument_list></macro></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3IMAGE_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmv3image_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv3image"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Video 9 Image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV3IMAGE</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VC1Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vc1_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vc1_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vc1_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>vc1_sprite_flush</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1IMAGE_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vc1image_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vc1image"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Video 9 Image v2"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1IMAGE</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VC1Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vc1_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vc1_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vc1_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>vc1_sprite_flush</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
