<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\avcodec.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<enum>enum <name>AVCodecID</name> <block>{

<decl><name>AV_CODEC_ID_NONE</name></decl>,

<decl><name>AV_CODEC_ID_MPEG1VIDEO</name></decl>,

<decl><name>AV_CODEC_ID_MPEG2VIDEO</name></decl>, 

<decl><name>AV_CODEC_ID_H261</name></decl>,

<decl><name>AV_CODEC_ID_H263</name></decl>,

<decl><name>AV_CODEC_ID_RV10</name></decl>,

<decl><name>AV_CODEC_ID_RV20</name></decl>,

<decl><name>AV_CODEC_ID_MJPEG</name></decl>,

<decl><name>AV_CODEC_ID_MJPEGB</name></decl>,

<decl><name>AV_CODEC_ID_LJPEG</name></decl>,

<decl><name>AV_CODEC_ID_SP5X</name></decl>,

<decl><name>AV_CODEC_ID_JPEGLS</name></decl>,

<decl><name>AV_CODEC_ID_MPEG4</name></decl>,

<decl><name>AV_CODEC_ID_RAWVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_MSMPEG4V1</name></decl>,

<decl><name>AV_CODEC_ID_MSMPEG4V2</name></decl>,

<decl><name>AV_CODEC_ID_MSMPEG4V3</name></decl>,

<decl><name>AV_CODEC_ID_WMV1</name></decl>,

<decl><name>AV_CODEC_ID_WMV2</name></decl>,

<decl><name>AV_CODEC_ID_H263P</name></decl>,

<decl><name>AV_CODEC_ID_H263I</name></decl>,

<decl><name>AV_CODEC_ID_FLV1</name></decl>,

<decl><name>AV_CODEC_ID_SVQ1</name></decl>,

<decl><name>AV_CODEC_ID_SVQ3</name></decl>,

<decl><name>AV_CODEC_ID_DVVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_HUFFYUV</name></decl>,

<decl><name>AV_CODEC_ID_CYUV</name></decl>,

<decl><name>AV_CODEC_ID_H264</name></decl>,

<decl><name>AV_CODEC_ID_INDEO3</name></decl>,

<decl><name>AV_CODEC_ID_VP3</name></decl>,

<decl><name>AV_CODEC_ID_THEORA</name></decl>,

<decl><name>AV_CODEC_ID_ASV1</name></decl>,

<decl><name>AV_CODEC_ID_ASV2</name></decl>,

<decl><name>AV_CODEC_ID_FFV1</name></decl>,

<decl><name>AV_CODEC_ID_4XM</name></decl>,

<decl><name>AV_CODEC_ID_VCR1</name></decl>,

<decl><name>AV_CODEC_ID_CLJR</name></decl>,

<decl><name>AV_CODEC_ID_MDEC</name></decl>,

<decl><name>AV_CODEC_ID_ROQ</name></decl>,

<decl><name>AV_CODEC_ID_INTERPLAY_VIDEO</name></decl>,

<decl><name>AV_CODEC_ID_XAN_WC3</name></decl>,

<decl><name>AV_CODEC_ID_XAN_WC4</name></decl>,

<decl><name>AV_CODEC_ID_RPZA</name></decl>,

<decl><name>AV_CODEC_ID_CINEPAK</name></decl>,

<decl><name>AV_CODEC_ID_WS_VQA</name></decl>,

<decl><name>AV_CODEC_ID_MSRLE</name></decl>,

<decl><name>AV_CODEC_ID_MSVIDEO1</name></decl>,

<decl><name>AV_CODEC_ID_IDCIN</name></decl>,

<decl><name>AV_CODEC_ID_8BPS</name></decl>,

<decl><name>AV_CODEC_ID_SMC</name></decl>,

<decl><name>AV_CODEC_ID_FLIC</name></decl>,

<decl><name>AV_CODEC_ID_TRUEMOTION1</name></decl>,

<decl><name>AV_CODEC_ID_VMDVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_MSZH</name></decl>,

<decl><name>AV_CODEC_ID_ZLIB</name></decl>,

<decl><name>AV_CODEC_ID_QTRLE</name></decl>,

<decl><name>AV_CODEC_ID_TSCC</name></decl>,

<decl><name>AV_CODEC_ID_ULTI</name></decl>,

<decl><name>AV_CODEC_ID_QDRAW</name></decl>,

<decl><name>AV_CODEC_ID_VIXL</name></decl>,

<decl><name>AV_CODEC_ID_QPEG</name></decl>,

<decl><name>AV_CODEC_ID_PNG</name></decl>,

<decl><name>AV_CODEC_ID_PPM</name></decl>,

<decl><name>AV_CODEC_ID_PBM</name></decl>,

<decl><name>AV_CODEC_ID_PGM</name></decl>,

<decl><name>AV_CODEC_ID_PGMYUV</name></decl>,

<decl><name>AV_CODEC_ID_PAM</name></decl>,

<decl><name>AV_CODEC_ID_FFVHUFF</name></decl>,

<decl><name>AV_CODEC_ID_RV30</name></decl>,

<decl><name>AV_CODEC_ID_RV40</name></decl>,

<decl><name>AV_CODEC_ID_VC1</name></decl>,

<decl><name>AV_CODEC_ID_WMV3</name></decl>,

<decl><name>AV_CODEC_ID_LOCO</name></decl>,

<decl><name>AV_CODEC_ID_WNV1</name></decl>,

<decl><name>AV_CODEC_ID_AASC</name></decl>,

<decl><name>AV_CODEC_ID_INDEO2</name></decl>,

<decl><name>AV_CODEC_ID_FRAPS</name></decl>,

<decl><name>AV_CODEC_ID_TRUEMOTION2</name></decl>,

<decl><name>AV_CODEC_ID_BMP</name></decl>,

<decl><name>AV_CODEC_ID_CSCD</name></decl>,

<decl><name>AV_CODEC_ID_MMVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_ZMBV</name></decl>,

<decl><name>AV_CODEC_ID_AVS</name></decl>,

<decl><name>AV_CODEC_ID_SMACKVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_NUV</name></decl>,

<decl><name>AV_CODEC_ID_KMVC</name></decl>,

<decl><name>AV_CODEC_ID_FLASHSV</name></decl>,

<decl><name>AV_CODEC_ID_CAVS</name></decl>,

<decl><name>AV_CODEC_ID_JPEG2000</name></decl>,

<decl><name>AV_CODEC_ID_VMNC</name></decl>,

<decl><name>AV_CODEC_ID_VP5</name></decl>,

<decl><name>AV_CODEC_ID_VP6</name></decl>,

<decl><name>AV_CODEC_ID_VP6F</name></decl>,

<decl><name>AV_CODEC_ID_TARGA</name></decl>,

<decl><name>AV_CODEC_ID_DSICINVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_TIERTEXSEQVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_TIFF</name></decl>,

<decl><name>AV_CODEC_ID_GIF</name></decl>,

<decl><name>AV_CODEC_ID_DXA</name></decl>,

<decl><name>AV_CODEC_ID_DNXHD</name></decl>,

<decl><name>AV_CODEC_ID_THP</name></decl>,

<decl><name>AV_CODEC_ID_SGI</name></decl>,

<decl><name>AV_CODEC_ID_C93</name></decl>,

<decl><name>AV_CODEC_ID_BETHSOFTVID</name></decl>,

<decl><name>AV_CODEC_ID_PTX</name></decl>,

<decl><name>AV_CODEC_ID_TXD</name></decl>,

<decl><name>AV_CODEC_ID_VP6A</name></decl>,

<decl><name>AV_CODEC_ID_AMV</name></decl>,

<decl><name>AV_CODEC_ID_VB</name></decl>,

<decl><name>AV_CODEC_ID_PCX</name></decl>,

<decl><name>AV_CODEC_ID_SUNRAST</name></decl>,

<decl><name>AV_CODEC_ID_INDEO4</name></decl>,

<decl><name>AV_CODEC_ID_INDEO5</name></decl>,

<decl><name>AV_CODEC_ID_MIMIC</name></decl>,

<decl><name>AV_CODEC_ID_RL2</name></decl>,

<decl><name>AV_CODEC_ID_ESCAPE124</name></decl>,

<decl><name>AV_CODEC_ID_DIRAC</name></decl>,

<decl><name>AV_CODEC_ID_BFI</name></decl>,

<decl><name>AV_CODEC_ID_CMV</name></decl>,

<decl><name>AV_CODEC_ID_MOTIONPIXELS</name></decl>,

<decl><name>AV_CODEC_ID_TGV</name></decl>,

<decl><name>AV_CODEC_ID_TGQ</name></decl>,

<decl><name>AV_CODEC_ID_TQI</name></decl>,

<decl><name>AV_CODEC_ID_AURA</name></decl>,

<decl><name>AV_CODEC_ID_AURA2</name></decl>,

<decl><name>AV_CODEC_ID_V210X</name></decl>,

<decl><name>AV_CODEC_ID_TMV</name></decl>,

<decl><name>AV_CODEC_ID_V210</name></decl>,

<decl><name>AV_CODEC_ID_DPX</name></decl>,

<decl><name>AV_CODEC_ID_MAD</name></decl>,

<decl><name>AV_CODEC_ID_FRWU</name></decl>,

<decl><name>AV_CODEC_ID_FLASHSV2</name></decl>,

<decl><name>AV_CODEC_ID_CDGRAPHICS</name></decl>,

<decl><name>AV_CODEC_ID_R210</name></decl>,

<decl><name>AV_CODEC_ID_ANM</name></decl>,

<decl><name>AV_CODEC_ID_BINKVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_IFF_ILBM</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_ID_IFF_BYTERUN1</name></cpp:macro> <cpp:value>AV_CODEC_ID_IFF_ILBM</cpp:value></cpp:define>

<decl><name>AV_CODEC_ID_KGV1</name></decl>,

<decl><name>AV_CODEC_ID_YOP</name></decl>,

<decl><name>AV_CODEC_ID_VP8</name></decl>,

<decl><name>AV_CODEC_ID_PICTOR</name></decl>,

<decl><name>AV_CODEC_ID_ANSI</name></decl>,

<decl><name>AV_CODEC_ID_A64_MULTI</name></decl>,

<decl><name>AV_CODEC_ID_A64_MULTI5</name></decl>,

<decl><name>AV_CODEC_ID_R10K</name></decl>,

<decl><name>AV_CODEC_ID_MXPEG</name></decl>,

<decl><name>AV_CODEC_ID_LAGARITH</name></decl>,

<decl><name>AV_CODEC_ID_PRORES</name></decl>,

<decl><name>AV_CODEC_ID_JV</name></decl>,

<decl><name>AV_CODEC_ID_DFA</name></decl>,

<decl><name>AV_CODEC_ID_WMV3IMAGE</name></decl>,

<decl><name>AV_CODEC_ID_VC1IMAGE</name></decl>,

<decl><name>AV_CODEC_ID_UTVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_BMV_VIDEO</name></decl>,

<decl><name>AV_CODEC_ID_VBLE</name></decl>,

<decl><name>AV_CODEC_ID_DXTORY</name></decl>,

<decl><name>AV_CODEC_ID_V410</name></decl>,

<decl><name>AV_CODEC_ID_XWD</name></decl>,

<decl><name>AV_CODEC_ID_CDXL</name></decl>,

<decl><name>AV_CODEC_ID_XBM</name></decl>,

<decl><name>AV_CODEC_ID_ZEROCODEC</name></decl>,

<decl><name>AV_CODEC_ID_MSS1</name></decl>,

<decl><name>AV_CODEC_ID_MSA1</name></decl>,

<decl><name>AV_CODEC_ID_TSCC2</name></decl>,

<decl><name>AV_CODEC_ID_MTS2</name></decl>,

<decl><name>AV_CODEC_ID_CLLC</name></decl>,

<decl><name>AV_CODEC_ID_MSS2</name></decl>,

<decl><name>AV_CODEC_ID_VP9</name></decl>,

<decl><name>AV_CODEC_ID_AIC</name></decl>,

<decl><name>AV_CODEC_ID_ESCAPE130</name></decl>,

<decl><name>AV_CODEC_ID_G2M</name></decl>,

<decl><name>AV_CODEC_ID_WEBP</name></decl>,

<decl><name>AV_CODEC_ID_HNM4_VIDEO</name></decl>,

<decl><name>AV_CODEC_ID_HEVC</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_ID_H265</name></cpp:macro> <cpp:value>AV_CODEC_ID_HEVC</cpp:value></cpp:define>

<decl><name>AV_CODEC_ID_FIC</name></decl>,

<decl><name>AV_CODEC_ID_ALIAS_PIX</name></decl>,

<decl><name>AV_CODEC_ID_BRENDER_PIX</name></decl>,

<decl><name>AV_CODEC_ID_PAF_VIDEO</name></decl>,

<decl><name>AV_CODEC_ID_EXR</name></decl>,

<decl><name>AV_CODEC_ID_VP7</name></decl>,

<decl><name>AV_CODEC_ID_SANM</name></decl>,

<decl><name>AV_CODEC_ID_SGIRLE</name></decl>,

<decl><name>AV_CODEC_ID_MVC1</name></decl>,

<decl><name>AV_CODEC_ID_MVC2</name></decl>,

<decl><name>AV_CODEC_ID_HQX</name></decl>,

<decl><name>AV_CODEC_ID_TDSC</name></decl>,

<decl><name>AV_CODEC_ID_HQ_HQA</name></decl>,

<decl><name>AV_CODEC_ID_HAP</name></decl>,

<decl><name>AV_CODEC_ID_DDS</name></decl>,

<decl><name>AV_CODEC_ID_DXV</name></decl>,

<decl><name>AV_CODEC_ID_SCREENPRESSO</name></decl>,

<decl><name>AV_CODEC_ID_RSCC</name></decl>,

<decl><name>AV_CODEC_ID_AVS2</name></decl>,

<decl><name>AV_CODEC_ID_Y41P</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_AVRP</name></decl>,

<decl><name>AV_CODEC_ID_012V</name></decl>,

<decl><name>AV_CODEC_ID_AVUI</name></decl>,

<decl><name>AV_CODEC_ID_AYUV</name></decl>,

<decl><name>AV_CODEC_ID_TARGA_Y216</name></decl>,

<decl><name>AV_CODEC_ID_V308</name></decl>,

<decl><name>AV_CODEC_ID_V408</name></decl>,

<decl><name>AV_CODEC_ID_YUV4</name></decl>,

<decl><name>AV_CODEC_ID_AVRN</name></decl>,

<decl><name>AV_CODEC_ID_CPIA</name></decl>,

<decl><name>AV_CODEC_ID_XFACE</name></decl>,

<decl><name>AV_CODEC_ID_SNOW</name></decl>,

<decl><name>AV_CODEC_ID_SMVJPEG</name></decl>,

<decl><name>AV_CODEC_ID_APNG</name></decl>,

<decl><name>AV_CODEC_ID_DAALA</name></decl>,

<decl><name>AV_CODEC_ID_CFHD</name></decl>,

<decl><name>AV_CODEC_ID_TRUEMOTION2RT</name></decl>,

<decl><name>AV_CODEC_ID_M101</name></decl>,

<decl><name>AV_CODEC_ID_MAGICYUV</name></decl>,

<decl><name>AV_CODEC_ID_SHEERVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_YLC</name></decl>,

<decl><name>AV_CODEC_ID_PSD</name></decl>,

<decl><name>AV_CODEC_ID_PIXLET</name></decl>,

<decl><name>AV_CODEC_ID_SPEEDHQ</name></decl>,

<decl><name>AV_CODEC_ID_FMVC</name></decl>,

<decl><name>AV_CODEC_ID_SCPR</name></decl>,

<decl><name>AV_CODEC_ID_CLEARVIDEO</name></decl>,

<decl><name>AV_CODEC_ID_XPM</name></decl>,

<decl><name>AV_CODEC_ID_AV1</name></decl>,

<decl><name>AV_CODEC_ID_BITPACKED</name></decl>,

<decl><name>AV_CODEC_ID_MSCC</name></decl>,

<decl><name>AV_CODEC_ID_SRGC</name></decl>,

<decl><name>AV_CODEC_ID_SVG</name></decl>,

<decl><name>AV_CODEC_ID_GDV</name></decl>,

<decl><name>AV_CODEC_ID_FITS</name></decl>,

<decl><name>AV_CODEC_ID_IMM4</name></decl>,

<decl><name>AV_CODEC_ID_PROSUMER</name></decl>,

<decl><name>AV_CODEC_ID_MWSC</name></decl>,

<decl><name>AV_CODEC_ID_WCMV</name></decl>,

<decl><name>AV_CODEC_ID_RASC</name></decl>,

<decl><name>AV_CODEC_ID_HYMT</name></decl>,

<decl><name>AV_CODEC_ID_ARBC</name></decl>,

<decl><name>AV_CODEC_ID_AGM</name></decl>,

<decl><name>AV_CODEC_ID_LSCR</name></decl>,

<decl><name>AV_CODEC_ID_VP4</name></decl>,

<decl><name>AV_CODEC_ID_IMM5</name></decl>,

<decl><name>AV_CODEC_ID_MVDV</name></decl>,

<decl><name>AV_CODEC_ID_MVHA</name></decl>,

<decl><name>AV_CODEC_ID_CDTOONS</name></decl>,

<decl><name>AV_CODEC_ID_FIRST_AUDIO</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_PCM_S16LE</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_PCM_S16BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U16LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U16BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S8</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U8</name></decl>,

<decl><name>AV_CODEC_ID_PCM_MULAW</name></decl>,

<decl><name>AV_CODEC_ID_PCM_ALAW</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S32LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S32BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U32LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U32BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S24LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S24BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U24LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_U24BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S24DAUD</name></decl>,

<decl><name>AV_CODEC_ID_PCM_ZORK</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_PCM_DVD</name></decl>,

<decl><name>AV_CODEC_ID_PCM_F32BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_F32LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_F64BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_F64LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_BLURAY</name></decl>,

<decl><name>AV_CODEC_ID_PCM_LXF</name></decl>,

<decl><name>AV_CODEC_ID_S302M</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S8_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S24LE_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S32LE_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S16BE_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_PCM_S64LE</name> <init>= <expr><literal type="number">0x10800</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_PCM_S64BE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_F16LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_F24LE</name></decl>,

<decl><name>AV_CODEC_ID_PCM_VIDC</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_QT</name> <init>= <expr><literal type="number">0x11000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_DK3</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_DK4</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_WS</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_MS</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_4XM</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_XA</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_ADX</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_EA</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_G726</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_CT</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_SWF</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_YAMAHA</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_SBPRO_4</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_SBPRO_3</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_SBPRO_2</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_THP</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_AMV</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_EA_R1</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_EA_R3</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_EA_R2</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_EA_XAS</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_EA_MAXIS_XA</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_ISS</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_G722</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_APC</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_VIMA</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_AFC</name> <init>= <expr><literal type="number">0x11800</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_OKI</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_DTK</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_RAD</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_G726LE</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_THP_LE</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_PSX</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_AICA</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_MTAF</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_AGM</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_ARGO</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_SSI</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_ZORK</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_APM</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_ALP</name></decl>,

<decl><name>AV_CODEC_ID_ADPCM_IMA_MTF</name></decl>,

<decl><name>AV_CODEC_ID_AMR_NB</name> <init>= <expr><literal type="number">0x12000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_AMR_WB</name></decl>,

<decl><name>AV_CODEC_ID_RA_144</name> <init>= <expr><literal type="number">0x13000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_RA_288</name></decl>,

<decl><name>AV_CODEC_ID_ROQ_DPCM</name> <init>= <expr><literal type="number">0x14000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_INTERPLAY_DPCM</name></decl>,

<decl><name>AV_CODEC_ID_XAN_DPCM</name></decl>,

<decl><name>AV_CODEC_ID_SOL_DPCM</name></decl>,

<decl><name>AV_CODEC_ID_SDX2_DPCM</name> <init>= <expr><literal type="number">0x14800</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_GREMLIN_DPCM</name></decl>,

<decl><name>AV_CODEC_ID_DERF_DPCM</name></decl>,

<decl><name>AV_CODEC_ID_MP2</name> <init>= <expr><literal type="number">0x15000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_MP3</name></decl>, 

<decl><name>AV_CODEC_ID_AAC</name></decl>,

<decl><name>AV_CODEC_ID_AC3</name></decl>,

<decl><name>AV_CODEC_ID_DTS</name></decl>,

<decl><name>AV_CODEC_ID_VORBIS</name></decl>,

<decl><name>AV_CODEC_ID_DVAUDIO</name></decl>,

<decl><name>AV_CODEC_ID_WMAV1</name></decl>,

<decl><name>AV_CODEC_ID_WMAV2</name></decl>,

<decl><name>AV_CODEC_ID_MACE3</name></decl>,

<decl><name>AV_CODEC_ID_MACE6</name></decl>,

<decl><name>AV_CODEC_ID_VMDAUDIO</name></decl>,

<decl><name>AV_CODEC_ID_FLAC</name></decl>,

<decl><name>AV_CODEC_ID_MP3ADU</name></decl>,

<decl><name>AV_CODEC_ID_MP3ON4</name></decl>,

<decl><name>AV_CODEC_ID_SHORTEN</name></decl>,

<decl><name>AV_CODEC_ID_ALAC</name></decl>,

<decl><name>AV_CODEC_ID_WESTWOOD_SND1</name></decl>,

<decl><name>AV_CODEC_ID_GSM</name></decl>, 

<decl><name>AV_CODEC_ID_QDM2</name></decl>,

<decl><name>AV_CODEC_ID_COOK</name></decl>,

<decl><name>AV_CODEC_ID_TRUESPEECH</name></decl>,

<decl><name>AV_CODEC_ID_TTA</name></decl>,

<decl><name>AV_CODEC_ID_SMACKAUDIO</name></decl>,

<decl><name>AV_CODEC_ID_QCELP</name></decl>,

<decl><name>AV_CODEC_ID_WAVPACK</name></decl>,

<decl><name>AV_CODEC_ID_DSICINAUDIO</name></decl>,

<decl><name>AV_CODEC_ID_IMC</name></decl>,

<decl><name>AV_CODEC_ID_MUSEPACK7</name></decl>,

<decl><name>AV_CODEC_ID_MLP</name></decl>,

<decl><name>AV_CODEC_ID_GSM_MS</name></decl>, 

<decl><name>AV_CODEC_ID_ATRAC3</name></decl>,

<decl><name>AV_CODEC_ID_APE</name></decl>,

<decl><name>AV_CODEC_ID_NELLYMOSER</name></decl>,

<decl><name>AV_CODEC_ID_MUSEPACK8</name></decl>,

<decl><name>AV_CODEC_ID_SPEEX</name></decl>,

<decl><name>AV_CODEC_ID_WMAVOICE</name></decl>,

<decl><name>AV_CODEC_ID_WMAPRO</name></decl>,

<decl><name>AV_CODEC_ID_WMALOSSLESS</name></decl>,

<decl><name>AV_CODEC_ID_ATRAC3P</name></decl>,

<decl><name>AV_CODEC_ID_EAC3</name></decl>,

<decl><name>AV_CODEC_ID_SIPR</name></decl>,

<decl><name>AV_CODEC_ID_MP1</name></decl>,

<decl><name>AV_CODEC_ID_TWINVQ</name></decl>,

<decl><name>AV_CODEC_ID_TRUEHD</name></decl>,

<decl><name>AV_CODEC_ID_MP4ALS</name></decl>,

<decl><name>AV_CODEC_ID_ATRAC1</name></decl>,

<decl><name>AV_CODEC_ID_BINKAUDIO_RDFT</name></decl>,

<decl><name>AV_CODEC_ID_BINKAUDIO_DCT</name></decl>,

<decl><name>AV_CODEC_ID_AAC_LATM</name></decl>,

<decl><name>AV_CODEC_ID_QDMC</name></decl>,

<decl><name>AV_CODEC_ID_CELT</name></decl>,

<decl><name>AV_CODEC_ID_G723_1</name></decl>,

<decl><name>AV_CODEC_ID_G729</name></decl>,

<decl><name>AV_CODEC_ID_8SVX_EXP</name></decl>,

<decl><name>AV_CODEC_ID_8SVX_FIB</name></decl>,

<decl><name>AV_CODEC_ID_BMV_AUDIO</name></decl>,

<decl><name>AV_CODEC_ID_RALF</name></decl>,

<decl><name>AV_CODEC_ID_IAC</name></decl>,

<decl><name>AV_CODEC_ID_ILBC</name></decl>,

<decl><name>AV_CODEC_ID_OPUS</name></decl>,

<decl><name>AV_CODEC_ID_COMFORT_NOISE</name></decl>,

<decl><name>AV_CODEC_ID_TAK</name></decl>,

<decl><name>AV_CODEC_ID_METASOUND</name></decl>,

<decl><name>AV_CODEC_ID_PAF_AUDIO</name></decl>,

<decl><name>AV_CODEC_ID_ON2AVC</name></decl>,

<decl><name>AV_CODEC_ID_DSS_SP</name></decl>,

<decl><name>AV_CODEC_ID_CODEC2</name></decl>,

<decl><name>AV_CODEC_ID_FFWAVESYNTH</name> <init>= <expr><literal type="number">0x15800</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_SONIC</name></decl>,

<decl><name>AV_CODEC_ID_SONIC_LS</name></decl>,

<decl><name>AV_CODEC_ID_EVRC</name></decl>,

<decl><name>AV_CODEC_ID_SMV</name></decl>,

<decl><name>AV_CODEC_ID_DSD_LSBF</name></decl>,

<decl><name>AV_CODEC_ID_DSD_MSBF</name></decl>,

<decl><name>AV_CODEC_ID_DSD_LSBF_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_DSD_MSBF_PLANAR</name></decl>,

<decl><name>AV_CODEC_ID_4GV</name></decl>,

<decl><name>AV_CODEC_ID_INTERPLAY_ACM</name></decl>,

<decl><name>AV_CODEC_ID_XMA1</name></decl>,

<decl><name>AV_CODEC_ID_XMA2</name></decl>,

<decl><name>AV_CODEC_ID_DST</name></decl>,

<decl><name>AV_CODEC_ID_ATRAC3AL</name></decl>,

<decl><name>AV_CODEC_ID_ATRAC3PAL</name></decl>,

<decl><name>AV_CODEC_ID_DOLBY_E</name></decl>,

<decl><name>AV_CODEC_ID_APTX</name></decl>,

<decl><name>AV_CODEC_ID_APTX_HD</name></decl>,

<decl><name>AV_CODEC_ID_SBC</name></decl>,

<decl><name>AV_CODEC_ID_ATRAC9</name></decl>,

<decl><name>AV_CODEC_ID_HCOM</name></decl>,

<decl><name>AV_CODEC_ID_ACELP_KELVIN</name></decl>,

<decl><name>AV_CODEC_ID_MPEGH_3D_AUDIO</name></decl>,

<decl><name>AV_CODEC_ID_SIREN</name></decl>,

<decl><name>AV_CODEC_ID_HCA</name></decl>,

<decl><name>AV_CODEC_ID_FIRST_SUBTITLE</name> <init>= <expr><literal type="number">0x17000</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_DVD_SUBTITLE</name> <init>= <expr><literal type="number">0x17000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_DVB_SUBTITLE</name></decl>,

<decl><name>AV_CODEC_ID_TEXT</name></decl>, 

<decl><name>AV_CODEC_ID_XSUB</name></decl>,

<decl><name>AV_CODEC_ID_SSA</name></decl>,

<decl><name>AV_CODEC_ID_MOV_TEXT</name></decl>,

<decl><name>AV_CODEC_ID_HDMV_PGS_SUBTITLE</name></decl>,

<decl><name>AV_CODEC_ID_DVB_TELETEXT</name></decl>,

<decl><name>AV_CODEC_ID_SRT</name></decl>,

<decl><name>AV_CODEC_ID_MICRODVD</name> <init>= <expr><literal type="number">0x17800</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_EIA_608</name></decl>,

<decl><name>AV_CODEC_ID_JACOSUB</name></decl>,

<decl><name>AV_CODEC_ID_SAMI</name></decl>,

<decl><name>AV_CODEC_ID_REALTEXT</name></decl>,

<decl><name>AV_CODEC_ID_STL</name></decl>,

<decl><name>AV_CODEC_ID_SUBVIEWER1</name></decl>,

<decl><name>AV_CODEC_ID_SUBVIEWER</name></decl>,

<decl><name>AV_CODEC_ID_SUBRIP</name></decl>,

<decl><name>AV_CODEC_ID_WEBVTT</name></decl>,

<decl><name>AV_CODEC_ID_MPL2</name></decl>,

<decl><name>AV_CODEC_ID_VPLAYER</name></decl>,

<decl><name>AV_CODEC_ID_PJS</name></decl>,

<decl><name>AV_CODEC_ID_ASS</name></decl>,

<decl><name>AV_CODEC_ID_HDMV_TEXT_SUBTITLE</name></decl>,

<decl><name>AV_CODEC_ID_TTML</name></decl>,

<decl><name>AV_CODEC_ID_ARIB_CAPTION</name></decl>,

<decl><name>AV_CODEC_ID_FIRST_UNKNOWN</name> <init>= <expr><literal type="number">0x18000</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_TTF</name> <init>= <expr><literal type="number">0x18000</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_SCTE_35</name></decl>, 

<decl><name>AV_CODEC_ID_EPG</name></decl>,

<decl><name>AV_CODEC_ID_BINTEXT</name> <init>= <expr><literal type="number">0x18800</literal></expr></init></decl>,

<decl><name>AV_CODEC_ID_XBIN</name></decl>,

<decl><name>AV_CODEC_ID_IDF</name></decl>,

<decl><name>AV_CODEC_ID_OTF</name></decl>,

<decl><name>AV_CODEC_ID_SMPTE_KLV</name></decl>,

<decl><name>AV_CODEC_ID_DVD_NAV</name></decl>,

<decl><name>AV_CODEC_ID_TIMED_ID3</name></decl>,

<decl><name>AV_CODEC_ID_BIN_DATA</name></decl>,

<decl><name>AV_CODEC_ID_PROBE</name> <init>= <expr><literal type="number">0x19000</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_MPEG2TS</name> <init>= <expr><literal type="number">0x20000</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_MPEG4SYSTEMS</name> <init>= <expr><literal type="number">0x20001</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_FFMETADATA</name> <init>= <expr><literal type="number">0x21000</literal></expr></init></decl>, 

<decl><name>AV_CODEC_ID_WRAPPED_AVFRAME</name> <init>= <expr><literal type="number">0x21001</literal></expr></init></decl>, 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>AVCodecDescriptor</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>mime_types</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVProfile</name></name> <modifier>*</modifier></type><name>profiles</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodecDescriptor</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_PROP_INTRA_ONLY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_PROP_LOSSY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_PROP_LOSSLESS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_PROP_REORDER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_PROP_BITMAP_SUB</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_PROP_TEXT_SUB</name></cpp:macro> <cpp:value>(1 &lt;&lt; 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_INPUT_BUFFER_PADDING_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_INPUT_BUFFER_MIN_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<enum>enum <name>AVDiscard</name><block>{

<decl><name>AVDISCARD_NONE</name> <init>=<expr><operator>-</operator><literal type="number">16</literal></expr></init></decl>, 

<decl><name>AVDISCARD_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>AVDISCARD_NONREF</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>AVDISCARD_BIDIR</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 

<decl><name>AVDISCARD_NONINTRA</name><init>= <expr><literal type="number">24</literal></expr></init></decl>, 

<decl><name>AVDISCARD_NONKEY</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, 

<decl><name>AVDISCARD_ALL</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>, 

}</block>;</enum>

<enum>enum <name>AVAudioServiceType</name> <block>{

<decl><name>AV_AUDIO_SERVICE_TYPE_MAIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_EFFECTS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_DIALOGUE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_COMMENTARY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_EMERGENCY</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_VOICE_OVER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_KARAOKE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>AV_AUDIO_SERVICE_TYPE_NB</name></decl> , 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>RcOverride</name><block>{

<decl_stmt><decl><type><name>int</name></type> <name>start_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>quality_factor</name></decl>;</decl_stmt>

}</block></struct></type> <name>RcOverride</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_UNALIGNED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_QSCALE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_4MV</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_OUTPUT_CORRUPT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_QPEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_DROPCHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_PASS1</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_PASS2</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_LOOP_FILTER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_GRAY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_PSNR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_TRUNCATED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_INTERLACED_DCT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_LOW_DELAY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_GLOBAL_HEADER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 22)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_BITEXACT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_AC_PRED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_INTERLACED_ME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 29)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_CLOSED_GOP</name></cpp:macro> <cpp:value>(1U &lt;&lt; 31)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_FAST</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_NO_OUTPUT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_LOCAL_HEADER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_DROP_FRAME_TIMECODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_CHUNKS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_IGNORE_CROP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_SHOW_ALL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 22)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_EXPORT_MVS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_SKIP_MANUAL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 29)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_DR1</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_TRUNCATED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_DELAY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_SUBFRAMES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_EXPERIMENTAL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_CHANNEL_CONF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_FRAME_THREADS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_SLICE_THREADS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_PARAM_CHANGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_AUTO_THREADS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_AVOID_PROBING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_INTRA_ONLY</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_LOSSLESS</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_HARDWARE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_HYBRID</name></cpp:macro> <cpp:value>(1 &lt;&lt; 19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_EXPORT_DATA_MVS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_EXPORT_DATA_PRFT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AVPanScan</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>position</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>AVPanScan</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVCPBProperties</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_UNSANITIZED_BITRATES</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>max_bitrate</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_bitrate</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_UNSANITIZED_BITRATES</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>min_bitrate</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int64_t</name></type> <name>min_bitrate</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_UNSANITIZED_BITRATES</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>avg_bitrate</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int64_t</name></type> <name>avg_bitrate</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>vbv_delay</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCPBProperties</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVProducerReferenceTime</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>wallclock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVProducerReferenceTime</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_GET_BUFFER_FLAG_REF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<enum>enum <name>AVPacketSideDataType</name> <block>{

<decl><name>AV_PKT_DATA_PALETTE</name></decl>,

<decl><name>AV_PKT_DATA_NEW_EXTRADATA</name></decl>,

<decl><name>AV_PKT_DATA_PARAM_CHANGE</name></decl>,

<decl><name>AV_PKT_DATA_H263_MB_INFO</name></decl>,

<decl><name>AV_PKT_DATA_REPLAYGAIN</name></decl>,

<decl><name>AV_PKT_DATA_DISPLAYMATRIX</name></decl>,

<decl><name>AV_PKT_DATA_STEREO3D</name></decl>,

<decl><name>AV_PKT_DATA_AUDIO_SERVICE_TYPE</name></decl>,

<decl><name>AV_PKT_DATA_QUALITY_STATS</name></decl>,

<decl><name>AV_PKT_DATA_FALLBACK_TRACK</name></decl>,

<decl><name>AV_PKT_DATA_CPB_PROPERTIES</name></decl>,

<decl><name>AV_PKT_DATA_SKIP_SAMPLES</name></decl>,

<decl><name>AV_PKT_DATA_JP_DUALMONO</name></decl>,

<decl><name>AV_PKT_DATA_STRINGS_METADATA</name></decl>,

<decl><name>AV_PKT_DATA_SUBTITLE_POSITION</name></decl>,

<decl><name>AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></decl>,

<decl><name>AV_PKT_DATA_WEBVTT_IDENTIFIER</name></decl>,

<decl><name>AV_PKT_DATA_WEBVTT_SETTINGS</name></decl>,

<decl><name>AV_PKT_DATA_METADATA_UPDATE</name></decl>,

<decl><name>AV_PKT_DATA_MPEGTS_STREAM_ID</name></decl>,

<decl><name>AV_PKT_DATA_MASTERING_DISPLAY_METADATA</name></decl>,

<decl><name>AV_PKT_DATA_SPHERICAL</name></decl>,

<decl><name>AV_PKT_DATA_CONTENT_LIGHT_LEVEL</name></decl>,

<decl><name>AV_PKT_DATA_A53_CC</name></decl>,

<decl><name>AV_PKT_DATA_ENCRYPTION_INIT_INFO</name></decl>,

<decl><name>AV_PKT_DATA_ENCRYPTION_INFO</name></decl>,

<decl><name>AV_PKT_DATA_AFD</name></decl>,

<decl><name>AV_PKT_DATA_PRFT</name></decl>,

<decl><name>AV_PKT_DATA_ICC_PROFILE</name></decl>,

<decl><name>AV_PKT_DATA_NB</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PKT_DATA_QUALITY_FACTOR</name></cpp:macro> <cpp:value>AV_PKT_DATA_QUALITY_STATS</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>AVPacketSideData</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVPacketSideData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVPacket</name> <block>{

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side_data_elems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int64_t</name></type> <name>convergence_duration</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>AVPacket</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PKT_FLAG_KEY</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PKT_FLAG_CORRUPT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PKT_FLAG_DISCARD</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PKT_FLAG_TRUSTED</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PKT_FLAG_DISPOSABLE</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<enum>enum <name>AVSideDataParamChangeFlags</name> <block>{

<decl><name>AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,

<decl><name>AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,

}</block>;</enum>

<struct_decl>struct <name>AVCodecInternal</name>;</struct_decl>

<enum>enum <name>AVFieldOrder</name> <block>{

<decl><name>AV_FIELD_UNKNOWN</name></decl>,

<decl><name>AV_FIELD_PROGRESSIVE</name></decl>,

<decl><name>AV_FIELD_TT</name></decl>, 

<decl><name>AV_FIELD_BB</name></decl>, 

<decl><name>AV_FIELD_TB</name></decl>, 

<decl><name>AV_FIELD_BT</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>AVCodecContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_level_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVCodec</name></name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>codec_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCodecInternal</name></name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_rate_tolerance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compression_level</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_COMPRESSION_DEFAULT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ticks_per_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coded_width</name></decl>, <name>coded_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gop_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>draw_horiz_band</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>offset</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> (<modifier>*</modifier><name>get_format</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>max_b_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b_quant_factor</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>b_frame_strategy</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>b_quant_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_b_frames</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>mpeg_quant</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>i_quant_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_quant_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lumi_masking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>temporal_cplx_masking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>spatial_cplx_masking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>p_masking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dark_masking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>prediction_method</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PRED_LEFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PRED_PLANE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PRED_MEDIAN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>slice_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sample_aspect_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_sub_cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ildct_cmp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_SAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_SSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_SATD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_DCT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_PSNR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_BIT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_RD</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_ZERO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_VSAD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_VSSE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_NSSE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_W53</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_W97</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_DCTMAX</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_DCT264</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_MEDIAN_SAD</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CMP_CHROMA</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>dia_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_predictor_count</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>pre_me</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>me_pre_cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pre_dia_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_subpel_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_FLAG_CODED_ORDER</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_FLAG_ALLOW_FIELD</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_FLAG_ALLOW_PLANE</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_decision</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MB_DECISION_SIMPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MB_DECISION_BITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MB_DECISION_RD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>intra_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inter_matrix</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>scenechange_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>noise_reduction</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>intra_dc_precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_lmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_lmax</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>me_penalty_compensation</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>bidir_refine</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>brd_scale</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>keyint_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>chromaoffset</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>mv0_threshold</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>b_sensitivity</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_sample_location</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>field_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cutoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>request_channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVAudioServiceType</name></name></type> <name>audio_service_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>request_sample_fmt</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_buffer2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>refcounted_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qcompress</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>qblur</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>qmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_qdiff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_override_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RcOverride</name> <modifier>*</modifier></type><name>rc_override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rc_max_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rc_min_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_max_available_vbv_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_min_vbv_overflow_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_initial_buffer_occupancy</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODER_TYPE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODER_TYPE_VLC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODER_TYPE_AC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODER_TYPE_RAW</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODER_TYPE_RLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>coder_type</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>context_model</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>frame_skip_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>frame_skip_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>frame_skip_exp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>frame_skip_cmp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>trellis</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>min_prediction_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>max_prediction_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int64_t</name></type> <name>timecode_frame_start</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_RTP_CALLBACK</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> (<modifier>*</modifier><name>rtp_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_nb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>rtp_payload_size</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STAT_BITS</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>mv_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>header_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>i_tex_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>p_tex_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>p_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>skip_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>misc_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>frame_bits</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stats_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stats_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>workaround_bugs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_AUTODETECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_XVID_ILACE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_UMP4</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_NO_PADDING</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_AMV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_QPEL_CHROMA</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_STD_QPEL</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_QPEL_CHROMA2</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_DIRECT_BLOCKSIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_EDGE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_HPEL_CHROMA</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_DC_CLIP</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_MS</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_TRUNCATED</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUG_IEDGE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>strict_std_compliance</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_COMPLIANCE_VERY_STRICT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_COMPLIANCE_STRICT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_COMPLIANCE_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_COMPLIANCE_UNOFFICIAL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_COMPLIANCE_EXPERIMENTAL</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>error_concealment</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_EC_GUESS_MVS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_EC_DEBLOCK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_EC_FAVOR_INTER</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>debug</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_PICT_INFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_RC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_BITSTREAM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_MB_TYPE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_QP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_DEBUG_MV</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_MV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_DCT_COEFF</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_SKIP</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_STARTCODE</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_ER</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_MMCO</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_BUGS</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_DEBUG_MV</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_QP</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MB_TYPE</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_BUFFERS</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_THREADS</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_GREEN_MD</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_NOMC</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_DEBUG_MV</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>debug_mv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MV_P_FOR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MV_B_FOR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MV_B_BACK</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>err_recognition</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_CRCCHECK</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_BITSTREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_BUFFER</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_EXPLODE</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_IGNORE_ERR</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_CAREFUL</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_COMPLIANT</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_EF_AGGRESSIVE</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>reordered_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVHWAccel</name></name> <modifier>*</modifier></type><name>hwaccel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>error</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_algo</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DCT_AUTO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DCT_FASTINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DCT_INT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DCT_MMX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DCT_ALTIVEC</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DCT_FAAN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>idct_algo</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_AUTO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_INT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLEMMX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_ARM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_ALTIVEC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLEARM</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_XVID</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLEARMV5TE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLEARMV6</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_FAAN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLENEON</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_NONE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_IDCT_SIMPLEAUTO</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_coded_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_raw_sample</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LOWRES</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>lowres</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name> <name>AVFrame</name> <modifier>*</modifier></type><name>coded_frame</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>thread_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thread_type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_THREAD_FRAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_THREAD_SLICE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>active_thread_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thread_safe_callbacks</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>execute</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>execute2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>nsse_weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_UNKNOWN</name></cpp:macro> <cpp:value>-99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_RESERVED</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_MAIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_LOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_SSR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_LTP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_HE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_HE_V2</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_LD</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AAC_ELD</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_AAC_LOW</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_AAC_HE</name></cpp:macro> <cpp:value>131</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DNXHD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DNXHR_LB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DNXHR_SQ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DNXHR_HQ</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DNXHR_HQX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DNXHR_444</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DTS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DTS_ES</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DTS_96_24</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DTS_HD_HRA</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DTS_HD_MA</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_DTS_EXPRESS</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_422</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_HIGH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_SS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_SNR_SCALABLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_MAIN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG2_SIMPLE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_CONSTRAINED</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_INTRA</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_BASELINE</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></cpp:macro> <cpp:value>(66|FF_PROFILE_H264_CONSTRAINED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_MAIN</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_EXTENDED</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_10</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_10_INTRA</name></cpp:macro> <cpp:value>(110|FF_PROFILE_H264_INTRA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_MULTIVIEW_HIGH</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_422</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_422_INTRA</name></cpp:macro> <cpp:value>(122|FF_PROFILE_H264_INTRA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_STEREO_HIGH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_444</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></cpp:macro> <cpp:value>244</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_HIGH_444_INTRA</name></cpp:macro> <cpp:value>(244|FF_PROFILE_H264_INTRA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_H264_CAVLC_444</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VC1_SIMPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VC1_MAIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VC1_COMPLEX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VC1_ADVANCED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_SIMPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_SIMPLE_SCALABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_CORE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_MAIN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_N_BIT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_SCALABLE_TEXTURE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_HYBRID</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_ADVANCED_REAL_TIME</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_CORE_SCALABLE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_ADVANCED_CODING</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_ADVANCED_CORE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_SIMPLE_STUDIO</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MPEG4_ADVANCED_SIMPLE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_JPEG2000_DCINEMA_2K</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_JPEG2000_DCINEMA_4K</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VP9_0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VP9_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VP9_2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_VP9_3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_HEVC_MAIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_HEVC_MAIN_10</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_HEVC_MAIN_STILL_PICTURE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_HEVC_REXT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AV1_MAIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AV1_HIGH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_AV1_PROFESSIONAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MJPEG_HUFFMAN_EXTENDED_SEQUENTIAL_DCT</name></cpp:macro> <cpp:value>0xc1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MJPEG_HUFFMAN_PROGRESSIVE_DCT</name></cpp:macro> <cpp:value>0xc2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MJPEG_HUFFMAN_LOSSLESS</name></cpp:macro> <cpp:value>0xc3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_MJPEG_JPEG_LS</name></cpp:macro> <cpp:value>0xf7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_SBC_MSBC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_PRORES_PROXY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_PRORES_LT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_PRORES_STANDARD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_PRORES_HQ</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_PRORES_4444</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_PRORES_XQ</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_ARIB_PROFILE_A</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PROFILE_ARIB_PROFILE_C</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_LEVEL_UNKNOWN</name></cpp:macro> <cpp:value>-99</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>enum</name> <name>AVDiscard</name></name></type> <name>skip_loop_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVDiscard</name></name></type> <name>skip_idct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVDiscard</name></name></type> <name>skip_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>subtitle_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subtitle_header_size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_VBV_DELAY</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>uint64_t</name></type> <name>vbv_delay</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_SIDEDATA_ONLY_PKT</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>side_data_only_packets</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>initial_padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>sw_pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>pkt_timebase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>codec_descriptor</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_LOWRES</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>lowres</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts_correction_num_faulty_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts_correction_num_faulty_dts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts_correction_last_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts_correction_last_dts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sub_charenc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_charenc_mode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SUB_CHARENC_MODE_DO_NOTHING</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SUB_CHARENC_MODE_AUTOMATIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SUB_CHARENC_MODE_PRE_DECODER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SUB_CHARENC_MODE_IGNORE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>skip_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_preroll</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_DEBUG_MV</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>debug_mv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MV_P_FOR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MV_B_FOR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEBUG_VIS_MV_B_BACK</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>chroma_intra_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dump_separator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>codec_whitelist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>properties</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_PROPERTY_LOSSLESS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_PROPERTY_CLOSED_CAPTIONS</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>coded_side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_coded_side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_text_format</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SUB_TEXT_FMT_ASS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SUB_TEXT_FMT_ASS_WITH_TIMINGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>trailing_padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_device_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hwaccel_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>apply_cropping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_hw_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>discard_damaged_percentage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>export_side_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodecContext</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODEC_GET_SET</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>AVRational</name></type> <name>av_codec_get_pkt_timebase</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_codec_set_pkt_timebase</name> <parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>av_codec_get_codec_descriptor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_codec_set_codec_descriptor</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>unsigned</name></type> <name>av_codec_get_codec_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LOWRES</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_codec_get_lowres</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_codec_set_lowres</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_codec_get_seek_preroll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_codec_set_seek_preroll</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>uint16_t</name> <modifier>*</modifier></type><name>av_codec_get_chroma_intra_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_codec_set_chroma_intra_matrix</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>AVProfile</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AVProfile</name>;</typedef>

<enum>enum <block>{

<decl><name>AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>AV_CODEC_HW_CONFIG_METHOD_INTERNAL</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>AV_CODEC_HW_CONFIG_METHOD_AD_HOC</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>AVCodecHWConfig</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>methods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>device_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodecHWConfig</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>AVCodecDefault</name></name></type> <name>AVCodecDefault</name>;</typedef>

<struct_decl>struct <name>AVSubtitle</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>AVCodec</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capabilities</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVRational</name> <modifier>*</modifier></type><name>supported_framerates</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>supported_samplerates</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name> <modifier>*</modifier></type><name>sample_fmts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>channel_layouts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_lowres</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>priv_class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>AVProfile</name> <modifier>*</modifier></type><name>profiles</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wrapper_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>priv_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCodec</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_thread_copy</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>update_thread_context</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDefault</name> <modifier>*</modifier></type><name>defaults</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_static_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodec</name></name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>encode_sub</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVSubtitle</name></name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>encode2</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outdata</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outdata_size</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>send_frame</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>receive_packet</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>receive_frame</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>flush</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>caps_internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVCodecHWConfigInternal</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>hw_configs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>codec_tags</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodec</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODEC_GET_SET</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_codec_get_max_lowres</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>MpegEncContext</name>;</struct_decl>

<function_decl><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>avcodec_get_hw_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>AVHWAccel</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capabilities</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>alloc_frame</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>start_frame</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_params</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_slice</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>end_frame</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>frame_priv_data_size</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode_mb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>uninit</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>priv_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>caps_internal</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>frame_params</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>AVHWAccel</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_HWACCEL_CODEC_CAP_EXPERIMENTAL</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_HWACCEL_FLAG_IGNORE_LEVEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>AVPicture</name> <block>{

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name><name>linesize</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>AVPicture</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>AVSubtitleType</name> <block>{

<decl><name>SUBTITLE_NONE</name></decl>,

<decl><name>SUBTITLE_BITMAP</name></decl>, 

<decl><name>SUBTITLE_TEXT</name></decl>,

<decl><name>SUBTITLE_ASS</name></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SUBTITLE_FLAG_FORCED</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AVSubtitleRect</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_colors</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>AVPicture</name></type> <name>pict</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSubtitleType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVSubtitleRect</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVSubtitle</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_display_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_display_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier><modifier>*</modifier></type><name>rects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AVSubtitle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVCodecParameters</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>codec_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_coded_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_raw_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sample_aspect_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>field_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>color_space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_location</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initial_padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trailing_padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_preroll</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodecParameters</name>;</typedef>

<function_decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>av_codec_iterate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_NEXT</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>AVCodec</name> <modifier>*</modifier></type><name>av_codec_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>unsigned</name></type> <name>avcodec_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_NEXT</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>avcodec_register</name><parameter_list>(<parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>avcodec_register_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avcodec_alloc_context3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>avcodec_free_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_GET_CONTEXT_DEFAULTS</name></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>avcodec_get_context_defaults3</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avcodec_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_COPY_CONTEXT</name></expr></cpp:if>

<function_decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avcodec_get_frame_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avcodec_get_subtitle_rect_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avcodec_copy_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>avcodec_parameters_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>avcodec_parameters_free</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier><modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_parameters_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_parameters_from_context</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_parameters_to_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_open2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>avsubtitle_free</name><parameter_list>(<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>av_packet_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>av_packet_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_packet_free</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_init_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_new_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_shrink_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_grow_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grow_by</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_from_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPACKET_OLD_API</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_dup_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_copy_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_copy_packet_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_free_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>av_packet_new_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_add_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_shrink_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>av_packet_get_side_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_MERGE_SD_API</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_packet_merge_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_packet_split_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_packet_side_data_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>av_packet_pack_dictionary</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_unpack_dictionary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_packet_free_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_ref</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_packet_unref</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_packet_move_ref</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_copy_props</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_make_refcounted</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_packet_make_writable</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_packet_rescale_ts</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb_src</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb_dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>avcodec_find_decoder</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>avcodec_find_decoder_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_default_get_buffer2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>avcodec_align_dimensions</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>avcodec_align_dimensions2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>linesize_align</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_enum_to_chroma_pos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ypos</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>avcodec_chroma_pos_to_enum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avcodec_decode_audio4</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avcodec_decode_video2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_decode_subtitle2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_send_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_get_hw_frames_parameters</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>hw_pix_fmt</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_frames_ref</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>AVPictureStructure</name> <block>{

<decl><name>AV_PICTURE_STRUCTURE_UNKNOWN</name></decl>, 

<decl><name>AV_PICTURE_STRUCTURE_TOP_FIELD</name></decl>, 

<decl><name>AV_PICTURE_STRUCTURE_BOTTOM_FIELD</name></decl>, 

<decl><name>AV_PICTURE_STRUCTURE_FRAME</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>AVCodecParserContext</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCodecParser</name></name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_frame_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>repeat_pict</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fetch_timestamp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_PARSER_PTS_NB</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>cur_frame_start_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>cur_frame_offset</name><index>[<expr><name>AV_PARSER_PTS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>cur_frame_pts</name><index>[<expr><name>AV_PARSER_PTS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>cur_frame_dts</name><index>[<expr><name>AV_PARSER_PTS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSER_FLAG_COMPLETE_FRAMES</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSER_FLAG_ONCE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSER_FLAG_FETCHED_OFFSET</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSER_FLAG_USE_CODEC_TS</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>cur_frame_end</name><index>[<expr><name>AV_PARSER_PTS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key_frame</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>attribute_deprecated</name>

<name>int64_t</name></type> <name>convergence_duration</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>dts_sync_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dts_ref_dts_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pts_dts_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>cur_frame_pos</name><index>[<expr><name>AV_PARSER_PTS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>field_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPictureStructure</name></name></type> <name>picture_structure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_picture_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coded_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coded_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodecParserContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVCodecParser</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>codec_ids</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>priv_data_size</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parser_init</name>)<parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parser_parse</name>)<parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>parser_close</name>)<parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>split</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCodecParser</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVCodecParser</name>;</typedef>

<function_decl><type><specifier>const</specifier> <name>AVCodecParser</name> <modifier>*</modifier></type><name>av_parser_iterate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>AVCodecParser</name> <modifier>*</modifier></type><name>av_parser_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecParser</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_register_codec_parser</name><parameter_list>(<parameter><decl><type><name>AVCodecParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>av_parser_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_parser_parse2</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dts</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_parser_change</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_parser_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>avcodec_find_encoder</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>avcodec_find_encoder_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avcodec_encode_audio2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avcodec_encode_video2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_encode_subtitle</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avpicture_alloc</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>avpicture_free</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avpicture_fill</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avpicture_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPicture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>avpicture_get_size</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_picture_copy</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPicture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_picture_crop</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPicture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_band</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_picture_pad</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPicture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>padtop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padbottom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padleft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padright</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_GETCHROMA</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>avcodec_get_chroma_sub_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_shift</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v_shift</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>avcodec_pix_fmt_to_codec_tag</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_get_pix_fmt_loss</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_find_best_pix_fmt_of_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmt_list</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loss_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_find_best_pix_fmt_of_2</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt1</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt2</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loss_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_find_best_pix_fmt2</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt1</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt2</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loss_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_default_get_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_TAG_STRING</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>size_t</name></type> <name>av_get_codec_tag_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>codec_tag</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>avcodec_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_profile_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_profile_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_default_execute</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_default_execute2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_fill_audio_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>avcodec_flush_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_get_bits_per_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>av_get_pcm_codec</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_get_exact_bits_per_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_get_audio_frame_duration</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_get_audio_frame_duration2</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_BSF</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>AVBitStreamFilterContext</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVBitStreamFilter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVBitStreamFilterContext</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVBitStreamFilterContext</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>AVBSFInternal</name></name></type> <name>AVBSFInternal</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVBSFContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVBitStreamFilter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBSFInternal</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base_out</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVBSFContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVBitStreamFilter</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name> <modifier>*</modifier></type><name>codec_ids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>priv_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>priv_data_size</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>flush</name>)<parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>AVBitStreamFilter</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_BSF</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_register_bitstream_filter</name><parameter_list>(<parameter><decl><type><name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>AVBitStreamFilterContext</name> <modifier>*</modifier></type><name>av_bitstream_filter_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_bitstream_filter_filter</name><parameter_list>(<parameter><decl><type><name>AVBitStreamFilterContext</name> <modifier>*</modifier></type><name>bsfc</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_bitstream_filter_close</name><parameter_list>(<parameter><decl><type><name>AVBitStreamFilterContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>av_bitstream_filter_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>av_bsf_get_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>av_bsf_iterate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_NEXT</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>av_bsf_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>av_bsf_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_send_packet</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_bsf_flush</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_bsf_free</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_bsf_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>AVBSFList</name></name></type> <name>AVBSFList</name>;</typedef>

<function_decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>av_bsf_list_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_bsf_list_free</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier><modifier>*</modifier></type><name>lst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_list_append</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_list_append2</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>bsf_name</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_list_finalize</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier><modifier>*</modifier></type><name>lst</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_list_parse_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_bsf_get_null_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_fast_padded_malloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_fast_padded_mallocz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>av_xiphlacing</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_USER_VISIBLE_AVHWACCEL</name></expr></cpp:if>

<function_decl><type><name>attribute_deprecated</name>

<name>void</name></type> <name>av_register_hwaccel</name><parameter_list>(<parameter><decl><type><name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name>

<name>AVHWAccel</name> <modifier>*</modifier></type><name>av_hwaccel_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LOCKMGR</name></expr></cpp:if>

<enum>enum <name>AVLockOp</name> <block>{

<decl><name>AV_LOCK_CREATE</name></decl>, 

<decl><name>AV_LOCK_OBTAIN</name></decl>, 

<decl><name>AV_LOCK_RELEASE</name></decl>, 

<decl><name>AV_LOCK_DESTROY</name></decl>, 

}</block>;</enum>

<function_decl><type><name>attribute_deprecated</name>

<name>int</name></type> <name>av_lockmgr_register</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVLockOp</name></name></type> <name>op</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>avcodec_get_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_get_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avcodec_is_open</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_codec_is_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_codec_is_decoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>avcodec_descriptor_get</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>avcodec_descriptor_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>avcodec_descriptor_get_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>av_cpb_properties_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
