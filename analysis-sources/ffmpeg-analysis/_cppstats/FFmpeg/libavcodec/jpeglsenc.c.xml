<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpeglsenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegls.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>JPEGLSContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred</name></decl>;</decl_stmt>

}</block></struct></type> <name>JPEGLSContext</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ls_encode_regular</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Q</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>map</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>map</name> <operator>=</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;=</operator> <operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>range</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>map</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>err</name> <operator>+</operator> <name>map</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_update_state_regular</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ls_encode_runterm</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>RItype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit_add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Q</name> <init>= <expr><literal type="number">365</literal> <operator>+</operator> <name>RItype</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>RItype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>&lt;</operator> <name>temp</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>map</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>map</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>err</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>RItype</name> <operator>+</operator> <name>map</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>err</name> <operator>-</operator> <name>RItype</name> <operator>-</operator> <name>map</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>limit</name></name> <operator>-</operator> <name>limit_add</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>RItype</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_downscale_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ls_encode_run</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>run</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trail</name> <operator>&amp;&amp;</operator> <name>run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ls_encode_line</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Ra</name></decl>, <decl><type ref="prev"/><name>Rb</name></decl>, <decl><type ref="prev"/><name>Rc</name></decl>, <decl><type ref="prev"/><name>Rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>D0</name></decl>, <decl><type ref="prev"/><name>D1</name></decl>, <decl><type ref="prev"/><name>D2</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Ra</name> <operator>=</operator> <ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><call><name>R</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>Rb</name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Rc</name> <operator>=</operator> <ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>last2</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>Rd</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;=</operator> <name>w</name> <operator>-</operator> <name>stride</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>D0</name> <operator>=</operator> <name>Rd</name> <operator>-</operator> <name>Rb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>D1</name> <operator>=</operator> <name>Rb</name> <operator>-</operator> <name>Rc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>D2</name> <operator>=</operator> <name>Rc</name> <operator>-</operator> <name>Ra</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>D0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>D1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>D2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>RUNval</name></decl>, <decl><type ref="prev"/><name>RItype</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>RUNval</name> <operator>=</operator> <name>Ra</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><call><name>R</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>RUNval</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ls_encode_run</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Rb</name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RItype</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>Ra</name> <operator>-</operator> <name>Rb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><name>RItype</name></expr> ?</condition><then> <expr><name>Ra</name></expr> </then><else>: <expr><name>Rb</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pred</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RItype</name> <operator>&amp;&amp;</operator> <name>Ra</name> <operator>&gt;</operator> <name>Rb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>+</operator> <name>err</name><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>-</operator> <name>err</name><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RItype</name> <operator>||</operator> <operator>(</operator><name>Rb</name> <operator>&gt;=</operator> <name>Ra</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Ra</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>+</operator> <name>err</name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>Ra</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>-</operator> <name>err</name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ls_encode_runterm</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>RItype</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>context</name></decl>;</decl_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>ff_jpegls_quantize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">81</literal> <operator>+</operator>

<call><name>ff_jpegls_quantize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator>

<call><name>ff_jpegls_quantize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>D2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>Ra</name></expr></argument>, <argument><expr><name>Ra</name> <operator>+</operator> <name>Rb</name> <operator>-</operator> <name>Rc</name></expr></argument>, <argument><expr><name>Rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>-</operator><name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>pred</name> <operator>-</operator> <call><name>R</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pred</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>+</operator> <name>err</name><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>-</operator> <name>err</name><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Ra</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>+</operator> <name>err</name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>Ra</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>-</operator> <name>err</name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ls_encode_regular</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ls_store_lse</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JLSState</name></type> <name>state2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state2</name><operator>.</operator><name>bpp</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state2</name><operator>.</operator><name>near</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_reset_coding_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>T1</name></name> <operator>==</operator> <name><name>state2</name><operator>.</operator><name>T1</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>T2</name></name> <operator>==</operator> <name><name>state2</name><operator>.</operator><name>T2</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>T3</name></name> <operator>==</operator> <name><name>state2</name><operator>.</operator><name>T3</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>reset</name></name> <operator>==</operator> <name><name>state2</name><operator>.</operator><name>reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>LSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>T1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>T2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>T3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_picture_ls</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JPEGLSContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name>pict</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>, <decl><type ref="prev"/><name>pb2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>zero</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comps</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>comps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>comps</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>comps</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator>

<name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf2</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>memfail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>SOI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>SOF48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name>comps</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>comps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>comps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>SOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <name>comps</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>comps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>comps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>comps</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JLSState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>memfail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pred</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_reset_coding_parameters</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_init_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_store_lse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>last</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zero</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>memfail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ls_encode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>last</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ls_encode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>last</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>Rc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ls_encode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>, <argument><expr><name>last</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>Rc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Rc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>last</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>Rc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ls_encode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>, <argument><expr><name>last</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>Rc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Rc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>last</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>EOI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>memfail</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init_ls</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>ctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_GRAY16</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_RGB24</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_BGR24</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Only grayscale and RGB24/BGR24 images are supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(JPEGLSContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"pred"</literal></expr>, <expr><literal type="string">"Prediction method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"plane"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"median"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>jpegls_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"jpegls"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_jpegls_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"jpegls"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"JPEG-LS"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_JPEGLS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>JPEGLSContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>jpegls_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init_ls</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_picture_ls</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_RGB24</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
