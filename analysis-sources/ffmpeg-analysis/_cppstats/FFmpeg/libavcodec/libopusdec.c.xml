<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libopusdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opus_multistream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbis.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libopus.h"</cpp:file></cpp:include>

<struct>struct <name>libopus_context</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpusMSDecoder</name> <modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pre_skip</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_GAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<union>union <block>{ <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> }</block> <decl><name>gain</name></decl>;</union>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_PHASE_INVERSION_DISABLED_REQUEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>apply_phase_inv</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_HEAD_SIZE</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libopus_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>libopus_context</name></name> <modifier>*</modifier></type><name>opus</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>channel_map</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gain_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_streams</name></decl>, <decl><type ref="prev"/><name>nb_coupled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mapping_arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avc</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><name><name>avc</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid number of channels %d, defaulting to stereo\n"</literal></expr></argument>, <argument><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avc</name><operator>-&gt;</operator><name>request_sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr> ?</condition><then>

<expr><name>AV_SAMPLE_FMT_FLT</name></expr> </then><else>: <expr><name>AV_SAMPLE_FMT_S16</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><name><name>ff_vorbis_channel_layouts</name><index>[<expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <name>OPUS_HEAD_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opus</name><operator>-&gt;</operator><name>pre_skip</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avc</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_db</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avc</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_map</name> <operator>=</operator> <call><name>AV_RL8</name> <argument_list>(<argument><expr><name><name>avc</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <name>OPUS_HEAD_SIZE</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_streams</name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name>OPUS_HEAD_SIZE</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_coupled</name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name>OPUS_HEAD_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_streams</name> <operator>+</operator> <name>nb_coupled</name> <operator>!=</operator> <name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Inconsistent channel mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>OPUS_HEAD_SIZE</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>channel_map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No channel mapping for %d channels.\n"</literal></expr></argument>, <argument><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_streams</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_coupled</name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <name>mapping_arr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vorbis_offset</name> <init>= <expr><name><name>ff_vorbis_channel_layout_offsets</name><index>[<expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mapping_arr</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>mapping</name><index>[<expr><name><name>vorbis_offset</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <name>mapping_arr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name> <operator>=</operator> <call><name>opus_multistream_decoder_create</name><argument_list>(<argument><expr><name><name>avc</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name>nb_streams</name></expr></argument>, <argument><expr><name>nb_coupled</name></expr></argument>,

<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create decoder: %s\n"</literal></expr></argument>,

<argument><expr><call><name>opus_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_opus_error_to_averror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_GAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opus_multistream_decoder_ctl</name><argument_list>(<argument><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><call><name>OPUS_SET_GAIN</name><argument_list>(<argument><expr><name>gain_db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>OPUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to set gain: %s\n"</literal></expr></argument>,

<argument><expr><call><name>opus_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>gain_lin</name> <init>= <expr><call><name>ff_exp10</name><argument_list>(<argument><expr><name>gain_db</name> <operator>/</operator> <operator>(</operator><literal type="number">20.0</literal> <operator>*</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opus</name><operator>-&gt;</operator><name>gain</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>gain_lin</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opus</name><operator>-&gt;</operator><name>gain</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>gain_lin</name> <operator>*</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_PHASE_INVERSION_DISABLED_REQUEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opus_multistream_decoder_ctl</name><argument_list>(<argument><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>,

<argument><expr><call><name>OPUS_SET_PHASE_INVERSION_DISABLED</name><argument_list>(<argument><expr><operator>!</operator><name><name>opus</name><operator>-&gt;</operator><name>apply_phase_inv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>OPUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Unable to set phase inversion: %s\n"</literal></expr></argument>,

<argument><expr><call><name>opus_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <name><name>opus</name><operator>-&gt;</operator><name>pre_skip</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libopus_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>libopus_context</name></name> <modifier>*</modifier></type><name>opus</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opus_multistream_decoder_destroy</name><argument_list>(<argument><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>(960 * 6)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopus_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>libopus_context</name></name> <modifier>*</modifier></type><name>opus</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>nb_samples</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>MAX_FRAME_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>opus_multistream_decode</name><argument_list>(<argument><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>opus_int16</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>opus_multistream_decode_float</name><argument_list>(<argument><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoding error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>opus_strerror</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_opus_error_to_averror</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_GAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>nb_samples</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>pcm</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pcm</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>*</operator><name>pcm</name> <operator>*</operator> <name><name>opus</name><operator>-&gt;</operator><name>gain</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>pcm</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pcm</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>opus</name><operator>-&gt;</operator><name>gain</name><operator>.</operator><name>i</name></name> <operator>*</operator> <operator>*</operator><name>pcm</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libopus_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>libopus_context</name></name> <modifier>*</modifier></type><name>opus</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opus_multistream_decoder_ctl</name><argument_list>(<argument><expr><name><name>opus</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><name>OPUS_RESET_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <name><name>opus</name><operator>-&gt;</operator><name>pre_skip</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct libopus_context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>libopusdec_options</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_PHASE_INVERSION_DISABLED_REQUEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"apply_phase_inv"</literal></expr>, <expr><literal type="string">"Apply intensity stereo phase inversion"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>apply_phase_inv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>libopusdec_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libopusdec"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>libopusdec_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libopus_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libopus"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libopus Opus"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_OPUS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>libopus_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>libopus_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>libopus_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>libopus_decode</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>libopus_flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>libopusdec_class</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libopus"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
