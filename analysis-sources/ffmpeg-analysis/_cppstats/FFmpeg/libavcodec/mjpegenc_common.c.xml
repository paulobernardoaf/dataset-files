<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mjpegenc_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegtables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc_huffman.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_init_uni_ac_vlc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_size_ac</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uni_ac_vlc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>level</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>run</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alevel</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>run</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>huff_size_ac</name><index>[<expr><literal type="number">0xf0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbits</name><operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>alevel</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">15</literal><operator>&amp;</operator><name>run</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>nbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>huff_size_ac</name><index>[<expr><name>code</name></expr>]</index></name> <operator>+</operator> <name>nbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uni_ac_vlc_len</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_huffman_table</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bits_table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value_table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>table_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>table_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>bits_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>bits_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>value_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>n</name> <operator>+</operator> <literal type="number">17</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jpeg_table_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>ScanTable</name> <modifier>*</modifier></type><name>intra_scantable</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name><name>luma_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name><name>chroma_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>hsample</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_LJPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_LJPEG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>matrix_count</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>luma_intra_matrix</name></expr></argument>,

<argument><expr><name>chroma_intra_matrix</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>luma_intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>force_duplicated_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matrix_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DQT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>matrix_count</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>intra_scantable</name><operator>-&gt;</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>luma_intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>matrix_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>intra_scantable</name><operator>-&gt;</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>chroma_intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><name><name>hsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>huffman</name></name> <operator>==</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>bits_dc_luminance</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>val_dc_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>bits_dc_chrominance</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>val_dc_chrominance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>bits_ac_luminance</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>val_ac_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>bits_ac_chrominance</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>val_ac_chrominance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_dc_luminance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_dc_chrominance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_ac_luminance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_ac_luminance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>put_huffman_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avpriv_mjpeg_bits_ac_chrominance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_ac_chrominance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jpeg_put_comments</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <name><name>sar</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Cannot store exact aspect ratio %d:%d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>APP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_put_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"JFIF"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x0102</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avpriv_put_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name>AVCOL_RANGE_JPEG</name><operator>)</operator>

<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_MPEG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avpriv_put_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CS=ITU601"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"CS=ITU601"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_init_hvsample</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>hsample</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>vsample</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_h_shift</name></decl>, <decl><type ref="prev"/><name>chroma_v_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_h_shift</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>chroma_v_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_LJPEG</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR0</name>

<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGRA</name>

<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>vsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>vsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>vsample</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>hsample</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>&gt;&gt;</operator> <name>chroma_v_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>&gt;&gt;</operator> <name>chroma_v_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>&gt;&gt;</operator> <name>chroma_h_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>&gt;&gt;</operator> <name>chroma_h_shift</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_picture_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><name>ScanTable</name> <modifier>*</modifier></type><name>intra_scantable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name><name>luma_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name><name>chroma_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lossless</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MJPEG</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_AMV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>hsample</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vsample</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>components</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGRA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_matrix</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>luma_intra_matrix</name></expr></argument>,

<argument><expr><name>chroma_intra_matrix</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>luma_intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_init_hvsample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>hsample</name></expr></argument>, <argument><expr><name>vsample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SOI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMV</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>jpeg_put_comments</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jpeg_table_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>intra_scantable</name></expr></argument>, <argument><expr><name>luma_intra_matrix</name></expr></argument>, <argument><expr><name>chroma_intra_matrix</name></expr></argument>, <argument><expr><name>hsample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case> <expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SOF0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_LJPEG</name></expr>:</case> <expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SOF3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lossless</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR0</name>

<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGRA</name>

<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>hsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>vsample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>hsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>vsample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lossless</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>chroma_matrix</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>hsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>vsample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lossless</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>chroma_matrix</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>components</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>hsample</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>vsample</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lossless</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lossless</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>components</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lossless</name></expr> ?</condition><then> <expr><name>pred</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case> <expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><name>AV_CODEC_ID_LJPEG</name></expr>:</case> <expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lossless</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>esc_pos</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>esc_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_picture_frame</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>table_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>huff_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_luminance</name></name></expr>,

<expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_chrominance</name></name></expr>,

<expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_luminance</name></name></expr>,

<expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_chrominance</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>huff_code</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_luminance</name></name></expr>,

<expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_chrominance</name></name></expr>,

<expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_luminance</name></name></expr>,

<expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_chrominance</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_needed</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_bits</name></name> <operator>=</operator> <call><name>get_bits_diff</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_ncode</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>table_id</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total_bits</name> <operator>+=</operator> <name><name>huff_size</name><index>[<expr><name>table_id</name></expr>]</index><index>[<expr><name>code</name></expr>]</index></name> <operator>+</operator> <name>nbits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bytes_needed</name> <operator>=</operator> <operator>(</operator><name>total_bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_reallocate_putbitbuffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bytes_needed</name></expr></argument>, <argument><expr><name>bytes_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_ncode</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>table_id</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>huff_size</name><index>[<expr><name>table_id</name></expr>]</index><index>[<expr><name>code</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>huff_code</name><index>[<expr><name>table_id</name></expr>]</index><index>[<expr><name>code</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>huff_ncode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>=</operator> <call><name>get_bits_diff</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_escape_FF</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ff_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>pb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>align</name><init>= <expr><operator>(</operator><operator>-</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><operator>(</operator><operator>-</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pad</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><name>size</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ff_count</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>align</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ff_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name><operator>-</operator><literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0x0F0F0F0F</literal><operator>)</operator><operator>+</operator><literal type="number">0x01010101</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x10101010</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>+=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0x0F0F0F0F</literal><operator>)</operator><operator>+</operator><literal type="number">0x01010101</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x10101010</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>+=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0x0F0F0F0F</literal><operator>)</operator><operator>+</operator><literal type="number">0x01010101</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x10101010</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">12</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>+=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0x0F0F0F0F</literal><operator>)</operator><operator>+</operator><literal type="number">0x01010101</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x10101010</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>&gt;&gt;=</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>+=</operator> <operator>(</operator><name>acc</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name><operator>+=</operator> <operator>(</operator><name>acc</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ff_count</name><operator>+=</operator> <name>acc</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ff_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>ff_count</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ff_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ff_count</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name><operator>==</operator><literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><name>ff_count</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ff_count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><name>ff_count</name></expr>]</index></name><operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_mjpeg_build_optimal_huffman</name><parameter_list>(<parameter><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>table_id</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegEncHuffmanContext</name></type> <name>dc_luminance_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegEncHuffmanContext</name></type> <name>dc_chrominance_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegEncHuffmanContext</name></type> <name>ac_luminance_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegEncHuffmanContext</name></type> <name>ac_chrominance_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegEncHuffmanContext</name> <modifier>*</modifier></type><name><name>ctx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>dc_luminance_ctx</name></expr>,

<expr><operator>&amp;</operator><name>dc_chrominance_ctx</name></expr>,

<expr><operator>&amp;</operator><name>ac_luminance_ctx</name></expr>,

<expr><operator>&amp;</operator><name>ac_chrominance_ctx</name></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_huffman_init</name><argument_list>(<argument><expr><name><name>ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_ncode</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>table_id</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_huffman_increment</name><argument_list>(<argument><expr><name><name>ctx</name><index>[<expr><name>table_id</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_mjpeg_encode_huffman_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc_luminance_ctx</name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_dc_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_dc_luminance</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_huffman_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc_chrominance_ctx</name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_dc_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_dc_chrominance</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_huffman_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ac_luminance_ctx</name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_ac_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_ac_luminance</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_huffman_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ac_chrominance_ctx</name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_ac_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_ac_chrominance</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_dc_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_dc_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_dc_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_dc_chrominance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_ac_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_ac_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bits_ac_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>val_ac_chrominance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mjpeg_encode_stuffing</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>huffman</name></name> <operator>==</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mjpeg_build_optimal_huffman</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_uni_ac_vlc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_luminance</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>uni_ac_vlc_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_uni_ac_vlc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_chrominance</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>uni_chroma_ac_vlc_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_length</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_last_length</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>uni_ac_vlc_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_length</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_last_length</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>uni_chroma_ac_vlc_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_picture_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_picture_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mpv_reallocate_putbitbuffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">100</literal></expr></argument>,

<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer reallocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_escape_FF</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>esc_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>RST0</name> <operator>+</operator> <operator>(</operator><name>mb_y</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>esc_pos</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_picture_trailer</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><name>header_bits</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EOI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_dc</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>huff_size</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>huff_code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mant</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>huff_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>huff_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nbits</name><operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>huff_size</name><index>[<expr><name>nbits</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>huff_code</name><index>[<expr><name>nbits</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
