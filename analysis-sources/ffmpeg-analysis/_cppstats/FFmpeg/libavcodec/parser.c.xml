<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<function><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>av_parser_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecParser</name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>parser</name> <operator>=</operator> <call><name>av_parser_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>codec_id</name> <operator>||</operator>

<name><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>codec_id</name> <operator>||</operator>

<name><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>codec_id</name> <operator>||</operator>

<name><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>codec_id</name> <operator>||</operator>

<name><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>codec_id</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

<label><name>found</name>:</label>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVCodecParserContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err_out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <operator>(</operator><name>AVCodecParser</name><operator>*</operator><operator>)</operator><name>parser</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err_out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fetch_timestamp</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>parser_init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>parser</name><operator>-&gt;</operator><name>parser_init</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err_out</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>s</name><operator>-&gt;</operator><name>convergence_duration</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>s</name><operator>-&gt;</operator><name>dts_sync_point</name></name> <init>= <expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dts_ref_dts_delta</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts_dts_delta</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

<label><name>err_out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_fetch_timestamp</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fuzzy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fuzzy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_PARSER_PTS_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>+</operator> <name>off</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next_frame_offset</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> 

<name><name>s</name><operator>-&gt;</operator><name>cur_frame_end</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fuzzy</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_dts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_pts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_frame_offset</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>+</operator> <name>off</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_end</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_parser_parse2</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dummy_buf</name><index>[<expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_FETCHED_OFFSET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_frame_offset</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PARSER_FLAG_FETCHED_OFFSET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dummy_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummy_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dummy_buf</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>+</operator> <name>buf_size</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_end</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_start_index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cur_frame_start_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>AV_PARSER_PTS_NB</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_start_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fetch_timestamp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fetch_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fetch_timestamp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>parser_parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>poutbuf</name></expr></argument>,

<argument><expr><name>poutbuf_size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">0x20000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(s-&gt;name &gt; 0 &amp;&amp; avctx-&gt;name &lt;= 0) avctx-&gt;name = s-&gt;name</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FILL</name><argument_list>(<argument><expr><name>field_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>poutbuf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_frame_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_frame_offset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>+</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fetch_timestamp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_offset</name></name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_parser_change</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_LOCAL_HEADER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>split</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keyframe</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_LOCAL_HEADER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>buf_size</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>poutbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>poutbuf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>poutbuf</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,

<argument><expr><name>buf_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_parser_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>parser_close</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>parser_close</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_combine_frame</name><parameter_list>(<parameter><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>next</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"overread %d, state:%"</literal><name>PRIX32</name><literal type="string">" next:%d index:%d o_index:%d\n"</literal></expr></argument>,

<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%X %X %X %X\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <operator>*</operator><name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf_size</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>==</operator> <name>END_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>last_index</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>END_NOT_FOUND</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buffer</name> <init>= <expr><call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>,

<argument><expr><operator>*</operator><name>buf_size</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reallocate parser buffer to %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>buf_size</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <operator>*</operator><name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>next</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator>

<name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buffer</name> <init>= <expr><call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>,

<argument><expr><name>next</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reallocate parser buffer to %d\n"</literal></expr></argument>, <argument><expr><name>next</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name> <operator>=</operator>

<name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <operator>-</operator><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>,

<argument><expr><name>next</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name> <operator>+=</operator> <operator>-</operator><literal type="number">8</literal> <operator>-</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>-</operator><literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>next</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>last_index</name></name> <operator>+</operator> <name>next</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state64</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>state64</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>last_index</name></name> <operator>+</operator> <name>next</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"overread %d, state:%"</literal><name>PRIX32</name><literal type="string">" next:%d index:%d o_index:%d\n"</literal></expr></argument>,

<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%X %X %X %X\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_parse_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpeg4video_split</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0x1B3</literal> <operator>||</operator> <name>state</name> <operator>==</operator> <literal type="number">0x1B6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ptr</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>buf</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
