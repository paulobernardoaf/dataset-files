<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vdpau.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_error</name><parameter_list>(<parameter><decl><type><name>VdpStatus</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VDP_STATUS_OK</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>VDP_STATUS_NO_IMPLEMENTATION</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VDP_STATUS_DISPLAY_PREEMPTED</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VDP_STATUS_INVALID_HANDLE</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VDP_STATUS_INVALID_POINTER</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EFAULT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VDP_STATUS_RESOURCES</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOBUFS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VDP_STATUS_HANDLE_DEVICE_MISMATCH</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EXDEV</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VDP_STATUS_ERROR</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>AVVDPAUContext</name> <modifier>*</modifier></type><name>av_alloc_vdpaucontext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_vdpau_alloc_context</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>MAKE_ACCESSORS</name><argument_list>(<argument>AVVDPAUContext</argument>, <argument>vdpau_hwaccel</argument>, <argument>AVVDPAU_Render2</argument>, <argument>render2</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>av_vdpau_get_surface_parameters</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VdpChromaType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VDP_CHROMA_TYPE_420</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VDP_CHROMA_TYPE_422</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VDP_CHROMA_TYPE_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vdpau_common_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hw_frames</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_vdpau_get_surface_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vdpau_common_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VDPAUHWContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VDPAUContext</name> <modifier>*</modifier></type><name>vdctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurfaceQueryCapabilities</name> <modifier>*</modifier></type><name>surface_query_caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDecoderQueryCapabilities</name> <modifier>*</modifier></type><name>decoder_query_caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDecoderCreate</name> <modifier>*</modifier></type><name>create</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpGetInformationString</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpBool</name></type> <name>supported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_level</name></decl>, <decl><type ref="prev"/><name>max_mb</name></decl>, <decl><type ref="prev"/><name>max_width</name></decl>, <decl><type ref="prev"/><name>max_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_vdpau_get_surface_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hwctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>decoder</name></name> <operator>!=</operator> <name>VDP_INVALID_HANDLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>decoder</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>render</name></name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>render</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>get_proc_address</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_FLAG_IGNORE_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hwctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>type</name> <operator>!=</operator> <name>VDP_CHROMA_TYPE_420</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVDPAUDeviceContext</name> <modifier>*</modifier></type><name>dev_ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_get_hw_frames_ctx</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_HWDEVICE_TYPE_VDPAU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dev_ctx</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name><name>dev_ctx</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name> <operator>=</operator> <name><name>dev_ctx</name><operator>-&gt;</operator><name>get_proc_address</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_flags</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_FLAG_IGNORE_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_FUNC_ID_GET_INFORMATION_STRING</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>info_string</name></expr></argument>, <argument><expr><literal type="string">"NVIDIA "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_flags</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>driver_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>info_string</name></expr></argument>, <argument><expr><literal type="string">"NVIDIA VDPAU Driver Shared Library %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>driver_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>driver_version</name> <operator>&lt;</operator> <literal type="number">410</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"HEVC with NVIDIA VDPAU drivers is buggy, skipping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>surface_query_caps</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>surface_query_caps</name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>supported</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>max_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>supported</name> <operator>!=</operator> <name>VDP_TRUE</name> <operator>||</operator>

<name>max_width</name> <operator>&lt;</operator> <name>width</name> <operator>||</operator> <name>max_height</name> <operator>&lt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>decoder_query_caps</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>decoder_query_caps</name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>supported</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_level</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>max_mb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_CONSTRAINED_BASELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name> <operator>||</operator> <name>supported</name> <operator>!=</operator> <name>VDP_TRUE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>profile</name> <operator>==</operator> <name>VDP_DECODER_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_MAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>decoder_query_caps</name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>supported</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>max_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_mb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>max_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>supported</name> <operator>!=</operator> <name>VDP_TRUE</name> <operator>||</operator> <name>max_level</name> <operator>&lt;</operator> <name>level</name> <operator>||</operator>

<name>max_width</name> <operator>&lt;</operator> <name>width</name> <operator>||</operator> <name>max_height</name> <operator>&lt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>VDP_FUNC_ID_DECODER_CREATE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>create</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>VDP_FUNC_ID_DECODER_RENDER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>render</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vdctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>VDP_STATUS_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vdpau_common_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VDPAUContext</name> <modifier>*</modifier></type><name>vdctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDecoderDestroy</name> <modifier>*</modifier></type><name>destroy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>VDP_INVALID_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>vdctx</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name>UINT32_MAX</name> <operator>&amp;&amp;</operator> <name><name>vdctx</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_FUNC_ID_DECODER_DESTROY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>destroy</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>destroy</name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_vdpau_common_reinit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VDPAUHWContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VDPAUContext</name> <modifier>*</modifier></type><name>vdctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vdctx</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>VDP_INVALID_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>==</operator> <name><name>vdctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>==</operator> <name><name>vdctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>hwctx</name> <operator>||</operator> <operator>!</operator><name><name>hwctx</name><operator>-&gt;</operator><name>reset</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>uninit</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vdpau_common_start_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vdpau_common_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VDPAUContext</name> <modifier>*</modifier></type><name>vdctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVDPAUContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surf</name> <init>= <expr><call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_common_reinit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hwctx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hwctx</name><operator>-&gt;</operator><name>render</name></name> <operator>&amp;&amp;</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>render2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>hwctx</name><operator>-&gt;</operator><name>render2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,

<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_used</name></name></expr></argument>, <argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vdctx</name><operator>-&gt;</operator><name>render</name></name><argument_list>(<argument><expr><name><name>vdctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>surf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,

<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_used</name></name></expr></argument>,

<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vdpau_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG1_VDPAU_HWACCEL</name> <operator>||</operator> <name>CONFIG_MPEG2_VDPAU_HWACCEL</name> <operator>||</operator> <name>CONFIG_MPEG4_VDPAU_HWACCEL</name> <operator>||</operator> <name>CONFIG_VC1_VDPAU_HWACCEL</name> <operator>||</operator> <name>CONFIG_WMV3_VDPAU_HWACCEL</name></expr></cpp:if>

<function><type><name>int</name></type> <name>ff_vdpau_mpeg_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg_draw_horiz_band</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>ff_vdpau_add_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpBitstreamBuffer</name> <modifier>*</modifier></type><name>buffers</name> <init>= <expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buffers</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name>buffers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_allocated</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_used</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buffers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffers</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers</name></name> <operator>=</operator> <name>buffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffers</name> <operator>+=</operator> <name><name>pic_ctx</name><operator>-&gt;</operator><name>bitstream_buffers_used</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffers</name><operator>-&gt;</operator><name>struct_version</name></name> <operator>=</operator> <name>VDP_BITSTREAM_BUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffers</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffers</name><operator>-&gt;</operator><name>bitstream_bytes</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_VDPAU_PROFILE</name></expr></cpp:if>

<function><type><name>int</name></type> <name>av_vdpau_get_profile</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VdpDecoderProfile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE</name><parameter_list>(<parameter><type><name>prof</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { *profile = VDP_DECODER_PROFILE_##prof; return 0; } while (0)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_MPEG2_MAIN</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>MPEG2_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FF_PROFILE_MPEG2_SIMPLE</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>MPEG2_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>MPEG4_PART2_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_MPEG4_SIMPLE</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>MPEG4_PART2_SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FF_PROFILE_MPEG4_ADVANCED_SIMPLE</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>MPEG4_PART2_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;</operator> <operator>~</operator><name>FF_PROFILE_H264_INTRA</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_H264_BASELINE</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>H264_BASELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>:</case>

<case>case <expr><name>FF_PROFILE_H264_MAIN</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>H264_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FF_PROFILE_H264_HIGH</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>H264_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>FF_PROFILE_H264_EXTENDED</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>H264_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><name>AV_CODEC_ID_WMV3</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_VC1</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_VC1_SIMPLE</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>VC1_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FF_PROFILE_VC1_MAIN</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>VC1_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FF_PROFILE_VC1_ADVANCED</name></expr>:</case> <expr_stmt><expr><call><name>PROFILE</name><argument_list>(<argument><expr><name>VC1_ADVANCED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROFILE</name></cpp:undef>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>AVVDPAUContext</name> <modifier>*</modifier></type><name>av_vdpau_alloc_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VDPAUHWContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_vdpau_bind_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,

<parameter><decl><type><name>VdpGetProcAddress</name> <modifier>*</modifier></type><name>get_proc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VDPAUHWContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>AV_HWACCEL_FLAG_IGNORE_LEVEL</name><operator>|</operator><name>AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hwctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hwctx</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hwctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hwctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>decoder</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>get_proc_address</name></name> <operator>=</operator> <name>get_proc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
