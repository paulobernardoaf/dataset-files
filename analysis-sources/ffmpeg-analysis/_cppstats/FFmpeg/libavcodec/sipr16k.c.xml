<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sipr16k.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sipr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sipr16kdata.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf2lsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>cbs</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>cbs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>cbs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>idx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_decode_fp_16k</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>lsf_history</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>isp_new</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ma_pred</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>isp_q</name><index>[<expr><name>LP_FILTER_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dequant</name><argument_list>(<argument><expr><name>isp_q</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>, <argument><expr><name>lsf_codebooks_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>isp_new</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>qu</name><index>[<expr><name>ma_pred</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>isp_q</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>+</operator> <name><name>qu</name><index>[<expr><name>ma_pred</name></expr>]</index></name> <operator>*</operator> <name><name>lsf_history</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>+</operator> <name><name>mean_lsf_16k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lsf_history</name></expr></argument>, <argument><expr><name>isp_q</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dec_delay3_1st</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">390</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>index</name> <operator>+</operator> <literal type="number">88</literal></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <name>index</name> <operator>-</operator> <literal type="number">690</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dec_delay3_2nd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pit_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pit_max</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pitch_lag_prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">62</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_min</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>pitch_lag_prev</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>,

<argument><expr><name>pit_min</name></expr></argument>, <argument><expr><name>pit_max</name> <operator>-</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <name>pitch_delay_min</name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <name>pitch_lag_prev</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>postfilter</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out_data</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>synth</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>iir_mem</name></decl></parameter>,

<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name><name>filt_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>mem_preemph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal> <operator>+</operator> <name>LP_FILTER_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>LP_FILTER_ORDER_16k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filt_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>iir_mem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_pow_0_5</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmpbuf</name> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>, <argument><expr><name>mem_preemph</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name><name>filt_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth</name> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>, <argument><expr><name>mem_preemph</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>synth</name></expr></argument>, <argument><expr><name><name>filt_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_data</name> <operator>+</operator> <literal type="number">30</literal> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>,

<argument><expr><name>synth</name> <operator>+</operator> <literal type="number">30</literal> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>out_data</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><name><name>filt_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>synth</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>L_SUBFR_16k</name> <operator>-</operator> <literal type="number">30</literal></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem_preemph</name></expr></argument>, <argument><expr><name>out_data</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>L_SUBFR_16k</name> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>filt_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>filt_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name> <operator>+=</operator> <literal type="number">1.0</literal><operator>/</operator><literal type="number">30</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmpbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>s</name> <operator>*</operator> <operator>(</operator><name><name>synth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>tmpbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acelp_lp_decodef</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lp_1st</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lp_2nd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsp_2nd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsp_prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>lsp_1st</name><index>[<expr><name>LP_FILTER_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsp_1st</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lsp_2nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>lsp_prev</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name>lsp_1st</name></expr></argument>, <argument><expr><name>lp_1st</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name>lsp_2nd</name></expr></argument>, <argument><expr><name>lp_2nd</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>acelp_decode_gain_codef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gain_corr_factor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>fc_v</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mr_energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>quant_energy</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ma_prediction_coeff</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ma_pred_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>mr_energy</name> <operator>+=</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>quant_energy</name></expr></argument>, <argument><expr><name>ma_prediction_coeff</name></expr></argument>,

<argument><expr><name>ma_pred_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mr_energy</name> <operator>=</operator> <name>gain_corr_factor</name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><name>M_LN10</name> <operator>/</operator> <literal type="number">20.</literal> <operator>*</operator> <name>mr_energy</name></expr></argument>)</argument_list></call> <operator>/</operator>

<call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">0.01</literal> <operator>+</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>fc_v</name></expr></argument>, <argument><expr><name>fc_v</name></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mr_energy</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVIDE_BY_3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * 10923 &gt;&gt; 15)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_sipr_decode_frame_16k</name><parameter_list>(<parameter><decl><type><name>SiprContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SiprParameters</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><name>SUBFRAME_COUNT_16k</name> <operator>*</operator> <name>L_SUBFR_16k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>synth</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>synth_buf</name></name> <operator>+</operator> <name>LP_FILTER_ORDER_16k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_new</name><index>[<expr><name>LP_FILTER_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>lsp_new</name><index>[<expr><name>LP_FILTER_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>Az</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>LP_FILTER_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>fixed_vector</name><index>[<expr><name>L_SUBFR_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pitch_fac</name></decl>, <decl><type ref="prev"/><name>gain_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_3x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <literal type="number">292</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lsf_decode_fp_16k</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsf_history</name></name></expr></argument>, <argument><expr><name>lsf_new</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>vq_indexes</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>ma_pred_switch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_min_dist_lsf</name><argument_list>(<argument><expr><name>lsf_new</name></expr></argument>, <argument><expr><name>LSFQ_DIFF_MIN</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>LP_FILTER_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsf2lsp</name><argument_list>(<argument><expr><name>lsf_new</name></expr></argument>, <argument><expr><name>lsp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>acelp_lp_decodef</name><argument_list>(<argument><expr><name><name>Az</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Az</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsp_new</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp_history_16k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp_history_16k</name></name></expr></argument>, <argument><expr><name>lsp_new</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth</name> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_COUNT_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_subfr</name> <init>= <expr><name>i</name> <operator>*</operator> <name>L_SUBFR_16k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMRFixed</name></type> <name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain_corr_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch_delay_frac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <call><name>dec_delay3_1st</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>pitch_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pitch_delay_3x</name> <operator>=</operator> <call><name>dec_delay3_2nd</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>pitch_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>PITCH_MIN</name></expr></argument>, <argument><expr><name>PITCH_MAX</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_lag_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pitch_fac</name> <operator>=</operator> <name><name>gain_pitch_cb_16k</name><index>[<expr><name><name>params</name><operator>-&gt;</operator><name>gp_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>.</operator><name>pitch_fac</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>pitch_fac</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>.</operator><name>pitch_lag</name></name> <operator>=</operator> <call><name>DIVIDE_BY_3</name><argument_list>(<argument><expr><name>pitch_delay_3x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_lag_prev</name></name> <operator>=</operator> <name><name>f</name><operator>.</operator><name>pitch_lag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch_delay_int</name> <operator>=</operator> <call><name>DIVIDE_BY_3</name><argument_list>(<argument><expr><name>pitch_delay_3x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch_delay_frac</name> <operator>=</operator> <name>pitch_delay_3x</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>pitch_delay_int</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_interpolatef</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>i_subfr</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>i_subfr</name></expr>]</index></name> <operator>-</operator> <name>pitch_delay_int</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>sinc_win</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>pitch_delay_frac</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>, <argument><expr><name>L_SUBFR_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fixed_vector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fixed_vector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_decode_10_pulses_35bits</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>fc_indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>,

<argument><expr><name>ff_fc_4pulses_8bits_tracks_13</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_fixed_vector</name><argument_list>(<argument><expr><name>fixed_vector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>L_SUBFR_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_corr_factor</name> <operator>=</operator> <name><name>gain_cb_16k</name><index>[<expr><name><name>params</name><operator>-&gt;</operator><name>gc_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_code</name> <operator>=</operator> <name>gain_corr_factor</name> <operator>*</operator>

<call><name>acelp_decode_gain_codef</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>L_SUBFR_16k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fixed_vector</name></expr></argument>,

<argument><expr><literal type="number">19.0</literal> <operator>-</operator> <literal type="number">15.0</literal><operator>/</operator><operator>(</operator><literal type="number">0.05</literal><operator>*</operator><name>M_LN10</name><operator>/</operator><name>M_LN2</name><operator>)</operator></expr></argument>,

<argument><expr><name>pred_16k</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>energy_history</name></name></expr></argument>,

<argument><expr><name>L_SUBFR_16k</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>energy_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>energy_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>energy_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10f</name><argument_list>(<argument><expr><name>gain_corr_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_weighted_vector_sumf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>i_subfr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>i_subfr</name></expr>]</index></name></expr></argument>,

<argument><expr><name>fixed_vector</name></expr></argument>, <argument><expr><name>pitch_fac</name></expr></argument>,

<argument><expr><name>gain_code</name></expr></argument>, <argument><expr><name>L_SUBFR_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>synth</name> <operator>+</operator> <name>i_subfr</name></expr></argument>, <argument><expr><name><name>Az</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>i_subfr</name></expr>]</index></name></expr></argument>, <argument><expr><name>L_SUBFR_16k</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>synth</name> <operator>+</operator> <name>frame_size</name> <operator>-</operator> <name>LP_FILTER_ORDER_16k</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>L_SUBFR_16k</name></expr></argument>,

<argument><expr><operator>(</operator><name>L_INTERPOL</name><operator>+</operator><name>PITCH_MAX</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>postfilter</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iir_mem</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filt_mem</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mem_preemph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iir_mem</name></name></expr></argument>, <argument><expr><name><name>Az</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sipr_init_16k</name><parameter_list>(<parameter><decl><type><name>SiprContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp_history_16k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name><operator>/</operator><operator>(</operator><name>LP_FILTER_ORDER_16k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filt_mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>filt_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filt_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>filt_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_lag_prev</name></name> <operator>=</operator> <literal type="number">180</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
