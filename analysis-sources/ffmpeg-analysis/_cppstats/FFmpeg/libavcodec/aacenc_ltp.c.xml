<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc_ltp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_ltp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_quantization.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_aac_encode_ltp_info</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>common_window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_AAC_LTP</name> <operator>||</operator> <operator>!</operator><name><name>ics</name><operator>-&gt;</operator><name>predictor_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>common_window</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>ltp</name><operator>.</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ics</name><operator>-&gt;</operator><name>ltp</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>ltp</name><operator>.</operator><name>lag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>ltp</name><operator>.</operator><name>coef_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>ltp</name><operator>.</operator><name>used</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_ltp_insert_new_frame</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>chans</name></decl>, <decl><type ref="prev"/><name>cur_channel</name></decl>, <decl><type ref="prev"/><name>start_ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpe</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <ternary><condition><expr><name>tag</name> <operator>==</operator> <name>TYPE_CPE</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_channel</name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>cur_channel</name></expr>]</index><index>[<expr><literal type="number">2048</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>lag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start_ch</name> <operator>+=</operator> <name>chans</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_lag</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>LongTermPrediction</name> <modifier>*</modifier></type><name>ltp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>lag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_corr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max_ratio</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>corr</name></decl>, <decl><type ref="prev"/><name>s0</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s0</name> <operator>+=</operator> <name><name>new</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name><name>buf</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><name>idx</name></expr>]</index></name><operator>*</operator><name><name>buf</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>corr</name> <operator>=</operator> <ternary><condition><expr><name>s1</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><name>s0</name><operator>/</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>corr</name> <operator>&gt;</operator> <name>max_corr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_corr</name> <operator>=</operator> <name>corr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_ratio</name> <operator>=</operator> <name>corr</name><operator>/</operator><operator>(</operator><literal type="number">2048</literal><operator>-</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>lag</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>coef_idx</name></name> <operator>=</operator> <call><name>quant_array_idx</name><argument_list>(<argument><expr><name>max_ratio</name></expr></argument>, <argument><expr><name>ltp_coef</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>coef</name></name> <operator>=</operator> <name><name>ltp_coef</name><index>[<expr><name><name>ltp</name><operator>-&gt;</operator><name>coef_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_samples</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>LongTermPrediction</name> <modifier>*</modifier></type><name>ltp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>samples_num</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samples_num</name> <operator>=</operator> <name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ltp</name><operator>-&gt;</operator><name>coef</name></name><operator>*</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2048</literal> <operator>-</operator> <name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2048</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_update_ltp</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pred_signal</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_AAC_LTP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_lag</name><argument_list>(<argument><expr><name>pred_signal</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_samples</name><argument_list>(<argument><expr><name>pred_signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_adjust_common_ltp</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name> <operator>||</operator>

<name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name> <operator>||</operator>

<name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>+</operator> <name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_search_for_ltp</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>common_window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saved_bits</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">15</literal> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>C34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>PCD</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>PCD34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_ltp</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>lag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3072</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LongTermPrediction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>lag</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>&gt;</operator> <literal type="number">120.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bits2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dist2</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name> <operator>&gt;</operator> <name>max_ltp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits_tmp1</name></decl>, <decl><type ref="prev"/><name>bits_tmp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>PCD</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sce</name><operator>-&gt;</operator><name>lcoeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>C34</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>PCD34</name></expr></argument>, <argument><expr><name>PCD</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>C34</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>/</operator><name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits_tmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>PCD</name></expr></argument>, <argument><expr><name>PCD34</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>/</operator><name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits_tmp2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits1</name> <operator>+=</operator> <name>bits_tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits2</name> <operator>+=</operator> <name>bits_tmp2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>dist1</name> <operator>&amp;&amp;</operator> <name>bits2</name> <operator>&lt;</operator> <name>bits1</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>sce</name><operator>-&gt;</operator><name>lcoeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_bits</name> <operator>+=</operator> <name>bits1</name> <operator>-</operator> <name>bits2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>saved_bits</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>lcoeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
