<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\alsdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgmc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlz.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/softfloat_ieee754.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>parcor_rice_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{<expr><operator>-</operator><literal type="number">52</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">29</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{<expr><operator>-</operator><literal type="number">58</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">42</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">29</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{<expr><operator>-</operator><literal type="number">59</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">45</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">38</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">39</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">30</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>parcor_scaled_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1048544</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1048288</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1047776</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1047008</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">1045984</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1044704</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1043168</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1041376</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">1039328</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1037024</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1034464</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1031648</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">1028576</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1025248</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1021664</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1017824</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">1013728</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1009376</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">1004768</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">999904</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">994784</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">989408</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">983776</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">977888</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">971744</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">965344</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">958688</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">951776</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">944608</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">937184</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">929504</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">921568</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">913376</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">904928</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">896224</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">887264</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">878048</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">868576</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">858848</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">848864</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">838624</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">828128</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">817376</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">806368</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">795104</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">783584</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">771808</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">759776</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">747488</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">734944</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">722144</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">709088</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">695776</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">682208</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">668384</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">654304</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">639968</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">625376</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">610528</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">595424</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">580064</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">564448</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">548576</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">532448</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">516064</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">499424</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">482528</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">465376</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">447968</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">430304</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">412384</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">394208</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">375776</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">357088</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">338144</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">318944</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">299488</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">279776</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">259808</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">239584</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">219104</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">198368</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">177376</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">156128</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">134624</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">112864</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">90848</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">68576</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">46048</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">23264</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">224</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">23072</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">46624</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">70432</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">94496</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">118816</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">143392</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">168224</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">193312</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">218656</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">244256</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">270112</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">296224</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">322592</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">349216</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">376096</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">403232</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">430624</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">458272</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">486176</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">514336</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">542752</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">571424</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">600352</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">629536</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">658976</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">688672</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">718624</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">748832</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">779296</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">810016</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">840992</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">872224</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">903712</literal> <operator>/</operator> <literal type="number">32</literal></expr>,

<expr><literal type="number">935456</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">967456</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">999712</literal> <operator>/</operator> <literal type="number">32</literal></expr>, <expr><literal type="number">1032224</literal> <operator>/</operator> <literal type="number">32</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ltp_gain_values</name> <index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">64</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">82</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">88</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">100</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>mcc_weightings</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">204</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">115</literal></expr>,

<expr><literal type="number">102</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">76</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>,

<expr><operator>-</operator><literal type="number">102</literal></expr>, <expr><operator>-</operator><literal type="number">115</literal></expr>, <expr><operator>-</operator><literal type="number">128</literal></expr>, <expr><operator>-</operator><literal type="number">140</literal></expr>, <expr><operator>-</operator><literal type="number">153</literal></expr>, <expr><operator>-</operator><literal type="number">166</literal></expr>, <expr><operator>-</operator><literal type="number">179</literal></expr>, <expr><operator>-</operator><literal type="number">192</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>tail_code</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">74</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">68</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">126</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">132</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">124</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">120</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">116</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">108</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">102</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">88</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">162</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">156</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">150</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">142</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">131</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>RA_Flag</name> <block>{

<decl><name>RA_FLAG_NONE</name></decl>,

<decl><name>RA_FLAG_FRAMES</name></decl>,

<decl><name>RA_FLAG_HEADER</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ALSSpecificConfig</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>resolution</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>floating</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>msb_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ra_distance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>RA_Flag</name></name></type> <name>ra_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>adapt_order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>coef_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>long_term_prediction</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>block_switching</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bgmc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sb_part</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>joint_stereo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mc_coding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chan_config</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chan_sort</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rlslms</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chan_config_info</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>chan_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>crc_enabled</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ALSSpecificConfig</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALSChannelData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>stop_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>master_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_diff_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_diff_sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_diff_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>weighting</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ALSChannelData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALSDecContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSSpecificConfig</name></type> <name>sconf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc_org</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cur_frame_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>js_switch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cs_switch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bgmc_lut</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bgmc_lut_status</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ltp_lag_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>const_block</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>shift_lsbs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>opt_order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>store_prev_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>use_ltp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ltp_lag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>ltp_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ltp_gain_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>quant_cof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>quant_cof_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lpc_cof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lpc_cof_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lpc_cof_reversed_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ALSChannelData</name> <modifier>*</modifier><modifier>*</modifier></type><name>chan_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ALSChannelData</name> <modifier>*</modifier></type><name>chan_data_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>reverted_channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>prev_raw_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>raw_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>raw_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>crc_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MLZ</name><modifier>*</modifier></type> <name>mlz</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SoftFloat_IEEE754</name> <modifier>*</modifier></type><name>acf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last_acf_mantissa</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>shift_value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last_shift_value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>raw_mantissa</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>larray</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nbits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>highest_decoded_channel</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALSDecContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALSBlockData</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ra_block</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>const_block</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>js_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>shift_lsbs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>opt_order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>store_prev_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>use_ltp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ltp_lag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ltp_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>quant_cof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lpc_cof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>raw_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>prev_raw_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>raw_other</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ALSBlockData</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dprint_specific_config</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"resolution = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"floating = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>floating</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"frame_length = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ra_distance = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>ra_distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ra_flag = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>ra_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"adapt_order = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>adapt_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"coef_table = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>coef_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"long_term_prediction = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>long_term_prediction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"max_order = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"block_switching = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>block_switching</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"bgmc = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"sb_part = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>sb_part</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"joint_stereo = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>joint_stereo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"mc_coding = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"chan_config = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"chan_sort = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_sort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"RLSLMS = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>rlslms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"chan_config_info = %i\n"</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_config_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>read_specific_config</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ht_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>config_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG4AudioConfig</name></type> <name>m4ac</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>als_id</name></decl>, <decl><type ref="prev"/><name>header_size</name></decl>, <decl><type ref="prev"/><name>trailer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>config_offset</name> <operator>=</operator> <call><name>avpriv_mpeg4audio_get_config2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m4ac</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>config_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><literal type="number">30</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>als_id</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>m4ac</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>floating</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>msb_first</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>ra_distance</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>ra_flag</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>adapt_order</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>coef_table</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>long_term_prediction</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>block_switching</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>sb_part</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>joint_stereo</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_config</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_sort</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>crc_enabled</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>rlslms</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>als_id</name> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>FF_SANE_NB_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Huge number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_config</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_config_info</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_sort</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chan_pos_bits</name> <init>= <expr><call><name>av_ceil_log2</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_needed</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>chan_pos_bits</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>bits_needed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sconf</name><operator>-&gt;</operator><name>chan_pos</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sconf</name><operator>-&gt;</operator><name>chan_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cs_switch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chan_pos_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator> <name><name>sconf</name><operator>-&gt;</operator><name>chan_pos</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel reordering.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cs_switch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sconf</name><operator>-&gt;</operator><name>chan_pos</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>trailer_size</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailer_size</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>trailer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ht_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>header_size</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>trailer_size</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ht_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ht_size</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ht_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>crc_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_CRCCHECK</name><operator>|</operator><name>AV_EF_CAREFUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc_table</name></name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc_org</name></name> <operator>=</operator> <operator>~</operator><call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dprint_specific_config</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_specific_config</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MISSING_ERR</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>errval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (cond) { avpriv_report_missing_feature(ctx-&gt;avctx, str); error = errval; } }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>MISSING_ERR</name><argument_list>(<argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>rlslms</name></name></expr></argument>, <argument><expr><literal type="string">"Adaptive RLS-LMS prediction"</literal></expr></argument>, <argument><expr><name>AVERROR_PATCHWELCOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_bs_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bs_info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>div</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>div_blocks</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_blocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>bs_info</name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x40000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>div</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_bs_info</name><argument_list>(<argument><expr><name>bs_info</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>div</name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_bs_info</name><argument_list>(<argument><expr><name>bs_info</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>div</name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>div_blocks</name> <operator>=</operator> <name>div</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>div_blocks</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_blocks</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>decode_rice</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>q</name> <init>= <expr><call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>!</operator><operator>(</operator><name>q</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>r</name></expr> ?</condition><then> <expr><name>q</name></expr> </then><else>: <expr><operator>~</operator><name>q</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parcor_to_lpc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>cof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp1</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>MUL64</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cof</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cof</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><call><name>MUL64</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cof</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cof</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>tmp1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cof</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><call><name>MUL64</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cof</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_block_sizes</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>div_blocks</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>bs_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ptr_div_blocks</name> <init>= <expr><name>div_blocks</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>block_switching</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bs_info_len</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sconf</name><operator>-&gt;</operator><name>block_switching</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>bs_info</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bs_info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bs_info</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>bs_info_len</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_bs_info</name><argument_list>(<argument><expr><operator>*</operator><name>bs_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr_div_blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sconf</name><operator>.</operator><name>frame_length</name></name> <operator>&gt;&gt;</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sconf</name><operator>.</operator><name>frame_length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>remaining</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_const_block_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>const_block</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>js_blocks</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>const_block</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>const_val_bits</name> <init>= <expr><ternary><condition><expr><name><name>sconf</name><operator>-&gt;</operator><name>floating</name></name></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>=</operator> <call><name>get_sbits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>const_val_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>const_block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_const_block_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>smp</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name> <init>= <expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>smp</name></expr>;</condition> <incr><expr><name>smp</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_var_block_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>sx</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sub_blocks</name></decl>, <decl><type ref="prev"/><name>log2_sub_blocks</name></decl>, <decl><type ref="prev"/><name>sb_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>opt_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>quant_cof</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>quant_cof</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>current_res</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>const_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>js_blocks</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sconf</name><operator>-&gt;</operator><name>sb_part</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>log2_sub_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name> <operator>&amp;&amp;</operator> <name><name>sconf</name><operator>-&gt;</operator><name>sb_part</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>log2_sub_blocks</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>log2_sub_blocks</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sub_blocks</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_sub_blocks</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>&amp;</operator> <operator>(</operator><name>sub_blocks</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Block length is not evenly divisible by the number of subblocks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sb_length</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>&gt;&gt;</operator> <name>log2_sub_blocks</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"k invalid for rice code.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>=</operator> <operator>(</operator><name><name>bd</name><operator>-&gt;</operator><name>js_blocks</name></name> <operator>&amp;&amp;</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_other</name></name><operator>)</operator> <operator>||</operator> <operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sconf</name><operator>-&gt;</operator><name>rlslms</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>adapt_order</name></name> <operator>&amp;&amp;</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_order_length</name> <init>= <expr><call><name>av_ceil_log2</name><argument_list>(<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>opt_order_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>&gt;</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Predictor order too large.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_order</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>add_base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>coef_table</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add_base</name> <operator>=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>parcor_scaled_values</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_order</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">32</literal> <operator>*</operator> <name><name>parcor_scaled_values</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>opt_order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k_max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>add_base</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k_max</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>opt_order</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k_max</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rice_param</name> <init>= <expr><name><name>parcor_rice_table</name><index>[<expr><name><name>sconf</name><operator>-&gt;</operator><name>coef_table</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>parcor_rice_table</name><index>[<expr><name><name>sconf</name><operator>-&gt;</operator><name>coef_table</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rice_param</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">64</literal> <operator>||</operator> <name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"quant_cof %"</literal><name>PRId32</name><literal type="string">" is out of range.\n"</literal></expr></argument>,

<argument><expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>k_max</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>opt_order</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k_max</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>opt_order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>parcor_scaled_values</name><index>[<expr><name><name>quant_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_order</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">32</literal> <operator>*</operator> <name><name>parcor_scaled_values</name><index>[<expr><name><name>quant_cof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>opt_order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>quant_cof</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>add_base</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>long_term_prediction</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>use_ltp</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"r overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ltp_gain_values</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>+=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>opt_order</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>-&gt;</operator><name>ra_block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>opt_order</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>sb_length</name> <operator>&lt;=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb_length</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sub block length smaller or equal start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_order</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_order</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s_max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_order</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s_max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>delta</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>k</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><call><name>av_ceil_log2</name><argument_list>(<argument><expr><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_bgmc_decode_init</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_res</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sb_len</name> <init>= <expr><name>sb_length</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>sb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>start</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>k</name> <index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>-</operator> <name>b</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>delta</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal> <operator>-</operator> <name><name>s</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_bgmc_decode</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>sb_len</name></expr></argument>, <argument><expr><name>current_res</name></expr></argument>,

<argument><expr><name><name>delta</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sx</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bgmc_lut</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bgmc_lut_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_res</name> <operator>+=</operator> <name>sb_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_bgmc_decode_end</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_res</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr><operator>,</operator> <expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cur_tail_code</name> <init>= <expr><name><name>tail_code</name><index>[<expr><name><name>sx</name><index>[<expr><name>sb</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>delta</name><index>[<expr><name>sb</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cur_k</name> <init>= <expr><name><name>k</name><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cur_s</name> <init>= <expr><name><name>s</name><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>sb_length</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><operator>*</operator><name>current_res</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>cur_tail_code</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_msb</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>sx</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sx</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator>

<operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>delta</name><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>cur_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>max_msb</name> <operator>)</operator> <operator>&lt;&lt;</operator> <name>cur_k</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>-=</operator> <operator>(</operator><name>max_msb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>cur_k</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <name>cur_tail_code</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>*=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>cur_k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>cur_k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>current_res</name><operator>++</operator> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>current_res</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>sub_blocks</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr><operator>,</operator> <expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>sb_length</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>current_res</name><operator>++</operator> <operator>=</operator> <call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_var_block_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_length</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>smp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_order</name> <init>= <expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>quant_cof</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>quant_cof</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lpc_cof</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>lpc_cof</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>raw_samples</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>raw_samples_end</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>+</operator> <name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lpc_cof_reversed</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_reversed_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>use_ltp</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ltp_smp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ltp_smp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ltp_smp</name> <operator>&lt;</operator> <name>block_length</name></expr>;</condition> <incr><expr><name>ltp_smp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><name>ltp_smp</name> <operator>-</operator> <operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>ltp_lag</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>begin</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>center</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>center</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab</name> <init>= <expr><literal type="number">5</literal> <operator>-</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>base</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>base</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>base</name><operator>++</operator></expr><operator>,</operator> <expr><name>tab</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MUL64</name><argument_list>(<argument><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><name>tab</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw_samples</name><index>[<expr><name>base</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>raw_samples</name><index>[<expr><name>ltp_smp</name></expr>]</index></name> <operator>+=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>-&gt;</operator><name>ra_block</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>smp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>smp</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>opt_order</name></expr></argument>, <argument><expr><name>block_length</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>smp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>smp</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MUL64</name><argument_list>(<argument><expr><name><name>lpc_cof</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw_samples</name><index>[<expr><operator>-</operator><operator>(</operator><name>sb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>raw_samples</name><operator>++</operator> <operator>-=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parcor_to_lpc</name><argument_list>(<argument><expr><name>smp</name></expr></argument>, <argument><expr><name>quant_cof</name></expr></argument>, <argument><expr><name>lpc_cof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>opt_order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parcor_to_lpc</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>quant_cof</name></expr></argument>, <argument><expr><name>lpc_cof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bd</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr></argument>, <argument><expr><name>raw_samples</name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>-&gt;</operator><name>js_blocks</name></name> <operator>&amp;&amp;</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_other</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>-&gt;</operator><name>raw_other</name></name> <operator>&gt;</operator> <name>raw_samples</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>left</name> <operator>=</operator> <name>raw_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_other</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_other</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name>raw_samples</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&gt;=</operator> <operator>-</operator><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>raw_samples</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>right</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>-</operator> <name><name>left</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&gt;=</operator> <operator>-</operator><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>raw_samples</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lpc_cof</name> <operator>=</operator> <name>lpc_cof</name> <operator>+</operator> <name>opt_order</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>opt_order</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lpc_cof_reversed</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>lpc_cof</name><index>[<expr><operator>-</operator><operator>(</operator><name>sb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>raw_samples</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>+</operator> <name>smp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lpc_cof</name> <operator>=</operator> <name>lpc_cof_reversed</name> <operator>+</operator> <name>opt_order</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>raw_samples</name> <operator>&lt;</operator> <name>raw_samples_end</name></expr>;</condition> <incr><expr><name>raw_samples</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <operator>-</operator><name>opt_order</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MUL64</name><argument_list>(<argument><expr><name><name>lpc_cof</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw_samples</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>raw_samples</name> <operator>-=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>raw_samples</name> <operator>=</operator> <name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>raw_samples</name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>, <argument><expr><name><name>bd</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>raw_samples</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_block</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_var_block_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_const_block_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>js_switch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_block</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>smp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>const_block</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_const_block_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_var_block_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>smp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>smp</name> <operator>&lt;</operator> <name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name></expr>;</condition> <incr><expr><name>smp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>smp</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>smp</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>*</operator><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_decode_block</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>decode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zero_remaining</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>b_max</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>div_blocks</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>b_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_blocks_ind</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ra_frame</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>div_blocks</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>js_blocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSBlockData</name></type> <name>bd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ra_block</name></name> <operator>=</operator> <name>ra_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>const_block</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>shift_lsbs</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>opt_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>store_prev_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>use_ltp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ltp_lag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ltp_gain</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>quant_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>lpc_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>prev_raw_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>raw_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>block_length</name></name> <operator>=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_decode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>zero_remaining</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>raw_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>raw_samples</name></name> <operator>+=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ra_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_blocks</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ra_frame</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>div_blocks</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>js_blocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSBlockData</name></type> <name><name>bd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ra_block</name> <operator>=</operator> <name>ra_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>const_block</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shift_lsbs</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>opt_order</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>store_prev_samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>use_ltp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ltp_lag</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ltp_gain</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>quant_cof</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpc_cof</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prev_raw_samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>js_blocks</name> <operator>=</operator> <operator>*</operator><name>js_blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ra_block</name> <operator>=</operator> <name>ra_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>const_block</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>shift_lsbs</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>opt_order</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>store_prev_samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>use_ltp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ltp_lag</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ltp_gain</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quant_cof</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpc_cof</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prev_raw_samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>js_blocks</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>js_blocks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>block_length</name> <operator>=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>block_length</name> <operator>=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>raw_samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr> ]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>raw_samples</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>raw_other</name> <operator>=</operator> <name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>raw_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>raw_other</name> <operator>=</operator> <name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>raw_samples</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_decode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_decode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>js_blocks</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>js_blocks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel pair.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>raw_samples</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>raw_samples</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>raw_samples</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>js_blocks</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>raw_samples</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>raw_samples</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>raw_samples</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ra_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ra_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name> <operator>+</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>zero_remaining</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name><name>bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>raw_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_remaining</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name><name>bd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>raw_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>als_weighting</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><call><name>decode_rice</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mcc_weightings</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>mcc_weightings</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_channel_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSChannelData</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSChannelData</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>cd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>entries</name> <operator>&lt;</operator> <name>channels</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>stop_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>master_channel</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>av_ceil_log2</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>master_channel</name></name> <operator>&gt;=</operator> <name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid master channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>master_channel</name></name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>time_diff_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>weighting</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>als_weighting</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>weighting</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>als_weighting</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>weighting</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>als_weighting</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>time_diff_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>weighting</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>als_weighting</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>weighting</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>als_weighting</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>weighting</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>als_weighting</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>time_diff_sign</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>time_diff_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag_length</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>==</operator> <name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Damaged channel data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>revert_channel_correlation</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ALSBlockData</name> <modifier>*</modifier></type><name>bd</name></decl></parameter>,

<parameter><decl><type><name>ALSChannelData</name> <modifier>*</modifier><modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>reverted</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSChannelData</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>cd</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channel_size</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name><operator>.</operator><name>frame_length</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sconf</name><operator>.</operator><name>max_order</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reverted</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reverted</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dep</name> <operator>&lt;</operator> <name>channels</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>stop_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>revert_channel_correlation</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>reverted</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>master_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dep</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>dep</name> <operator>==</operator> <name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel correlation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>const_block</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>ltp_gain</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>lpc_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>quant_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>stop_flag</name></expr>;</condition> <incr><expr><name>dep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>smp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>begin</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>end</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>block_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>master_channel</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>master_channel</name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>time_diff_flag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>time_diff_index</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name>time_diff_sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"begin %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" smaller than time diff index %d.\n"</literal></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>begin</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"end %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" smaller than time diff index %d.\n"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>begin</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>-</operator> <name>master</name> <operator>||</operator>

<call><name>FFMAX</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name>channels</name> <operator>*</operator> <name>channel_size</name> <operator>-</operator> <name>master</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"sample pointer range [%p, %p] not contained in raw_buffer [%p, %p].\n"</literal></expr></argument>,

<argument><expr><name>master</name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>begin</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>master</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name>channels</name> <operator>*</operator> <name>channel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>smp</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>smp</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>smp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>t</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>+</operator> <name>t</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>smp</name></expr>]</index></name> <operator>+=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>-</operator> <name>master</name> <operator>||</operator>

<name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name>channels</name> <operator>*</operator> <name>channel_size</name> <operator>-</operator> <name>master</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"sample pointer range [%p, %p] not contained in raw_buffer [%p, %p].\n"</literal></expr></argument>,

<argument><expr><name>master</name> <operator>+</operator> <name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>master</name> <operator>+</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name>channels</name> <operator>*</operator> <name>channel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>smp</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>smp</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>smp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>MUL64</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><name><name>weighting</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>master</name><index>[<expr><name>smp</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>smp</name></expr>]</index></name> <operator>+=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SoftFloat_IEEE754</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mantissa_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask_64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cutoff_bit_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>last_2_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mantissa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>return_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_count</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>sign</name></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa_temp</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>mant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <literal type="number">47</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mantissa_temp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FLOAT_0</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>mantissa_temp</name> <operator>&amp;</operator> <name>mask_64</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>mask_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_count</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_64</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>cutoff_bit_count</name> <operator>=</operator> <name>bit_count</name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cutoff_bit_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_2_bits</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>mantissa_temp</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>cutoff_bit_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_2_bits</name> <operator>==</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>last_2_bits</name> <operator>==</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>mantissa_temp</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">0x1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>cutoff_bit_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mantissa_temp</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <name>cutoff_bit_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cutoff_bit_count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>mantissa_temp</name> <operator>&gt;&gt;</operator> <name>cutoff_bit_count</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>mantissa_temp</name> <operator>&lt;&lt;</operator><operator>-</operator><name>cutoff_bit_count</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mantissa</name> <operator>&amp;</operator> <literal type="number">0x01000000ul</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_val</name> <operator>=</operator> <literal type="number">0x80000000U</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>return_val</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>av_clip</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>exp</name></name> <operator>+</operator> <name>bit_count</name> <operator>-</operator> <literal type="number">47</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">126</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7F800000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>return_val</name> <operator>|=</operator> <name>mantissa</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_bits2sf_ieee754</name><argument_list>(<argument><expr><name>return_val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_diff_float_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ra_frame</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SoftFloat_IEEE754</name> <modifier>*</modifier></type><name>acf</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>acf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>shift_value</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>shift_value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last_shift_value</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>last_shift_value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last_acf_mantissa</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>last_acf_mantissa</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>raw_mantissa</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nbits</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>nbits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>larray</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>larray</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_length</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SoftFloat_IEEE754</name></type> <name>scale</name> <init>= <expr><call><name>av_int2sf_ieee754</name><argument_list>(<argument><expr><literal type="number">0x1u</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>partA_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>highest_byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shift_amp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp_32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_acf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nchars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nbits_aligned</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>acc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mantissa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>use_acf</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ra_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>last_acf_mantissa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>last_acf_mantissa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>last_shift_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>last_shift_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mlz_flush_dict</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_acf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_32</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_acf_mantissa</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>tmp_32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp_32</name> <operator>=</operator> <name><name>last_acf_mantissa</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>acf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>av_bits2sf_ieee754</name><argument_list>(<argument><expr><name>tmp_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>acf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>FLOAT_1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>highest_byte</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>partA_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_amp</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift_amp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>shift_value</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_shift_value</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>shift_value</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>shift_value</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>last_shift_value</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partA_flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>nchars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nchars</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp_32</name> <operator>=</operator> <call><name>ff_mlz_decompression</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>, <argument><expr><name>larray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmp_32</name> <operator>!=</operator> <name>nchars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error in MLZ decompression (%"</literal><name>PRId32</name><literal type="string">", %d).\n"</literal></expr></argument>, <argument><expr><name>tmp_32</name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>larray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>highest_byte</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_cmp_sf_ieee754</name><argument_list>(<argument><expr><name><name>acf</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>FLOAT_1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">23</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>highest_byte</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>nchars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nchars</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>nchars</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp_32</name> <operator>=</operator> <call><name>ff_mlz_decompression</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>, <argument><expr><name>larray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmp_32</name> <operator>!=</operator> <name>nchars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error in MLZ decompression (%"</literal><name>PRId32</name><literal type="string">", %d).\n"</literal></expr></argument>, <argument><expr><name>tmp_32</name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nbits_aligned</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nbits_aligned</name> <operator>=</operator> <name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nbits_aligned</name><operator>/</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>larray</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>acc</name> <operator>&gt;&gt;=</operator> <operator>(</operator><name>nbits_aligned</name> <operator>-</operator> <name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SoftFloat_IEEE754</name></type> <name>pcm_sf</name> <init>= <expr><call><name>av_int2sf_ieee754</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pcm_sf</name> <operator>=</operator> <call><name>av_div_sf_ieee754</name><argument_list>(<argument><expr><name>pcm_sf</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_cmp_sf_ieee754</name><argument_list>(<argument><expr><name><name>acf</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>FLOAT_1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pcm_sf</name> <operator>=</operator> <call><name>multiply</name><argument_list>(<argument><expr><name><name>acf</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>pcm_sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>pcm_sf</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>pcm_sf</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <operator>(</operator><name><name>pcm_sf</name><operator>.</operator><name>mant</name></name> <operator>|</operator> <literal type="number">0x800000</literal><operator>)</operator> <operator>+</operator> <name><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>mantissa</name> <operator>&gt;=</operator> <literal type="number">0x1000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mantissa</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>+=</operator> <operator>(</operator><name><name>shift_value</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>&amp;=</operator> <literal type="number">0x007fffffUL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_32</name> <operator>=</operator> <operator>(</operator><name>sign</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>e</name> <operator>+</operator> <name>EXP_BIAS</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mantissa</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp_32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x007fffffUL</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_frame_data</name><parameter_list>(<parameter><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ra_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>div_blocks</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>js_blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bs_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>ra_flag</name></name> <operator>==</operator> <name>RA_FLAG_FRAMES</name> <operator>&amp;&amp;</operator> <name>ra_frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name> <operator>&amp;&amp;</operator> <name><name>sconf</name><operator>-&gt;</operator><name>joint_stereo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>js_switch</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>js_switch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>independent_bs</name> <init>= <expr><operator>!</operator><name><name>sconf</name><operator>-&gt;</operator><name>joint_stereo</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>js_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>js_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_block_sizes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>joint_stereo</name></name> <operator>&amp;&amp;</operator> <name><name>sconf</name><operator>-&gt;</operator><name>block_switching</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>bs_info</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>independent_bs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>independent_bs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>independent_bs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_blocks_ind</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ra_frame</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,

<argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name>js_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>independent_bs</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ra_frame</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><name>js_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name> <operator>+</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>highest_decoded_channel</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>ALSBlockData</name></type> <name>bd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>reverted_channels</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>reverted_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reverted_channels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>reverted_channels</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ra_block</name></name> <operator>=</operator> <name>ra_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>prev_raw_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_block_sizes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>div_blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>block_length</name></name> <operator>=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>block_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid block length %u in channel data!\n"</literal></expr></argument>,

<argument><expr><name><name>bd</name><operator>.</operator><name>block_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>const_block</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>shift_lsbs</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>opt_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>store_prev_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>use_ltp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ltp_lag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ltp_gain</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>lpc_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>quant_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>raw_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>raw_other</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_channel_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>revert_channel_correlation</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name></name></expr></argument>,

<argument><expr><name>reverted_channels</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>const_block</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>shift_lsbs</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>opt_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>store_prev_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>use_ltp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ltp_lag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ltp_gain</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>lpc_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>quant_cof</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>raw_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>highest_decoded_channel</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>highest_decoded_channel</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reverted_channels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>reverted_channels</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>div_blocks</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ra_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name> <operator>+</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>floating</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_diff_float_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ra_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overread %d\n"</literal></expr></argument>, <argument><expr><operator>-</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invalid_frame</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>sample</name></decl>, <decl><type ref="prev"/><name>ra_frame</name></decl>, <decl><type ref="prev"/><name>bytes_read</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ra_frame</name> <operator>=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>ra_distance</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_id</name></name> <operator>%</operator> <name><name>sconf</name><operator>-&gt;</operator><name>ra_distance</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>samples</name></name> <operator>!=</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>samples</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_id</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>,

<argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>highest_decoded_channel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>invalid_frame</name> <operator>=</operator> <call><name>read_frame_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ra_frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Reading frame data failed. Skipping RA unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>highest_decoded_channel</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_id</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLEAVE_OUTPUT</name><parameter_list>(<parameter><type><name>bps</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int##bps##_t *dest = (int##bps##_t*)frame-&gt;data[0]; int channels = avctx-&gt;channels; int32_t *raw_samples = ctx-&gt;raw_samples[0]; int raw_step = channels &gt; 1 ? ctx-&gt;raw_samples[1] - raw_samples : 1; shift = bps - ctx-&gt;avctx-&gt;bits_per_raw_sample; if (!ctx-&gt;cs_switch) { for (sample = 0; sample &lt; ctx-&gt;cur_frame_length; sample++) for (c = 0; c &lt; channels; c++) *dest++ = raw_samples[c*raw_step + sample] * (1U &lt;&lt; shift); } else { for (sample = 0; sample &lt; ctx-&gt;cur_frame_length; sample++) for (c = 0; c &lt; channels; c++) *dest++ = raw_samples[sconf-&gt;chan_pos[c]*raw_step + sample] * (1U &lt;&lt; shift);} }</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<macro><name>INTERLEAVE_OUTPUT</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>INTERLEAVE_OUTPUT</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>crc_enabled</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_CRCCHECK</name><operator>|</operator><name>AV_EF_CAREFUL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>swap</name> <init>= <expr><name>HAVE_BIGENDIAN</name> <operator>!=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>msb_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>sample</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition>

<incr><expr><name>sample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>sample</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>sample</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc_table</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>v</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>crc_source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>sample</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition>

<incr><expr><name>sample</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>sample</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>crc_source</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>crc_source</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc_table</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>crc_source</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>

<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>!=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>crc_org</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CRC error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <ternary><condition><expr><name>invalid_frame</name></expr> ?</condition><then> <expr><name>buffer_size</name></expr> </then><else>:

<expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>bytes_read</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name><operator>.</operator><name>chan_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_bgmc_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bgmc_lut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bgmc_lut_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_reversed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>reverted_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>acf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>last_acf_mantissa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>shift_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>last_shift_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>larray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channel_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_buffers</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSSpecificConfig</name> <modifier>*</modifier></type><name>sconf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sconf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing required ALS extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_specific_config</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reading ALSSpecificConfig failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>check_specific_config</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>bgmc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bgmc_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bgmc_lut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bgmc_lut_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>floating</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>

?</condition><then> <expr><name>AV_SAMPLE_FMT_S32</name></expr> </then><else>: <expr><name>AV_SAMPLE_FMT_S16</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bits per raw sample %d larger than 32.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s_max</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sconf</name><operator>-&gt;</operator><name>resolution</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">31</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag_length</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;=</operator> <literal type="number">96000</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;=</operator> <literal type="number">192000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_buffers</name> <operator>=</operator> <ternary><condition><expr><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_buffers</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>num_buffers</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_reversed_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name></name> <operator>||</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof_buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_buffer</name></name> <operator>||</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_reversed_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocating buffer memory failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>num_buffers</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_cof</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_cof_buffer</name></name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lpc_cof_buffer</name></name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name> <operator>*</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>const_block</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>shift_lsbs</name></name> <operator>||</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt_order</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>store_prev_samples</name></name> <operator>||</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>use_ltp</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_lag</name></name> <operator>||</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocating buffer memory failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>num_buffers</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ltp_gain_buffer</name></name> <operator>+</operator> <name>c</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>mc_coding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num_buffers</name> <operator>*</operator> <name>num_buffers</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reverted_channels</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_buffers</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>reverted_channels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>reverted_channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocating buffer memory failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>num_buffers</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>num_buffers</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chan_data_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reverted_channels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>channel_size</name> <operator>=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>+</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>channel_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sconf</name><operator>-&gt;</operator><name>floating</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>acf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>acf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>shift_value</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>shift_value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_shift_value</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>last_shift_value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_acf_mantissa</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>last_acf_mantissa</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>larray</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>larray</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>acf</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>shift_value</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>last_shift_value</name></name>

<operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>last_acf_mantissa</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocating buffer memory failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mlz_init_dict</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mlz_flush_dict</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mlz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_mantissa</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>prev_raw_samples</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name><operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocating buffer memory failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name><name>sconf</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>raw_samples</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>channel_size</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>HAVE_BIGENDIAN</name> <operator>!=</operator> <name><name>sconf</name><operator>-&gt;</operator><name>msb_first</name></name> <operator>&amp;&amp;</operator> <name><name>sconf</name><operator>-&gt;</operator><name>crc_enabled</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_CRCCHECK</name><operator>|</operator><name>AV_EF_CAREFUL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_frame_length</name></name> <operator>*</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>

<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>crc_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocating buffer memory failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSDecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_als_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"als"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-4 Audio Lossless Coding (ALS)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MP4ALS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALSDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
