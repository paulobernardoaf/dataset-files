<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dnxhdenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixblockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnxhdenc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNX10BIT_QMAT_SHIFT</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_VARIANCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAMBDA_FRAC_BITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"nitris_compat"</literal></expr>, <expr><literal type="string">"encode with Avid Nitris compatibility"</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DNXHDEncContext</name></expr></argument>, <argument><expr><name>nitris_compat</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ibias"</literal></expr>, <expr><literal type="string">"intra quant bias"</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DNXHDEncContext</name></expr></argument>, <argument><expr><name>intra_quant_bias</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DNXHDEncContext</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHD</name></expr> }</block></expr>,

<expr><name>FF_PROFILE_DNXHD</name></expr>, <expr><name>FF_PROFILE_DNXHR_444</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dnxhd"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHD</name></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dnxhr_444"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHR_444</name></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dnxhr_hqx"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHR_HQX</name></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dnxhr_hq"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHR_HQ</name></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dnxhr_sq"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHR_SQ</name></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dnxhr_lb"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_DNXHR_LB</name></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dnxhd_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"dnxhd"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dnxhd_8bit_get_pixels_8x4_sym</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>block</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>block</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>block</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>block</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>void</name></type> <name>dnxhd_10bit_get_pixels_8x4_sym</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>block</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_10bit_dct_quantize_444</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>last_non_zero</name></decl>, <decl><type ref="prev"/><name>start_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>qmat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name><init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>scantable</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold1</name></decl>, <decl><type ref="prev"/><name>threshold2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmat</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>q_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>bias</name><operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>intra_quant_bias</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold1</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>bias</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold2</name> <operator>=</operator> <operator>(</operator><name>threshold1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>start_i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name> <operator>+</operator> <name>threshold1</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>threshold2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_non_zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name> <operator>+</operator> <name>threshold1</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>threshold2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>bias</name> <operator>+</operator> <name>level</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>bias</name> <operator>-</operator> <name>level</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>max</name> <operator>|=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>overflow</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_qcoeff</name></name> <operator>&lt;</operator> <name>max</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>!=</operator> <name>FF_IDCT_PERM_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_block_permute</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>,

<argument><expr><name>scantable</name></expr></argument>, <argument><expr><name>last_non_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>last_non_zero</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_10bit_dct_quantize</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name><init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>scantable</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>qmat</name> <init>= <expr><ternary><condition><expr><name>n</name><operator>&lt;</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>q_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_non_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>FF_SIGNBIT</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>DNX10BIT_QMAT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>!=</operator> <name>FF_IDCT_PERM_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_block_permute</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>,

<argument><expr><name>scantable</name></expr></argument>, <argument><expr><name>last_non_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>last_non_zero</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dnxhd_init_vlc</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_level</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_codes</name></name></expr></argument>,

<argument><expr><name>max_level</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_codes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_bits</name></name></expr></argument>,

<argument><expr><name>max_level</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_bits</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>run_codes</name></name></expr></argument>,

<argument><expr><literal type="number">63</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>run_bits</name></name></expr></argument>,

<argument><expr><literal type="number">63</literal></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_codes</name></name> <operator>+</operator> <name>max_level</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_bits</name></name> <operator>+</operator> <name>max_level</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>max_level</name></expr>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name>max_level</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>run</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>level</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>run</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>alevel</name> <init>= <expr><name>level</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MASK_ABS</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>alevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alevel</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>alevel</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alevel</name> <operator>-=</operator> <name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">257</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_info</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>==</operator> <name>alevel</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>offset</name> <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_info</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>offset</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>run</name> <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_info</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>run</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alevel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_codes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_codes</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>ac_bits</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name>alevel</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">257</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>index_bits</name></name><operator>)</operator> <operator>|</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>index_bits</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">62</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>run</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>run</name> <operator>&lt;</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>run_codes</name><index>[<expr><name>run</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>run_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>run_bits</name><index>[<expr><name>run</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>run_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dnxhd_init_qmat</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lbias</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbias</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>weight_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>luma_weight_table</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>luma_weight</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chroma_weight_table</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>chroma_weight</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l16</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c16</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>weight_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l16</name></name></expr></argument>,

<argument><expr><name>weight_matrix</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>weight_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c16</name></name></expr></argument>,

<argument><expr><name>weight_matrix</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>qscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>qscale</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</condition> <incr><expr><name>qscale</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>qscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>qscale</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</condition> <incr><expr><name>qscale</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DNX10BIT_QMAT_SHIFT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>qscale</name> <operator>*</operator> <name><name>luma_weight_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DNX10BIT_QMAT_SHIFT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>qscale</name> <operator>*</operator> <name><name>chroma_weight_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>q_chroma_intra_matrix16</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c16</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>q_chroma_intra_matrix</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>q_intra_matrix16</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l16</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>q_intra_matrix</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dnxhd_init_rc</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RCEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>!=</operator> <name>FF_MB_DECISION_RD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RCCMPEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp_tmp</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RCCMPEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>min_padding</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>LAMBDA_FRAC_BITS</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dnxhd_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"pixel format is incompatible with DNxHD\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_444</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV444P10</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP10</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_DNXHR_444</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRP10</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"pixel format is incompatible with DNxHD profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_HQX</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"pixel format is incompatible with DNxHR HQX profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_LB</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_SQ</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_HQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"pixel format is incompatible with DNxHR LB/SQ/HQ profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <call><name>ff_dnxhd_find_cid</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"video parameters incompatible with DNxHD. Valid DNxHD profiles:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dnxhd_print_profiles</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"cid %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;=</operator> <literal type="number">1270</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;=</operator> <literal type="number">1274</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">120</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Input dimensions too small, input must be at least 256x120\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>ff_dnxhd_get_cid_table</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_dnxhd_cid_table</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_intra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>h263_aic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fdctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_idct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mpvencdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_pixblockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dct_encode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_DNXHD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>vdsp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>dct_quantize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>dct_quantize</name></name> <operator>=</operator> <name>ff_dct_quantize_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_DNXHR_HQX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>dct_quantize</name></name> <operator>=</operator> <name>dnxhd_10bit_dct_quantize_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name> <operator>=</operator> <name>dnxhd_10bit_get_pixels_8x4_sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_width_l2</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>dct_quantize</name></name> <operator>=</operator> <name>dnxhd_10bit_dct_quantize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name> <operator>=</operator> <name>dnxhd_10bit_get_pixels_8x4_sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_width_l2</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name> <operator>=</operator> <name>dnxhd_8bit_get_pixels_8x4_sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_width_l2</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dnxhdenc_init_x86</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_DNXHD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Interlaced encoding is not supported for DNxHR profiles.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>==</operator> <name>DNXHD_VARIABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <call><name>avpriv_dnxhd_get_hr_frame_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>coding_unit_size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>&gt;</operator> <literal type="number">68</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <literal type="number">0x170</literal> <operator>+</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <literal type="number">0x280</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dnxhd_init_qmat</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nitris_compat</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>min_padding</name></name> <operator>=</operator> <literal type="number">1600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dnxhd_init_vlc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dnxhd_init_rc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offs</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_bits</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_qscale</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&gt;</operator> <name>MAX_THREADS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many threads\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qmax must be at least 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNXHDEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNXHDEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label> 

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_write_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x02</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;=</operator> <literal type="number">1270</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;=</operator> <literal type="number">1274</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_field</name></name> <operator>+</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0x01</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x18</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x1a</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x1d</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="number">0x58</literal></expr> </then><else>: <expr><literal type="number">0x38</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x88</literal> <operator>+</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x28</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0x2c</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0x5f</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0x167</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x16a</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0x16c</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0x16f</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msip</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">0x170</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>dnxhd_encode_dc</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>dc_bits</name><index>[<expr><name>nbits</name></expr>]</index></name> <operator>+</operator> <name>nbits</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>dc_codes</name><index>[<expr><name>nbits</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>nbits</name><operator>)</operator> <operator>+</operator>

<call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>void</name></type> <name>dnxhd_encode_block</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>last_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_non_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slevel</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dnxhd_encode_dc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slevel</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slevel</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run_level</name> <init>= <expr><name>i</name> <operator>-</operator> <name>last_non_zero</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rlevel</name> <init>= <expr><name>slevel</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>!</operator><operator>!</operator><name>run_level</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><name>rlevel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><name>rlevel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run_level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>run_bits</name><index>[<expr><name>run_level</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>run_codes</name><index>[<expr><name>run_level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>void</name></type> <name>dnxhd_unquantize_c</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>weight_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>weight_matrix</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>luma_weight</name></name></expr>

</then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>chroma_weight</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>weight_matrix</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>chroma_weight</name></name></expr>

</then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>luma_weight</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>level</name><operator>)</operator> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>weight_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>weight_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>weight_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>level</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>weight_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>weight_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>weight_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dnxhd_ssd_block</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>qblock</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>qblock</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>qblock</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>score</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>int</name></type> <name>dnxhd_calc_ac_bits</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_non_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run_level</name> <init>= <expr><name>i</name> <operator>-</operator> <name>last_non_zero</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><name>level</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>!</operator><operator>!</operator><name>run_level</name></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>run_bits</name><index>[<expr><name>run_level</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>void</name></type> <name>dnxhd_get_blocks</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>block_width_l2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bw</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_y_offset</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dct_y_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_uv_offset</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dct_uv_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvlinesize</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr_y</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>bs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr_u</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>bs</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr_v</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>bs</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixblockDSPContext</name> <modifier>*</modifier></type><name>pdsp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pdsp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VideoDSPContext</name> <modifier>*</modifier></type><name>vdsp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>vdsp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>!=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_w</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_h</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_w</name> <init>= <expr><operator>(</operator><name>y_w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_h</name> <init>= <expr><name>y_h</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y_w</name></expr></argument>, <argument><expr><name>y_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uv_w</name></expr></argument>, <argument><expr><name>uv_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uv_w</name></expr></argument>, <argument><expr><name>uv_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_y_offset</name> <operator>=</operator> <name>bw</name> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_uv_offset</name> <operator>=</operator> <name>bw</name> <operator>*</operator> <name>uvlinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_u</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_v</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_w</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_h</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_w</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr> ?</condition><then> <expr><name>y_w</name></expr> </then><else>: <expr><operator>(</operator><name>y_w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_h</name> <init>= <expr><name>y_h</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>linesize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y_w</name></expr></argument>, <argument><expr><name>y_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name>uvlinesize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uv_w</name></expr></argument>, <argument><expr><name>uv_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vdsp</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name>uvlinesize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uv_w</name></expr></argument>, <argument><expr><name>uv_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_y_offset</name> <operator>=</operator> <name>bw</name> <operator>*</operator> <name>linesize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_uv_offset</name> <operator>=</operator> <name>bw</name> <operator>*</operator> <name>uvlinesize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_u</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_v</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>edge_buf_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_y_offset</name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_y_offset</name> <operator>+</operator> <name>bw</name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_u</name> <operator>+</operator> <name>dct_uv_offset</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>get_pixels_8x4_sym</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_v</name> <operator>+</operator> <name>dct_uv_offset</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_y_offset</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_y_offset</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_u</name> <operator>+</operator> <name>dct_uv_offset</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr_v</name> <operator>+</operator> <name>dct_uv_offset</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_y_offset</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_y_offset</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name> <operator>+</operator> <name>dct_uv_offset</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_u</name> <operator>+</operator> <name>dct_uv_offset</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name> <operator>+</operator> <name>dct_uv_offset</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdsp</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_v</name> <operator>+</operator> <name>dct_uv_offset</name> <operator>+</operator> <name>bw</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>int</name></type> <name>dnxhd_switch_matrix</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>uint8_t</name></type> <name><name>component</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>component</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_calc_bits_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name>jobnr</name></expr></init></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>threadnr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mb</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ssd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ac_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dnxhd_get_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src_block</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>last_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>dnxhd_switch_matrix</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>src_block</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_index</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>dct_quantize</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></then><else>: <expr><literal type="number">4</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><name>qscale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ac_bits</name> <operator>+=</operator> <call><name>dnxhd_calc_ac_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>last_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>nbits</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc_bits</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cid_table</name><operator>-&gt;</operator><name>dc_bits</name><index>[<expr><name>nbits</name></expr>]</index></name> <operator>+</operator> <name>nbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>==</operator> <name>FF_MB_DECISION_RD</name> <operator>||</operator> <operator>!</operator><name>RC_VARIANCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dnxhd_unquantize_c</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>qscale</name></expr></argument>, <argument><expr><name>last_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssd</name> <operator>+=</operator> <call><name>dnxhd_ssd_block</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>src_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><operator>(</operator><name>qscale</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name><operator>)</operator> <operator>+</operator> <name>mb</name></expr>]</index></name><operator>.</operator><name>ssd</name> <operator>=</operator> <name>ssd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><operator>(</operator><name>qscale</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name><operator>)</operator> <operator>+</operator> <name>mb</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>=</operator> <name>ac_bits</name> <operator>+</operator> <name>dc_bits</name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>vlc_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_encode_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name>jobnr</name></expr></init></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>threadnr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_offs</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mb</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_qscale</name><index>[<expr><name>mb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dnxhd_get_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>dnxhd_switch_matrix</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_index</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>dct_quantize</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_444</name></name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></then><else>: <expr><literal type="number">4</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><name>qscale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dnxhd_encode_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>last_index</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dnxhd_setup_threads_slices</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>thread_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offs</name><index>[<expr><name>mb_y</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>mb_y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mb</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>mb_y</name></expr>]</index></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_bits</name><index>[<expr><name>mb</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>mb_y</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>mb_y</name></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>mb_y</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>mb_y</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>thread_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_mb_var_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name>jobnr</name></expr></init></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>partial_last_row</name> <init>= <expr><operator>(</operator><name>mb_y</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>threadnr</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mb_x</name></expr><operator>,</operator> <expr><name>pix</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mb</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>varc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>partial_last_row</name> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>&lt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mpvencdsp</name><operator>.</operator><name>pix_sum</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>varc</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mpvencdsp</name><operator>.</operator><name>pix_norm1</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bh</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name><operator>)</operator> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name>mb_y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>varc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name> <init>= <expr><name><name>pix</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>varc</name> <operator>+=</operator> <name>val</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>varc</name> <operator>=</operator> <operator>(</operator><name>varc</name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <name>sum</name> <operator>*</operator> <name>sum</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>mb</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>varc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>mb</name></expr>]</index></name><operator>.</operator><name>mb</name> <operator>=</operator> <name>mb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mb_x</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>linesize</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mb</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sqsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bh</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name><operator>)</operator> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name>mb_y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mean</name></decl>, <decl><type ref="prev"/><name>sqmean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sample</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>pix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sqsum</name> <operator>+=</operator> <name>sample</name> <operator>*</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mean</name> <operator>=</operator> <name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sqmean</name> <operator>=</operator> <name>sqsum</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>mb</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>sqmean</name> <operator>-</operator> <name>mean</name> <operator>*</operator> <name>mean</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>mb</name></expr>]</index></name><operator>.</operator><name>mb</name> <operator>=</operator> <name>mb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_encode_rdo</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lambda</name></decl>, <decl><type ref="prev"/><name>up_step</name></decl>, <decl><type ref="prev"/><name>down_step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_lower</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>last_higher</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dnxhd_calc_bits_thread</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>up_step</name> <operator>=</operator> <name>down_step</name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>LAMBDA_FRAC_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lambda</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lambda</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lambda</name> <operator>==</operator> <name>last_higher</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lambda</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>min</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>q</name><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name><operator>)</operator> <operator>+</operator> <name>mb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>score</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>*</operator> <name>lambda</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ssd</name> <operator>&lt;&lt;</operator> <name>LAMBDA_FRAC_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_qscale</name><index>[<expr><name>mb</name></expr>]</index></name> <operator>=</operator> <name>qscale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_bits</name><index>[<expr><name>mb</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_lower</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>last_lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_higher</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lambda</name> <operator>=</operator> <operator>(</operator><name>lambda</name><operator>+</operator><name>last_higher</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lambda</name> <operator>-=</operator> <name>down_step</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>down_step</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>down_step</name><operator>*</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>up_step</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>LAMBDA_FRAC_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lambda</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lambda</name> <operator>==</operator> <name>last_lower</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>last_higher</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>last_higher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_lower</name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lambda</name> <operator>=</operator> <operator>(</operator><name>lambda</name><operator>+</operator><name>last_lower</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>lambda</name> <operator>+</operator> <name>up_step</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lambda</name> <operator>+=</operator> <name>up_step</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>up_step</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>up_step</name><operator>*</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>down_step</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>LAMBDA_FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <name>lambda</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_find_qscale</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>up_step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>down_step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_higher</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_lower</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>qscale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>dnxhd_calc_bits_thread</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><operator>(</operator><name>qscale</name><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name><operator>+</operator><name>x</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name><operator>+</operator><literal type="number">31</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">31</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>qscale</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_higher</name> <operator>==</operator> <name>qscale</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <name>last_higher</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_lower</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>, <argument><expr><name>last_lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_higher</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>+</operator> <name>last_higher</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>-=</operator> <name>down_step</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qscale</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>up_step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_lower</name> <operator>==</operator> <name>qscale</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_higher</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>, <argument><expr><name>last_higher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_lower</name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>+</operator> <name>last_lower</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>+=</operator> <name>up_step</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>down_step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qscale</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>qscale</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIX_PASSES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBUCKETS</name></cpp:macro> <cpp:value>(1 &lt;&lt; BUCKET_BITS)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_bucket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <name>NBUCKETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NBUCKETS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>radix_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RCCMPEntry</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>buckets</name><index>[<expr><name>RADIX_PASSES</name></expr>]</index><index>[<expr><name>NBUCKETS</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buckets</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>RADIX_PASSES</name> <operator>*</operator> <name>NBUCKETS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>RADIX_PASSES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buckets</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><call><name>get_bucket</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <name>BUCKET_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>RADIX_PASSES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NBUCKETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buckets</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>-=</operator> <name><name>buckets</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>buckets</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>radix_sort_pass</name><parameter_list>(<parameter><decl><type><name>RCCMPEntry</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RCCMPEntry</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>buckets</name><index>[<expr><name>NBUCKETS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>pass</name> <operator>*</operator> <name>BUCKET_BITS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_bucket</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>buckets</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>radix_sort</name><parameter_list>(<parameter><decl><type><name>RCCMPEntry</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RCCMPEntry</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>buckets</name><index>[<expr><name>RADIX_PASSES</name></expr>]</index><index>[<expr><name>NBUCKETS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>radix_count</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>radix_sort_pass</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>buckets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>radix_sort_pass</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>buckets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buckets</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>NBUCKETS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>buckets</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NBUCKETS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>radix_sort_pass</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>buckets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>radix_sort_pass</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>buckets</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_encode_fast</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dnxhd_find_qscale</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>)</operator> <operator>+</operator> <name>mb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_qscale</name><index>[<expr><name>mb</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_bits</name><index>[<expr><name>mb</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_bits</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RC_VARIANCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>mb</name></expr>]</index></name><operator>.</operator><name>mb</name> <operator>=</operator> <name>mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>mb</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator>

<ternary><condition><expr><name>delta_bits</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>ssd</name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr>]</index></name><operator>.</operator><name>ssd</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator>

<name>delta_bits</name></expr>

</then><else>: <expr><name>INT_MIN</name></expr></else></ternary></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max_bits</name> <operator>+=</operator> <literal type="number">31</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>RC_VARIANCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dnxhd_mb_var_thread</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>radix_sort</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp_tmp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>&amp;&amp;</operator> <name>max_bits</name></expr></argument> &gt;</argument_list></name> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>mb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>)</operator> <operator>+</operator> <name>mb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_bits</name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_qscale</name><index>[<expr><name>mb</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_bits</name><index>[<expr><name>mb</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name><index>[<expr><name>rc</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dnxhd_load_picture</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>m</name><operator>.</operator><name>linesize</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>m</name><operator>.</operator><name>uvlinesize</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dct_y_offset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name> <operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dct_uv_offset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>ctx</name><operator>-&gt;</operator><name>cur_field</name></name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr></init></decl>;</decl_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnxhd_encode_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_field</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dnxhd_load_picture</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>encode_coding_unit</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_field</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dnxhd_write_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>==</operator> <name>FF_MB_DECISION_RD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dnxhd_encode_rdo</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dnxhd_encode_fast</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"picture could not fit ratecontrol constraints, increase qmax\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dnxhd_setup_threads_slices</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>msip</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dnxhd_encode_thread</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>offset</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x600DC0DE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&amp;&amp;</operator> <name>first_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_field</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>coding_unit_size</name></name></expr>;</expr_stmt>

<goto>goto <name>encode_coding_unit</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>quality</name></name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_PICTURE_TYPE_I</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dnxhd_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_codes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>orig_vlc_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>run_codes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>run_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_cmp_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_offs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_c16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>qmatrix_l16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>dnxhd_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"1024"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dnxhd_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dnxhd"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VC3/DNxHD"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DNXHD</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DNXHDEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>dnxhd_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>dnxhd_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>dnxhd_encode_end</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dnxhd_class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>dnxhd_defaults</name></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_dnxhd_profiles</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
