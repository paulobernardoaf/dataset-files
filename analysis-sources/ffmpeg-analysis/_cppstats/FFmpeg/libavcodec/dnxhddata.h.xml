<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dnxhddata.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNXHD_INTERLACED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNXHD_MBAFF</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNXHD_444</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNXHD_HEADER_INITIAL</name></cpp:macro> <cpp:value>0x000002800100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNXHD_HEADER_444</name></cpp:macro> <cpp:value>0x000002800200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNXHD_VARIABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CIDEntry</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>coding_unit_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eob_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>luma_weight</name></decl>, <modifier>*</modifier><name>chroma_weight</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dc_codes</name></decl>, <modifier>*</modifier><name>dc_bits</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>ac_codes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ac_bits</name></decl>, <modifier>*</modifier><name>ac_info</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>run_codes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>run_bits</name></decl>, <modifier>*</modifier><name>run</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bit_rates</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVRational</name></type> <name>packet_scale</name></decl>;</decl_stmt>

}</block></struct></type> <name>CIDEntry</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CIDEntry</name></type> <name><name>ff_dnxhd_cid_table</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_dnxhd_get_cid_table</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dnxhd_find_cid</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_dnxhd_print_profiles</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loglevel</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>ff_dnxhd_check_header_prefix_hr</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name> <init>= <expr><name>prefix</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prefix</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000FFFFLL</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0300</literal> <operator>&amp;&amp;</operator>

<name>data_offset</name> <operator>&gt;=</operator> <literal type="number">0x0280</literal> <operator>&amp;&amp;</operator> <name>data_offset</name> <operator>&lt;=</operator> <literal type="number">0x2170</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>data_offset</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>prefix</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>ff_dnxhd_check_header_prefix</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <name>DNXHD_HEADER_INITIAL</name> <operator>||</operator>

<name>prefix</name> <operator>==</operator> <name>DNXHD_HEADER_444</name> <operator>||</operator>

<call><name>ff_dnxhd_check_header_prefix_hr</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>prefix</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>ff_dnxhd_parse_header_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>prefix</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <operator>(</operator><name>prefix</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ff_dnxhd_check_header_prefix</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>avpriv_dnxhd_get_frame_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avpriv_dnxhd_get_hr_frame_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avpriv_dnxhd_get_interlaced</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cid</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
