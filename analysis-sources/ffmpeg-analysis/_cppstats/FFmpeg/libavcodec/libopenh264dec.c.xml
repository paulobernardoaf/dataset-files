<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libopenh264dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wels/codec_api.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wels/codec_ver.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libopenh264.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SVCContext</name> <block>{

<decl_stmt><decl><type><name>ISVCDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt>

}</block></struct></type> <name>SVCContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>svc_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WelsDestroyDecoder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>svc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDecodingParam</name></type> <name>param</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WelsTraceCallback</name></type> <name>callback_function</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_libopenh264_check_version</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WelsCreateDecoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log_level</name> <operator>=</operator> <name>WELS_LOG_DETAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>callback_function</name> <operator>=</operator> <name>ff_libopenh264_trace_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>DECODER_OPTION_TRACE_LEVEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>DECODER_OPTION_TRACE_CALLBACK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>callback_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>DECODER_OPTION_TRACE_CALLBACK_CONTEXT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>eOutputColorFormat</name></name> <operator>=</operator> <name>videoFormatI420</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>eEcActiveIdc</name></name> <operator>=</operator> <name>ERROR_CON_DISABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>sVideoProperty</name><operator>.</operator><name>eVideoBsType</name></name> <operator>=</operator> <name>VIDEO_BITSTREAM_DEFAULT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>Initialize</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cmResultSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Initialize failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SBufferInfo</name></type> <name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>ptrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avframe</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DECODING_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>end_of_stream</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>SetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>DECODER_OPTION_END_OF_STREAM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_of_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>FlushFrame</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>uiInBsTimeStamp</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>DecodeFrameNoDelay</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>DecodeFrame2</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>dsErrorFree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DecodeFrame failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>iBufferStatus</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No frame produced\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>UsrData</name><operator>.</operator><name>sSystemBuffer</name><operator>.</operator><name>iWidth</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>UsrData</name><operator>.</operator><name>sSystemBuffer</name><operator>.</operator><name>iHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avframe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>UsrData</name><operator>.</operator><name>sSystemBuffer</name><operator>.</operator><name>iStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>UsrData</name><operator>.</operator><name>sSystemBuffer</name><operator>.</operator><name>iStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>avframe</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avframe</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>ptrs</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avframe</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>uiOutYuvTimeStamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avframe</name><operator>-&gt;</operator><name>pkt_dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avframe</name><operator>-&gt;</operator><name>pkt_pts</name></name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENH264_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetOption</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>DECODER_OPTION_PROFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name><operator>)</operator><operator>-&gt;</operator><name>GetOption</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>DECODER_OPTION_LEVEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libopenh264_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libopenh264"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"OpenH264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>svc_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>svc_decode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>svc_decode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_SETS_PKT_DTS</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>bsfs</name> <operator>=</operator> <literal type="string">"h264_mp4toannexb"</literal></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libopenh264"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
