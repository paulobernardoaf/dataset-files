<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mss12.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODEL_MIN_SYMS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODEL_MAX_SYMS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRESH_ADAPTIVE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRESH_LOW</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRESH_HIGH</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Model</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cum_prob</name><index>[<expr><name>MODEL_MAX_SYMS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>weights</name><index>[<expr><name>MODEL_MAX_SYMS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idx2sym</name><index>[<expr><name>MODEL_MAX_SYMS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_syms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thr_weight</name></decl>, <name>threshold</name>;</decl_stmt>

}</block></struct></type> <name>Model</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ArithCoder</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>low</name></decl>, <name>high</name>, <name>value</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overread</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OVERREAD</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<union>union <block>{

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gB</name></decl>;</decl_stmt>

}</block> <decl><name>gbc</name></decl>;</union>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_model_sym</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ArithCoder</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_number</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ArithCoder</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>ArithCoder</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PixContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cache_size</name></decl>, <name>num_syms</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cache</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Model</name></type> <name>cache_model</name></decl>, <name>full_model</name>;</decl_stmt>

<decl_stmt><decl><type><name>Model</name></type> <name><name>sec_models</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>special_initial_cache</name></decl>;</decl_stmt>

}</block></struct></type> <name>PixContext</name>;</typedef>

<struct_decl>struct <name>MSS12Context</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>SliceContext</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>MSS12Context</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Model</name></type> <name>intra_region</name></decl>, <name>inter_region</name>;</decl_stmt>

<decl_stmt><decl><type><name>Model</name></type> <name>pivot</name></decl>, <name>edge_mode</name>, <name>split_mode</name>;</decl_stmt>

<decl_stmt><decl><type><name>PixContext</name></type> <name>intra_pix_ctx</name></decl>, <name>inter_pix_ctx</name>;</decl_stmt>

}</block></struct></type> <name>SliceContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MSS12Context</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pal_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>last_pal_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pal_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>mask_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>last_rgb_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>rgb_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>free_colours</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mvX</name></decl>, <name>mvY</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>corrupted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_split</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>full_model_syms</name></decl>;</decl_stmt>

}</block></struct></type> <name>MSS12Context</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_mss12_decode_rect</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mss12_model_update</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mss12_slicecontext_reset</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mss12_decode_init</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,

<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc1</name></decl></parameter>, <parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mss12_decode_end</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARITH_GET_BIT</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int prefix ##_get_bit(ArithCoder *c) { int range = c-&gt;high - c-&gt;low + 1; int bit = 2 * c-&gt;value - c-&gt;low &gt;= c-&gt;high; if (bit) c-&gt;low += range &gt;&gt; 1; else c-&gt;high = c-&gt;low + (range &gt;&gt; 1) - 1; prefix ##_normalise(c); return bit; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARITH_GET_MODEL_SYM</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int prefix ##_get_model_sym(ArithCoder *c, Model *m) { int idx, val; idx = prefix ##_get_prob(c, m-&gt;cum_prob); val = m-&gt;idx2sym[idx]; ff_mss12_model_update(m, idx); prefix ##_normalise(c); return val; }</cpp:value></cpp:define>

</unit>
