<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc_is.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_is.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_quantization.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>AACISError</name></name></type> <name>ff_aac_is_encoding_err</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ener0</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>ener1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ener01</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_pcoeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><ternary><condition><expr><name>use_pcoeffs</name></expr> ?</condition><then> <expr><name><name>sce0</name><operator>-&gt;</operator><name>pcoeffs</name></name></expr> </then><else>: <expr><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>R</name> <init>= <expr><ternary><condition><expr><name>use_pcoeffs</name></expr> ?</condition><then> <expr><name><name>sce1</name><operator>-&gt;</operator><name>pcoeffs</name></name></expr> </then><else>: <expr><name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>L34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">256</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>R34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">256</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>IS</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">256</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>I34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">256</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dist2</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AACISError</name></name></type> <name>is_error</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ener01</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ener0</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>pass</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>is_error</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band0</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band1</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_band_type</name></decl>, <decl><type ref="prev"/><name>is_sf_idx</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>e01_34</name> <init>= <expr><name>phase</name><operator>*</operator><call><name>pos_pow34</name><argument_list>(<argument><expr><name>ener1</name><operator>/</operator><name>ener0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>maxval</name></decl>, <decl><type ref="prev"/><name>dist_spec_err</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minthr</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>band0</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name><name>band1</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>L</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name>phase</name><operator>*</operator><name><name>R</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>ener0</name><operator>/</operator><name>ener01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>L34</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>L</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>R34</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>R</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>I34</name></expr></argument>, <argument><expr><name>IS</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <call><name>find_max_val</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>I34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_band_type</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>is_sf_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>L</name><index>[<expr><name>start</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>L34</name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name><name>band0</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>R</name><index>[<expr><name>start</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R34</name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name><name>band1</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IS</name></expr></argument>, <argument><expr><name>I34</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>is_sf_idx</name></expr></argument>, <argument><expr><name>is_band_type</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name>minthr</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dist_spec_err</name> <operator>+=</operator> <operator>(</operator><name><name>L34</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>I34</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>L34</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>I34</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dist_spec_err</name> <operator>+=</operator> <operator>(</operator><name><name>R34</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>I34</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>e01_34</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>R34</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>I34</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>e01_34</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dist_spec_err</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name>minthr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <name>dist_spec_err</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>pass</name></name> <operator>=</operator> <name>dist2</name> <operator>&lt;=</operator> <name>dist1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>phase</name></name> <operator>=</operator> <name>phase</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>dist2</name> <operator>-</operator> <name>dist1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>dist1</name></name> <operator>=</operator> <name>dist1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>dist2</name></name> <operator>=</operator> <name>dist2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_error</name><operator>.</operator><name>ener01</name></name> <operator>=</operator> <name>ener01</name></expr>;</expr_stmt>

<return>return <expr><name>is_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_search_for_is</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>prev_sf1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_bt</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_is</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq_mult</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>/</operator><operator>(</operator><literal type="number">1024.0f</literal><operator>/</operator><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nextband1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>nextband1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name><operator>*</operator><name>freq_mult</name> <operator>&gt;</operator> <name>INT_STEREO_LOW_LIMIT</name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>/</operator><literal type="number">170.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<call><name>ff_sfdelta_can_remove_band</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>nextband1</name></expr></argument>, <argument><expr><name>prev_sf1</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ener0</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ener1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ener01</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ener01p</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AACISError</name></name></type> <name>ph_err1</name></decl>, <decl><type ref="prev"/><name>ph_err2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>best</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>coef0</name> <init>= <expr><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coef1</name> <init>= <expr><name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ener0</name> <operator>+=</operator> <name>coef0</name><operator>*</operator><name>coef0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ener1</name> <operator>+=</operator> <name>coef1</name><operator>*</operator><name>coef1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ener01</name> <operator>+=</operator> <operator>(</operator><name>coef0</name> <operator>+</operator> <name>coef1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>coef0</name> <operator>+</operator> <name>coef1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ener01p</name> <operator>+=</operator> <operator>(</operator><name>coef0</name> <operator>-</operator> <name>coef1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>coef0</name> <operator>-</operator> <name>coef1</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>ph_err1</name> <operator>=</operator> <call><name>ff_aac_is_encoding_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>ener0</name></expr></argument>, <argument><expr><name>ener1</name></expr></argument>, <argument><expr><name>ener01p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ph_err2</name> <operator>=</operator> <call><name>ff_aac_is_encoding_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>ener0</name></expr></argument>, <argument><expr><name>ener1</name></expr></argument>, <argument><expr><name>ener01</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ph_err1</name><operator>.</operator><name>pass</name></name> <operator>&amp;&amp;</operator> <name><name>ph_err1</name><operator>.</operator><name>error</name></name> <operator>&lt;</operator> <name><name>ph_err2</name><operator>.</operator><name>error</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>ph_err1</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ph_err2</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>best</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>is_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>ener0</name> <operator>/</operator> <name><name>best</name><operator>-&gt;</operator><name>ener01</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>is_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>ener0</name><operator>/</operator><name>ener1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>best</name><operator>-&gt;</operator><name>phase</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>INTENSITY_BT</name></expr> </then><else>: <expr><name>INTENSITY_BT2</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_is</name> <operator>&amp;&amp;</operator> <name>prev_bt</name> <operator>!=</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>best</name><operator>-&gt;</operator><name>phase</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>INTENSITY_BT2</name></expr> </then><else>: <expr><name>INTENSITY_BT</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_bt</name> <operator>=</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce1</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_sf1</name> <operator>=</operator> <name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_is</name> <operator>=</operator> <name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>is_mode</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
