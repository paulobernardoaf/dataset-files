<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_h264.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_decode.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_vaapi_pic</name><parameter_list>(<parameter><decl><type><name>VAPictureH264</name> <modifier>*</modifier></type><name>va_pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>picture_id</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>VA_PICTURE_H264_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>TopFieldOrderCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>BottomFieldOrderCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vaapi_pic</name><parameter_list>(<parameter><decl><type><name>VAPictureH264</name> <modifier>*</modifier></type><name>va_pic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pic_structure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pic_structure</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pic_structure</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic_structure</name> <operator>&amp;=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>picture_id</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>frame_idx</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>pic_id</name></name></expr> </then><else>: <expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_structure</name> <operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>pic_structure</name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name><operator>)</operator></expr> ?</condition><then> <expr><name>VA_PICTURE_H264_TOP_FIELD</name></expr> </then><else>: <expr><name>VA_PICTURE_H264_BOTTOM_FIELD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><name>VA_PICTURE_H264_LONG_TERM_REFERENCE</name></expr> </then><else>: <expr><name>VA_PICTURE_H264_SHORT_TERM_REFERENCE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>TopFieldOrderCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>TopFieldOrderCnt</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>BottomFieldOrderCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>BottomFieldOrderCnt</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DPB</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VAPictureH264</name> <modifier>*</modifier></type><name>va_pics</name></decl>;</decl_stmt> 

}</block></struct></type> <name>DPB</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dpb_add</name><parameter_list>(<parameter><decl><type><name>DPB</name> <modifier>*</modifier></type><name>dpb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpb</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>dpb</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dpb</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VAPictureH264</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>va_pic</name> <init>= <expr><operator>&amp;</operator><name><name>dpb</name><operator>-&gt;</operator><name>va_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>va_pic</name><operator>-&gt;</operator><name>picture_id</name></name> <operator>==</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VAPictureH264</name></type> <name>temp_va_pic</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_va_pic</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>temp_va_pic</name><operator>.</operator><name>flags</name></name> <operator>^</operator> <name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>VA_PICTURE_H264_TOP_FIELD</name> <operator>|</operator> <name>VA_PICTURE_H264_BOTTOM_FIELD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>temp_va_pic</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>VA_PICTURE_H264_TOP_FIELD</name> <operator>|</operator> <name>VA_PICTURE_H264_BOTTOM_FIELD</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>temp_va_pic</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VA_PICTURE_H264_TOP_FIELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>TopFieldOrderCnt</name></name> <operator>=</operator> <name><name>temp_va_pic</name><operator>.</operator><name>TopFieldOrderCnt</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>BottomFieldOrderCnt</name></name> <operator>=</operator> <name><name>temp_va_pic</name><operator>.</operator><name>BottomFieldOrderCnt</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fill_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpb</name><operator>-&gt;</operator><name>va_pics</name><index>[<expr><name><name>dpb</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_vaapi_ReferenceFrames</name><parameter_list>(<parameter><decl><type><name>VAPictureParameterBufferH264</name> <modifier>*</modifier></type><name>pic_param</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DPB</name></type> <name>dpb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpb</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpb</name><operator>.</operator><name>max_size</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pic_param</name><operator>-&gt;</operator><name>ReferenceFrames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpb</name><operator>.</operator><name>va_pics</name></name> <operator>=</operator> <name><name>pic_param</name><operator>-&gt;</operator><name>ReferenceFrames</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dpb</name><operator>.</operator><name>max_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpb</name><operator>.</operator><name>va_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;&amp;</operator> <call><name>dpb_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dpb</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;&amp;</operator> <call><name>dpb_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dpb</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vaapi_RefPicList</name><parameter_list>(<parameter><decl><type><name>VAPictureH264</name></type> <name><name>RefPicList</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Ref</name> <modifier>*</modifier></type><name>ref_list</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ref_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ref_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RefPicList</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>ref_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr></argument>,

<argument><expr><name><name>ref_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RefPicList</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vaapi_plain_pred_weight_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>luma_weight_flag</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name><name>luma_weight</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name><name>luma_offset</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chroma_weight_flag</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name><name>chroma_weight</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name><name>chroma_offset</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>luma_weight_flag</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>chroma_weight_flag</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>luma_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>luma_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_offset</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_offset</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_h264_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAPictureParameterBufferH264</name></type> <name>pic_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAIQMatrixBufferH264</name></type> <name>iq_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_surface</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic_param</name> <operator>=</operator> <operator>(</operator><name>VAPictureParameterBufferH264</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>picture_width_in_mbs_minus1</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>picture_height_in_mbs_minus1</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>bit_depth_luma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>bit_depth_chroma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>num_ref_frames</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>,

<expr><operator>.</operator><name><name>seq_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>chroma_format_idc</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>,

<expr><operator>.</operator><name>residual_colour_transform_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>residual_color_transform_flag</name></name></expr>,

<expr><operator>.</operator><name>gaps_in_frame_num_value_allowed_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>gaps_in_frame_num_allowed_flag</name></name></expr>,

<expr><operator>.</operator><name>frame_mbs_only_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>,

<expr><operator>.</operator><name>mb_adaptive_frame_field_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name></expr>,

<expr><operator>.</operator><name>direct_8x8_inference_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>,

<expr><operator>.</operator><name>MinLumaBiPredSize8x8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>, 

<expr><operator>.</operator><name>log2_max_frame_num_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name> <operator>-</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>pic_order_cnt_type</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr>,

<expr><operator>.</operator><name>log2_max_pic_order_cnt_lsb_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>delta_pic_order_always_zero_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>pic_init_qp_minus26</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name> <operator>-</operator> <literal type="number">26</literal></expr>,

<expr><operator>.</operator><name>pic_init_qs_minus26</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qs</name></name> <operator>-</operator> <literal type="number">26</literal></expr>,

<expr><operator>.</operator><name>chroma_qp_index_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>second_chroma_qp_index_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name><name>pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>entropy_coding_mode_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr>,

<expr><operator>.</operator><name>weighted_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name></expr>,

<expr><operator>.</operator><name>weighted_bipred_idc</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name></expr>,

<expr><operator>.</operator><name>transform_8x8_mode_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>,

<expr><operator>.</operator><name>field_pic_flag</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr>,

<expr><operator>.</operator><name>constrained_intra_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name></expr>,

<expr><operator>.</operator><name>pic_order_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name></expr>,

<expr><operator>.</operator><name>deblocking_filter_control_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name></expr>,

<expr><operator>.</operator><name>redundant_pic_cnt_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name></expr>,

<expr><operator>.</operator><name>reference_pic_flag</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nal_ref_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>,

}</block></expr>,

<expr><operator>.</operator><name>frame_num</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_param</name><operator>.</operator><name>CurrPic</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>fill_vaapi_ReferenceFrames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic_param</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAPictureParameterBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pic_param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pic_param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList4x4</name></name></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList4x4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAIQMatrixBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>iq_matrix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iq_matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_h264_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vaapi_decode_issue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_draw_horiz_band</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_h264_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferH264</name></type> <name>slice_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slice_param</name> <operator>=</operator> <operator>(</operator><name>VASliceParameterBufferH264</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>slice_data_size</name> <operator>=</operator> <name>size</name></expr>,

<expr><operator>.</operator><name>slice_data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>slice_data_flag</name> <operator>=</operator> <name>VA_SLICE_DATA_FLAG_ALL</name></expr>,

<expr><operator>.</operator><name>slice_data_bit_offset</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>first_mb_in_slice</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>,

<expr><operator>.</operator><name>slice_type</name> <operator>=</operator> <call><name>ff_h264_get_slice_type</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>direct_spatial_mv_pred_flag</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>?</operator> <name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_active_minus1</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l1_active_minus1</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>?</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>cabac_init_idc</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>cabac_init_idc</name></name></expr>,

<expr><operator>.</operator><name>slice_qp_delta</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name></expr>,

<expr><operator>.</operator><name>disable_deblocking_filter_idc</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>?</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>:</operator> <name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>,

<expr><operator>.</operator><name>slice_alpha_c0_offset_div2</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>slice_beta_offset_div2</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>luma_log2_weight_denom</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name></expr>,

<expr><operator>.</operator><name>chroma_log2_weight_denom</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_RefPicList</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>.</operator><name>RefPicList0</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_RefPicList</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>.</operator><name>RefPicList1</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_plain_pred_weight_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>slice_param</name><operator>.</operator><name>luma_weight_l0_flag</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>luma_weight_l0</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>luma_offset_l0</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>slice_param</name><operator>.</operator><name>chroma_weight_l0_flag</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>chroma_weight_l0</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>chroma_offset_l0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_plain_pred_weight_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>slice_param</name><operator>.</operator><name>luma_weight_l1_flag</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>luma_weight_l1</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>luma_offset_l1</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>slice_param</name><operator>.</operator><name>chroma_weight_l1_flag</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>chroma_weight_l1</name></name></expr></argument>,

<argument><expr><name><name>slice_param</name><operator>.</operator><name>chroma_offset_l1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_slice_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>slice_param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>slice_param</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_vaapi_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_vaapi"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_h264_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_h264_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_h264_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodePicture</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_uninit</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_common_frame_params</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
