<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dvdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv_profile_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>BlockInfo</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>factor_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pos</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_put</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>partial_bit_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>partial_bit_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>BlockInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv_iweight_bits</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_iweight_88</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">32768</literal></expr>, <expr><literal type="number">16705</literal></expr>, <expr><literal type="number">16705</literal></expr>, <expr><literal type="number">17734</literal></expr>, <expr><literal type="number">17032</literal></expr>, <expr><literal type="number">17734</literal></expr>, <expr><literal type="number">18205</literal></expr>, <expr><literal type="number">18081</literal></expr>,

<expr><literal type="number">18081</literal></expr>, <expr><literal type="number">18205</literal></expr>, <expr><literal type="number">18725</literal></expr>, <expr><literal type="number">18562</literal></expr>, <expr><literal type="number">19195</literal></expr>, <expr><literal type="number">18562</literal></expr>, <expr><literal type="number">18725</literal></expr>, <expr><literal type="number">19266</literal></expr>,

<expr><literal type="number">19091</literal></expr>, <expr><literal type="number">19705</literal></expr>, <expr><literal type="number">19705</literal></expr>, <expr><literal type="number">19091</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">19643</literal></expr>, <expr><literal type="number">20267</literal></expr>,

<expr><literal type="number">20228</literal></expr>, <expr><literal type="number">20267</literal></expr>, <expr><literal type="number">19643</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">21826</literal></expr>, <expr><literal type="number">20853</literal></expr>, <expr><literal type="number">20806</literal></expr>,

<expr><literal type="number">20806</literal></expr>, <expr><literal type="number">20853</literal></expr>, <expr><literal type="number">21826</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">21400</literal></expr>,

<expr><literal type="number">21407</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">24598</literal></expr>, <expr><literal type="number">23786</literal></expr>, <expr><literal type="number">22018</literal></expr>, <expr><literal type="number">22018</literal></expr>, <expr><literal type="number">23786</literal></expr>,

<expr><literal type="number">24598</literal></expr>, <expr><literal type="number">25251</literal></expr>, <expr><literal type="number">24465</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><literal type="number">24465</literal></expr>, <expr><literal type="number">25251</literal></expr>, <expr><literal type="number">25972</literal></expr>, <expr><literal type="number">25172</literal></expr>,

<expr><literal type="number">25172</literal></expr>, <expr><literal type="number">25972</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">31521</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_iweight_248</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">32768</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">16705</literal></expr>, <expr><literal type="number">16705</literal></expr>, <expr><literal type="number">17734</literal></expr>, <expr><literal type="number">17734</literal></expr>, <expr><literal type="number">17734</literal></expr>, <expr><literal type="number">17734</literal></expr>,

<expr><literal type="number">18081</literal></expr>, <expr><literal type="number">18081</literal></expr>, <expr><literal type="number">18725</literal></expr>, <expr><literal type="number">18725</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">19091</literal></expr>, <expr><literal type="number">19091</literal></expr>,

<expr><literal type="number">19195</literal></expr>, <expr><literal type="number">19195</literal></expr>, <expr><literal type="number">18205</literal></expr>, <expr><literal type="number">18205</literal></expr>, <expr><literal type="number">18725</literal></expr>, <expr><literal type="number">18725</literal></expr>, <expr><literal type="number">19705</literal></expr>, <expr><literal type="number">19705</literal></expr>,

<expr><literal type="number">20267</literal></expr>, <expr><literal type="number">20267</literal></expr>, <expr><literal type="number">21826</literal></expr>, <expr><literal type="number">21826</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">20806</literal></expr>, <expr><literal type="number">20806</literal></expr>,

<expr><literal type="number">20267</literal></expr>, <expr><literal type="number">20267</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">20853</literal></expr>, <expr><literal type="number">20853</literal></expr>,

<expr><literal type="number">21400</literal></expr>, <expr><literal type="number">21400</literal></expr>, <expr><literal type="number">23786</literal></expr>, <expr><literal type="number">23786</literal></expr>, <expr><literal type="number">24465</literal></expr>, <expr><literal type="number">24465</literal></expr>, <expr><literal type="number">22018</literal></expr>, <expr><literal type="number">22018</literal></expr>,

<expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">24598</literal></expr>, <expr><literal type="number">24598</literal></expr>, <expr><literal type="number">24465</literal></expr>, <expr><literal type="number">24465</literal></expr>,

<expr><literal type="number">25172</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">25972</literal></expr>, <expr><literal type="number">25972</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">29692</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_iweight_1080_y</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>,

<expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>,

<expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>,

<expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">46</literal></expr>,

<expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">98</literal></expr>,

<expr><literal type="number">98</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">123</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_iweight_1080_c</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>,

<expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>,

<expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>,

<expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>,

<expr><literal type="number">84</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">93</literal></expr>,

<expr><literal type="number">96</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">197</literal></expr>,

<expr><literal type="number">197</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">246</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_iweight_720_y</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>,

<expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>,

<expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">63</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">92</literal></expr>,

<expr><literal type="number">96</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">196</literal></expr>,

<expr><literal type="number">196</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">246</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_iweight_720_c</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>,

<expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>,

<expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">80</literal></expr>,

<expr><literal type="number">80</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">82</literal></expr>,

<expr><literal type="number">82</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">168</literal></expr>,

<expr><literal type="number">168</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">186</literal></expr>,

<expr><literal type="number">192</literal></expr>, <expr><literal type="number">394</literal></expr>, <expr><literal type="number">382</literal></expr>, <expr><literal type="number">354</literal></expr>, <expr><literal type="number">382</literal></expr>, <expr><literal type="number">394</literal></expr>, <expr><literal type="number">406</literal></expr>, <expr><literal type="number">394</literal></expr>,

<expr><literal type="number">394</literal></expr>, <expr><literal type="number">406</literal></expr>, <expr><literal type="number">418</literal></expr>, <expr><literal type="number">438</literal></expr>, <expr><literal type="number">418</literal></expr>, <expr><literal type="number">464</literal></expr>, <expr><literal type="number">464</literal></expr>, <expr><literal type="number">492</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv_init_weight_tables</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>factor1</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>idct_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>factor2</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>idct_factor</name><index>[<expr><ternary><condition><expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4096</literal></expr> </then><else>: <expr><literal type="number">2816</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dv100_qstep</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, 

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">52</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>iweight1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iweight2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iweight1</name> <operator>=</operator> <operator>&amp;</operator><name><name>dv_iweight_720_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iweight2</name> <operator>=</operator> <operator>&amp;</operator><name><name>dv_iweight_720_c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>iweight1</name> <operator>=</operator> <operator>&amp;</operator><name><name>dv_iweight_1080_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iweight2</name> <operator>=</operator> <operator>&amp;</operator><name><name>dv_iweight_1080_c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>factor1</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>dv100_qstep</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>iweight1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>factor2</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>dv100_qstep</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>iweight2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dv_quant_areas</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>iweight1</name> <init>= <expr><operator>&amp;</operator><name><name>dv_iweight_88</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>iweight1</name> <operator>=</operator> <operator>&amp;</operator><name><name>dv_iweight_248</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dv_quant_areas</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>factor1</name> <operator>=</operator> <name><name>iweight1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ff_dv_quant_shifts</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>factor2</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>factor1</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvvideo_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dv_zigzag</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ff_dv_zigzag248_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dv_zigzag</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">48</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dv_zigzag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ff_dv_zigzag248_direct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dv_zigzag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idct_put</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idct_put</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_simple_idct248_put</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_dvvideo_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv_decode_ac</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>BlockInfo</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_index</name> <init>= <expr><name><name>gb</name><operator>-&gt;</operator><name>size_in_bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan_table</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>scan_table</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>factor_table</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>factor_table</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>partial_bit_count</name> <init>= <expr><name><name>mb</name><operator>-&gt;</operator><name>partial_bit_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>vlc_len</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OPEN_READER_NOSIZE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>partial_bit_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>re_cache</name> <operator>=</operator> <name>re_cache</name> <operator>&gt;&gt;</operator> <name>partial_bit_count</name> <operator>|</operator>

<name><name>mb</name><operator>-&gt;</operator><name>partial_bit_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>re_index</name> <operator>-=</operator> <name>partial_bit_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partial_bit_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%2d: bits=%04"</literal><name>PRIx32</name><literal type="string">" index=%u\n"</literal></expr></argument>,

<argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>re_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>NEG_USR32</name><argument_list>(<argument><expr><name>re_cache</name></expr></argument>, <argument><expr><name>TEX_VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_len</name> <operator>=</operator> <name><name>ff_dv_rl_vlc</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>NEG_USR32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>re_cache</name> <operator>&lt;&lt;</operator> <name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><operator>-</operator><name>vlc_len</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>ff_dv_rl_vlc</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_len</name> <operator>=</operator> <name>TEX_VLC_BITS</name> <operator>-</operator> <name>vlc_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>ff_dv_rl_vlc</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <name><name>ff_dv_rl_vlc</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>re_index</name> <operator>+</operator> <name>vlc_len</name> <operator>&gt;</operator> <name>last_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partial_bit_count</name></name> <operator>=</operator> <name>last_index</name> <operator>-</operator> <name>re_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partial_bit_buffer</name></name> <operator>=</operator> <name>re_cache</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>-</operator><literal type="number">1u</literal> <operator>&gt;&gt;</operator> <name><name>mb</name><operator>-&gt;</operator><name>partial_bit_count</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>re_index</name> <operator>=</operator> <name>last_index</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>re_index</name> <operator>+=</operator> <name>vlc_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"run=%d level=%d\n"</literal></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>*</operator> <name><name>factor_table</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>dv_iweight_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>

<name>dv_iweight_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan_table</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bit_copy</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits_left</name> <init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bits_left</name> <operator>&gt;=</operator> <name>MIN_CACHE_BITS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MIN_CACHE_BITS</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>MIN_CACHE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_left</name> <operator>-=</operator> <name>MIN_CACHE_BITS</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>put_block_8x4</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv100_idct_put_last_row_field_chroma</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv100_idct_put_last_row_field_luma</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_block_8x4</name><argument_list>(<argument><expr><name>blocks</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">24</literal> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_decode_video_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVwork_chunk</name> <modifier>*</modifier></type><name>work_chunk</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>, <decl><type ref="prev"/><name>dct_mode</name></decl>, <decl><type ref="prev"/><name>class1</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_index</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>last_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_stride</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>block1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>, <decl><type ref="prev"/><name>vs_pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockInfo</name></type> <name><name>mb_data</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>DV_MAX_BPM</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mb1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>sblock</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>DV_MAX_BPM</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>mb_bit_buffer</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">80</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>vs_bit_buffer</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">80</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>log2_blocksize</name> <init>= <expr><literal type="number">3</literal><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>is_field_mode</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vs_bit_buffer_damaged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mb_bit_buffer_damaged</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retried</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>mb_bit_buffer</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>vs_bit_buffer</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>DV_MAX_BPM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sblock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>work_chunk</name><operator>-&gt;</operator><name>buf_offset</name></name> <operator>*</operator> <literal type="number">80</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block1</name> <operator>=</operator> <operator>&amp;</operator><name><name>sblock</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb1</name> <operator>=</operator> <name>mb_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vs_pb</name></expr></argument>, <argument><expr><name>vs_bit_buffer</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_index</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>mb_index</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb1</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr><operator>,</operator> <expr><name>block1</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name> <operator>*</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>quant</name> <operator>=</operator> <name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0E</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vs_bit_buffer_damaged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sta</name> <operator>=</operator> <name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sta</name> <operator>!=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vs_bit_buffer_damaged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>mb_bit_buffer</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>mb1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name>block1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>last_index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>block_sizes</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>last_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_mode</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>class1</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idct_put</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>scan_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dv_zigzag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>factor_table</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>idct_factor</name><index>[<expr><operator>(</operator><name>j</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator>

<name>class1</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator>

<name>quant</name> <operator>*</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name> <operator>|=</operator> <operator>!</operator><name>j</name> <operator>&amp;&amp;</operator> <name>dct_mode</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idct_put</name><index>[<expr><name>dct_mode</name> <operator>&amp;&amp;</operator> <name>log2_blocksize</name> <operator>==</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>scan_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dv_zigzag</name><index>[<expr><name>dct_mode</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>factor_table</name></name> <operator>=</operator>

<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>idct_factor</name><index>[<expr><operator>(</operator><name>class1</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">22</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator>

<name>dct_mode</name> <operator>*</operator> <literal type="number">22</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator>

<operator>(</operator><name>quant</name> <operator>+</operator> <name><name>ff_dv_quant_offset</name><index>[<expr><name>class1</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>dc</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>last_index</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>partial_bit_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"MB block: %d, %d "</literal></expr></argument>, <argument><expr><name>mb_index</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dv_decode_ac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bit_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vs_bit_buffer_damaged</name> <operator>=</operator> <name><name>mb_bit_buffer_damaged</name><index>[<expr><name>mb_index</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mb_bit_buffer_damaged</name><index>[<expr><name>mb_index</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"***pass 2 size=%d MB#=%d\n"</literal></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mb_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name>block1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>mb1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>mb_bit_buffer</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>block</name> <operator>+=</operator> <literal type="number">64</literal></expr><operator>,</operator> <expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dv_decode_ac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vs_bit_buffer_damaged</name> <operator>=</operator> <name><name>mb_bit_buffer_damaged</name><index>[<expr><name>mb_index</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bit_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vs_pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"***pass 3 size=%d\n"</literal></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vs_pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>sblock</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>mb_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>vs_bit_buffer</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vs_pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vs_pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vs_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_index</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>mb_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>vs_bit_buffer_damaged</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"start %d:%d\n"</literal></expr></argument>, <argument><expr><name>mb_index</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dv_decode_ac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>mb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"AC EOB marker is absent pos=%d\n"</literal></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vs_bit_buffer_damaged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vs_bit_buffer_damaged</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>retried</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Concealing bitstream errors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retried</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>sblock</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>mb_data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_index</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>mb_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>dv_calculate_mb_xy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>work_chunk</name></expr></argument>, <argument><expr><name>mb_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV411P</name> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">704</literal> <operator>/</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>!=</operator> <literal type="number">134</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_stride</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>log2_blocksize</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>y_stride</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">134</literal> <operator>&amp;&amp;</operator> <name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dv100_idct_put_last_row_field_luma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>video_stype</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>y_ptr</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>y_ptr</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>y_ptr</name> <operator>+</operator> <name>y_stride</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>y_ptr</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator> <operator>+</operator> <name>y_stride</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c_offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>mb_x</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV411P</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>c_ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>c_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV411P</name> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">704</literal> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>aligned_pixels</name><index>[<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>aligned_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>c_ptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>mb</name><operator>-&gt;</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>c_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name>pixels</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>pixels</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>log2_blocksize</name><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c_ptr1</name> <operator>=</operator> <name>c_ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>log2_blocksize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c_ptr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c_ptr1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>ptr1</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>y_stride</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mb_y</name> <operator>==</operator> <literal type="number">134</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_blocksize</name><operator>)</operator></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>log2_blocksize</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">134</literal> <operator>&amp;&amp;</operator> <name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dv100_idct_put_last_row_field_chroma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c_ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>is_field_mode</name><index>[<expr><name>mb_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>mb</name><operator>++</operator><operator>)</operator><operator>-&gt;</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>c_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>mb</name><operator>++</operator><operator>)</operator><operator>-&gt;</operator><call><name>idct_put</name><argument_list>(<argument><expr><name>c_ptr</name> <operator>+</operator> <name>y_stride</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvvideo_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsc_pack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>apt</name></decl>, <decl><type ref="prev"/><name>is16_9</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>ff_dv_frame_profile</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name> <operator>||</operator> <name>buf_size</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find dv frame profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_dv_init_dynamic_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing the work tables.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dv_init_weight_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name><name>frame</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vsc_pack</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">48</literal> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vsc_pack</name> <operator>==</operator> <name>dv_video_control</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>apt</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is16_9</name> <operator>=</operator> <operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>apt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_sar</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>sar</name><index>[<expr><name>is16_9</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>vsc_pack</name> <operator>==</operator> <name>dv_video_control</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dv_decode_video_segment</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>work_chunks</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>dv_work_pool_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVwork_chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dvvideo_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvvideo"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DV (Digital Video)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVVideoContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>dvvideo_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>dvvideo_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name></expr>,

<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
