<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dxva2_vc1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxva2_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLICES</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<struct>struct <name>dxva2_picture_context</name> <block>{

<decl_stmt><decl><type><name>DXVA_PictureParameters</name></type> <name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA_SliceInfo</name></type> <name><name>slice</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bitstream_size</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_picture_parameters</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,

<parameter><decl><type><name>DXVA_PictureParameters</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Picture</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intcomp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name> <operator>!=</operator> <literal type="number">32</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name> <operator>!=</operator> <literal type="number">32</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>intcomp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wDecodedPictureIndex</name></name> <operator>=</operator>

<name><name>pp</name><operator>-&gt;</operator><name>wDeblockedPictureIndex</name></name> <operator>=</operator> <call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>current_picture</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wForwardRefPictureIndex</name></name> <operator>=</operator> <call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wForwardRefPictureIndex</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBackwardRefPictureIndex</name></name> <operator>=</operator> <call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBackwardRefPictureIndex</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wPicWidthInMBminus1</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wPicHeightInMBminus1</name></name><operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wPicWidthInMBminus1</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wPicHeightInMBminus1</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bMacroblockWidthMinus1</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bMacroblockHeightMinus1</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bBlockWidthMinus1</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bBlockHeightMinus1</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bBPPminus1</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicStructure</name></name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>&amp;</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicStructure</name></name> <operator>|=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bSecondField</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>interlace</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>second_field</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicIntra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicBackwardPrediction</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bBidirectionalAveragingMode</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><call><name>DXVA_CONTEXT_CFG_INTRARESID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><call><name>DXVA_CONTEXT_CFG_RESIDACCEL</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>intcomp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bMVprecisionAndChromaRelation</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_1MV_HPEL_BILIN</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bChromaFormat</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>chromaformat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicScanFixed</name></name> <operator>=</operator> <call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicScanMethod</name></name> <operator>=</operator> <call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicReadbackRequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bRcontrol</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>rnd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicSpatialResid8</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>panscanflag</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>refdist_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>dquant</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicOverflowBlocks</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>multires</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>resync_marker</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>rangered</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicExtrapolation</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicDeblocked</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name><name>pp</name><operator>-&gt;</operator><name>bPicBackwardPrediction</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>overlap</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>PROFILE_ADVANCED</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>rangeredfrm</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicDeblockConfined</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>postprocflag</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>broadcast</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>interlace</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>tfcntrflag</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>psf</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>extended_dmv</name></name> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPic4MVallowed</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicOBMC</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>range_mapy_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>range_mapy</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>range_mapuv_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>range_mapuv</name></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bPicBinPB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bMV_RPS</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator> <name><name>pp</name><operator>-&gt;</operator><name>bPicBackwardPrediction</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>refdist</name></name> <operator>+</operator> <literal type="number">9</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bReservedBits</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>intcomp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamFcodes</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamPCEelements</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamFcodes</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamPCEelements</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>intcomp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamFcodes</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamPCEelements</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamFcodes</name></name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitstreamPCEelements</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bBitstreamConcealmentNeed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bBitstreamConcealmentMethod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>DXVA_SliceInfo</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wHorizontalPosition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wVerticalPosition</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>dwSliceBitsInBuffer</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>dwSliceDataLocation</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>bStartCodeBitOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>bReservedBits</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>bfraction_lut_index</name></name> <operator>+</operator> <literal type="number">9</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wMBbitOffset</name></name> <operator>=</operator> <ternary><condition><expr><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wNumberMBsInSlice</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wQuantizerScaleCode</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wBadSliceChopping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_bitstream_and_slice_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x0d</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>start_code_size</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mb_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>field_mode</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA_SliceInfo</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dxva_data_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dxva_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>dxva_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_BITSTREAM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_GetDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>,

<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_BitStreamDateBufferType</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_GetBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dxva_data</name> <operator>=</operator> <name>dxva_data_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>dxva_data</name> <operator>+</operator> <name>dxva_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>dwSliceDataLocation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>dwSliceBitsInBuffer</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_code_size</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>current</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to build bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>dwSliceDataLocation</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wNumberMBsInSlice</name></name> <operator>=</operator>

<name><name>slice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wNumberMBsInSlice</name> <operator>-</operator> <name><name>slice</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wNumberMBsInSlice</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wNumberMBsInSlice</name></name> <operator>=</operator>

<name>mb_count</name> <operator>-</operator> <name><name>slice</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wNumberMBsInSlice</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_code_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>start_code</name></expr></argument>, <argument><expr><name>start_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>second_field</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0c</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0b</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>start_code_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>dwSliceBitsInBuffer</name></name> <operator>+=</operator> <name>start_code_size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>current</name> <operator>-</operator> <name>dxva_data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice</name> <operator>&amp;&amp;</operator> <name>padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>dwSliceBitsInBuffer</name></name> <operator>+=</operator> <name>padding</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_ReleaseDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_ReleaseBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>dsc11</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc11</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <name>mb_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DXVA2_DecodeBufferDesc</name> <modifier>*</modifier></type><name>dsc2</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>CompressedBufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <name>mb_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_SliceControlBufferType</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ff_dxva2_commit_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>,

<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>mb_count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_vc1_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DXVA_CONTEXT_VALID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_picture_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_vc1_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Picture</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>current_picture</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&gt;=</operator> <name>MAX_SLICES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%d slices in dxva2"</literal></expr></argument>,

<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name> <operator>&amp;&amp;</operator>

<name>size</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>IS_MARKER</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>buffer</name> <operator>-</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_vc1_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_dxva2_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>commit_bitstream_and_slice_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg_draw_horiz_band</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_DXVA2_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_wmv3_dxva2_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv3_dxva2"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV3</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_DXVA2_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vc1_dxva2_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vc1_dxva2"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_D3D11VA_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_wmv3_d3d11va_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv3_d3d11va"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV3</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_D3D11VA2_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_wmv3_d3d11va2_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv3_d3d11va2"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV3</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_D3D11VA_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vc1_d3d11va_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vc1_d3d11va"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VC1_D3D11VA2_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vc1_d3d11va2_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vc1_d3d11va2"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
