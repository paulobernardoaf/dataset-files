<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libaomdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aom/aom_decoder.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aom/aomdx.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AV1DecodeContext</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>aom_codec_ctx</name></name></type> <name>decoder</name></decl>;</decl_stmt>

}</block></struct></type> <name>AV1DecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aom_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>aom_codec_iface</name></name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1DecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>aom_codec_dec_cfg</name></name></type> <name>deccfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>threads</name> <operator>=</operator> <macro><name>FFMIN</name><argument_list>(<argument>avctx-&gt;thread_count ? avctx-&gt;thread_count : av_cpu_count()</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>aom_codec_version_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>aom_codec_build_config</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aom_codec_dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deccfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AOM_CODEC_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>aom_codec_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize decoder: %s\n"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>image_copy_16_to_8</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>aom_image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>d_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>x_chroma_shift</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>img</name><operator>-&gt;</operator><name>x_chroma_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>y_chroma_shift</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>img</name><operator>-&gt;</operator><name>y_chroma_shift</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>img</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_pix_fmt</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>aom_image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVColorRange</name></name></type> <name><name>color_ranges</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AVCOL_RANGE_MPEG</name></expr>, <expr><name>AVCOL_RANGE_JPEG</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>color_ranges</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>range</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>cp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>mc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>tc</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOM_IMG_FMT_I420</name></expr>:</case>

<case>case <expr><name>AOM_IMG_FMT_I42016</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>img</name><operator>-&gt;</operator><name>monochrome</name></name></expr> ?</condition><then>

<expr><name>AV_PIX_FMT_GRAY8</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_MAIN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>img</name><operator>-&gt;</operator><name>monochrome</name></name></expr> ?</condition><then>

<expr><name>AV_PIX_FMT_GRAY10</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P10</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_MAIN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>img</name><operator>-&gt;</operator><name>monochrome</name></name></expr> ?</condition><then>

<expr><name>AV_PIX_FMT_GRAY12</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P12</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>AOM_IMG_FMT_I422</name></expr>:</case>

<case>case <expr><name>AOM_IMG_FMT_I42216</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>AOM_IMG_FMT_I444</name></expr>:</case>

<case>case <expr><name>AOM_IMG_FMT_I44416</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_HIGH</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_HIGH</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<default>default:</default>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aom_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1DecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>aom_image</name></name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aom_codec_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator>

<name>AOM_CODEC_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>aom_codec_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name> <init>= <expr><call><name>aom_codec_error_detail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to decode frame: %s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>detail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Additional information: %s\n"</literal></expr></argument>,

<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>img</name> <operator>=</operator> <call><name>aom_codec_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name> <operator>&gt;</operator> <name><name>img</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name><name>img</name><operator>-&gt;</operator><name>d_h</name></name> <operator>&gt;</operator> <name><name>img</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Display dimensions %dx%d exceed storage %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_h</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_pix_fmt</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>img</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported output colorspace (%d) / bit_depth (%d)\n"</literal></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>img</name><operator>-&gt;</operator><name>d_h</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"dimension change! %dx%d -&gt; %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>fmt</name></name> <operator>&amp;</operator> <name>AOM_IMG_FMT_HIGHBITDEPTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>image_copy_16_to_8</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>picture</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>img</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>d_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aom_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1DecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aom_codec_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>av1_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>aom_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aom_codec_av1_dx_algo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libaom_av1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libaom-av1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libaom AV1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AV1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AV1DecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>av1_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aom_free</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aom_decode</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_av1_profiles</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libaom"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
