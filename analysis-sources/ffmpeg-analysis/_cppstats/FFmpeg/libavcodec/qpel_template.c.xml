<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qpel_template.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXOP2</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void OPNAME ##_no_rnd_pixels8_l2_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { int i; for (i = 0; i &lt; h; i++) { uint32_t a, b; a = AV_RN32(&amp;src1[i * src_stride1]); b = AV_RN32(&amp;src2[i * src_stride2]); OP(*((uint32_t *) &amp;dst[i * dst_stride]), no_rnd_avg32(a, b)); a = AV_RN32(&amp;src1[i * src_stride1 + 4]); b = AV_RN32(&amp;src2[i * src_stride2 + 4]); OP(*((uint32_t *) &amp;dst[i * dst_stride + 4]), no_rnd_avg32(a, b)); } } static inline void OPNAME ##_no_rnd_pixels16_l2_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { OPNAME ##_no_rnd_pixels8_l2_8(dst, src1, src2, dst_stride, src_stride1, src_stride2, h); OPNAME ##_no_rnd_pixels8_l2_8(dst + 8, src1 + 8, src2 + 8, dst_stride, src_stride1, src_stride2, h); } static inline void OPNAME ##_pixels8_l4_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, const uint8_t *src3, const uint8_t *src4, int dst_stride, int src_stride1, int src_stride2, int src_stride3, int src_stride4, int h) { int i; for (i = 0; i &lt; h; i++) { uint32_t a, b, c, d, l0, l1, h0, h1; a = AV_RN32(&amp;src1[i * src_stride1]); b = AV_RN32(&amp;src2[i * src_stride2]); c = AV_RN32(&amp;src3[i * src_stride3]); d = AV_RN32(&amp;src4[i * src_stride4]); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); l1 = (c &amp; 0x03030303UL) + (d &amp; 0x03030303UL); h1 = ((c &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((d &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) &amp;dst[i * dst_stride]), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); a = AV_RN32(&amp;src1[i * src_stride1 + 4]); b = AV_RN32(&amp;src2[i * src_stride2 + 4]); c = AV_RN32(&amp;src3[i * src_stride3 + 4]); d = AV_RN32(&amp;src4[i * src_stride4 + 4]); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); l1 = (c &amp; 0x03030303UL) + (d &amp; 0x03030303UL); h1 = ((c &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((d &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) &amp;dst[i * dst_stride + 4]), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); } } static inline void OPNAME ##_no_rnd_pixels8_l4_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, const uint8_t *src3, const uint8_t *src4, int dst_stride, int src_stride1, int src_stride2, int src_stride3, int src_stride4, int h) { int i; for (i = 0; i &lt; h; i++) { uint32_t a, b, c, d, l0, l1, h0, h1; a = AV_RN32(&amp;src1[i * src_stride1]); b = AV_RN32(&amp;src2[i * src_stride2]); c = AV_RN32(&amp;src3[i * src_stride3]); d = AV_RN32(&amp;src4[i * src_stride4]); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x01010101UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); l1 = (c &amp; 0x03030303UL) + (d &amp; 0x03030303UL); h1 = ((c &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((d &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) &amp;dst[i * dst_stride]), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); a = AV_RN32(&amp;src1[i * src_stride1 + 4]); b = AV_RN32(&amp;src2[i * src_stride2 + 4]); c = AV_RN32(&amp;src3[i * src_stride3 + 4]); d = AV_RN32(&amp;src4[i * src_stride4 + 4]); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x01010101UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); l1 = (c &amp; 0x03030303UL) + (d &amp; 0x03030303UL); h1 = ((c &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((d &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) &amp;dst[i * dst_stride + 4]), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); } } static inline void OPNAME ##_pixels16_l4_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, const uint8_t *src3, const uint8_t *src4, int dst_stride, int src_stride1, int src_stride2, int src_stride3, int src_stride4, int h) { OPNAME ##_pixels8_l4_8(dst, src1, src2, src3, src4, dst_stride, src_stride1, src_stride2, src_stride3, src_stride4, h); OPNAME ##_pixels8_l4_8(dst + 8, src1 + 8, src2 + 8, src3 + 8, src4 + 8, dst_stride, src_stride1, src_stride2, src_stride3, src_stride4, h); } static inline void OPNAME ##_no_rnd_pixels16_l4_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, const uint8_t *src3, const uint8_t *src4, int dst_stride, int src_stride1, int src_stride2, int src_stride3, int src_stride4, int h) { OPNAME ##_no_rnd_pixels8_l4_8(dst, src1, src2, src3, src4, dst_stride, src_stride1, src_stride2, src_stride3, src_stride4, h); OPNAME ##_no_rnd_pixels8_l4_8(dst + 8, src1 + 8, src2 + 8, src3 + 8, src4 + 8, dst_stride, src_stride1, src_stride2, src_stride3, src_stride4, h); }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_avg32(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_no_rnd_pixels8_8_c</name></cpp:macro> <cpp:value>put_pixels8_8_c</cpp:value></cpp:define>

<macro><name>PIXOP2</name><argument_list>(<argument>avg</argument>, <argument>op_avg</argument>)</argument_list></macro>

<macro><name>PIXOP2</name><argument_list>(<argument>put</argument>, <argument>op_put</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>

</unit>
