<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qsv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxplugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxjpeg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_qsv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx/mfxvp8.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>ff_qsv_codec_id_to_mfx</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_AVC</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_HEVC</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_MPEG2</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_VC1</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_VC1</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_VP8</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_JPEG</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case>

<return>return <expr><name>MFX_CODEC_VP9</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_level_to_mfx</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MFX_LEVEL_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<return>return <expr><name>level</name> <operator>/</operator> <literal type="number">3</literal></expr>;</return>

<default>default:</default>

<return>return <expr><name>level</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>mfx_iopattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

}</block> <decl><name><name>qsv_iopatterns</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>MFX_IOPATTERN_IN_VIDEO_MEMORY</name></expr>, <expr><literal type="string">"input is video memory surface"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>MFX_IOPATTERN_IN_SYSTEM_MEMORY</name></expr>, <expr><literal type="string">"input is system memory surface"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name></expr>, <expr><literal type="string">"input is opaque memory surface"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>MFX_IOPATTERN_OUT_VIDEO_MEMORY</name></expr>, <expr><literal type="string">"output is video memory surface"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name></expr>, <expr><literal type="string">"output is system memory surface"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name></expr>, <expr><literal type="string">"output is opaque memory surface"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>ff_qsv_print_iopattern</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mfx_iopattern</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>qsv_iopatterns</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>qsv_iopatterns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mfx_iopattern</name> <operator>==</operator> <name>mfx_iopattern</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>qsv_iopatterns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"unknown iopattern"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>extra_string</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>mfxerr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>averr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

}</block> <decl><name><name>qsv_errors</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>MFX_ERR_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"success"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_UNKNOWN</name></expr>, <expr><name>AVERROR_UNKNOWN</name></expr>, <expr><literal type="string">"unknown error"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_NULL_PTR</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"NULL pointer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_UNSUPPORTED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"unsupported"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"failed to allocate memory"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_NOT_ENOUGH_BUFFER</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"insufficient input/output buffer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_INVALID_HANDLE</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid handle"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_LOCK_MEMORY</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"failed to lock the memory block"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_NOT_INITIALIZED</name></expr>, <expr><name>AVERROR_BUG</name></expr>, <expr><literal type="string">"not initialized"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_NOT_FOUND</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"specified object was not found"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_MORE_DATA</name></expr>, <expr><name>AVERROR_UNKNOWN</name></expr>, <expr><literal type="string">"expect more data at input"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_MORE_SURFACE</name></expr>, <expr><name>AVERROR_UNKNOWN</name></expr>, <expr><literal type="string">"expect more surface at output"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_MORE_BITSTREAM</name></expr>, <expr><name>AVERROR_UNKNOWN</name></expr>, <expr><literal type="string">"expect more bitstream at output"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_ABORTED</name></expr>, <expr><name>AVERROR_UNKNOWN</name></expr>, <expr><literal type="string">"operation aborted"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_DEVICE_LOST</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"device lost"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_INCOMPATIBLE_VIDEO_PARAM</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"incompatible video parameters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_INVALID_VIDEO_PARAM</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid video parameters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_UNDEFINED_BEHAVIOR</name></expr>, <expr><name>AVERROR_BUG</name></expr>, <expr><literal type="string">"undefined behavior"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_DEVICE_FAILED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"device failed"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_INCOMPATIBLE_AUDIO_PARAM</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"incompatible audio parameters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_ERR_INVALID_AUDIO_PARAM</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid audio parameters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_IN_EXECUTION</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"operation in execution"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_DEVICE_BUSY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"device busy"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_VIDEO_PARAM_CHANGED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"video parameters changed"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_PARTIAL_ACCELERATION</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"partial acceleration"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_INCOMPATIBLE_VIDEO_PARAM</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"incompatible video parameters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_VALUE_NOT_CHANGED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"value is saturated"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_OUT_OF_RANGE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"value out of range"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_FILTER_SKIPPED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"filter skipped"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>MFX_WRN_INCOMPATIBLE_AUDIO_PARAM</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"incompatible audio parameters"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>ff_qsv_map_error</name><parameter_list>(<parameter><decl><type><name>mfxStatus</name></type> <name>mfx_err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>qsv_errors</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>qsv_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mfxerr</name> <operator>==</operator> <name>mfx_err</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>desc</name> <operator>=</operator> <name><name>qsv_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>qsv_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>averr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>desc</name> <operator>=</operator> <literal type="string">"unknown error"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_print_error</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>mfxStatus</name></type> <name>err</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_map_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: %s (%d)\n"</literal></expr></argument>, <argument><expr><name>error_string</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_print_warning</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>mfxStatus</name></type> <name>err</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>warning_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_map_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: %s (%d)\n"</literal></expr></argument>, <argument><expr><name>warning_string</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ff_qsv_map_fourcc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>fourcc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MFX_FOURCC_NV12</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_NV12</name></expr>;</return>

<case>case <expr><name>MFX_FOURCC_P010</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_P010</name></expr>;</return>

<case>case <expr><name>MFX_FOURCC_P8</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_PAL8</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_map_pixfmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>fourcc</name> <operator>=</operator> <name>MFX_FOURCC_NV12</name></expr>;</expr_stmt>

<return>return <expr><name>AV_PIX_FMT_NV12</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>fourcc</name> <operator>=</operator> <name>MFX_FOURCC_P010</name></expr>;</expr_stmt>

<return>return <expr><name>AV_PIX_FMT_P010</name></expr>;</return>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_find_surface_idx</name><parameter_list>(<parameter><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_mids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>mid</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mid</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>MemId</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>ff_qsv_map_picstruct</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mfx_pic_struct</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>field</name> <init>= <expr><name>AV_FIELD_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mfx_pic_struct</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MFX_PICSTRUCT_PROGRESSIVE</name></expr>:</case>

<expr_stmt><expr><name>field</name> <operator>=</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MFX_PICSTRUCT_FIELD_TFF</name></expr>:</case>

<expr_stmt><expr><name>field</name> <operator>=</operator> <name>AV_FIELD_TT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MFX_PICSTRUCT_FIELD_BFF</name></expr>:</case>

<expr_stmt><expr><name>field</name> <operator>=</operator> <name>AV_FIELD_BB</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>field</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPictureType</name></name></type> <name>ff_qsv_map_pictype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mfx_pic_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPictureType</name></name></type> <name>type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mfx_pic_type</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MFX_FRAMETYPE_I</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>mfx_pic_type</name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_S</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_SI</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>MFX_FRAMETYPE_B</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MFX_FRAMETYPE_P</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>mfx_pic_type</name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_S</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_SP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>MFX_FRAMETYPE_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_load_plugins</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>load_plugins</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_plugins</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>load_plugins</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>load_plugins</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mfxPluginUID</name></type> <name>uid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>load_plugins</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plugin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>uid</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid plugin UID length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>load_plugin_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>uid</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>plugin</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%2hhx"</literal></expr></argument>, <argument><expr><name><name>uid</name><operator>.</operator><name>Data</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid plugin UID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>load_plugin_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoUSER_Load</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>errorbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Could not load the requested plugin '%s'"</literal></expr></argument>, <argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>load_plugin_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>load_plugins</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>load_plugins</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>load_plugin_fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_QSV_LINUX_SESSION_HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_qsv_set_display_handle</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVSession</name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>child_device_opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_opts</name></expr></argument>, <argument><expr><literal type="string">"kernel_driver"</literal></expr></argument>, <argument><expr><literal type="string">"i915"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_opts</name></expr></argument>, <argument><expr><literal type="string">"driver"</literal></expr></argument>, <argument><expr><literal type="string">"iHD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwdevice_ctx_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>va_device_ref</name></name></expr></argument>, <argument><expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>child_device_opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create a VAAPI device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>va_device_ctx</name></name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>qs</name><operator>-&gt;</operator><name>va_device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hwctx</name> <operator>=</operator> <name><name>qs</name><operator>-&gt;</operator><name>va_device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>mfxHandleType</name><operator>)</operator><name>MFX_HANDLE_VA_DISPLAY</name></expr></argument>, <argument><expr><operator>(</operator><name>mfxHDL</name><operator>)</operator><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"Error during set display handle\n"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type> <name>ff_qsv_init_internal_session</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVSession</name> <modifier>*</modifier></type><name>qs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>load_plugins</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gpu_copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name> <init>= <expr><name>MFX_IMPL_AUTO_ANY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name> <init>= <expr><block>{ <expr><block>{ <expr><name>QSV_VERSION_MINOR</name></expr>, <expr><name>QSV_VERSION_MAJOR</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxInitParam</name></type> <name>init_par</name> <init>= <expr><block>{ <expr><name>MFX_IMPL_AUTO_ANY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>init_par</name><operator>.</operator><name>GPUCopy</name></name> <operator>=</operator> <name>gpu_copy</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>init_par</name><operator>.</operator><name>Implementation</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>init_par</name><operator>.</operator><name>Version</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXInitEx</name><argument_list>(<argument><expr><name>init_par</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing an internal MFX session"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_QSV_LINUX_SESSION_HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_set_display_handle</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_load_plugins</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>load_plugins</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error loading plugins\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>MFX_IMPL_BASETYPE</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MFX_IMPL_SOFTWARE</name></expr>:</case>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"software"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MFX_IMPL_HARDWARE</name></expr>:</case>

<case>case <expr><name>MFX_IMPL_HARDWARE2</name></expr>:</case>

<case>case <expr><name>MFX_IMPL_HARDWARE3</name></expr>:</case>

<case>case <expr><name>MFX_IMPL_HARDWARE4</name></expr>:</case>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"hardware accelerated"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Initialized an internal MFX session using %s implementation\n"</literal></expr></argument>,

<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mids_buf_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ref</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>qsv_create_mids</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>hw_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces</name> <init>= <expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>mids_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hw_frames_ref1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>mids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hw_frames_ref1</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>hw_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_frames_ref1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mids</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_surfaces</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mids</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_frames_ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mids_buf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>mids</name></expr></argument>, <argument><expr><name>nb_surfaces</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mids</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>mids_buf_free</name></expr></argument>, <argument><expr><name>hw_frames_ref1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mids_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_frames_ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_surfaces</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>mid</name> <init>= <expr><operator>&amp;</operator><name><name>mids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mid</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mid</name><operator>-&gt;</operator><name>hw_frames_ref</name></name> <operator>=</operator> <name>hw_frames_ref1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>mids_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_setup_mids</name><parameter_list>(<parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ref</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>mids_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>hw_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>mids</name> <init>= <expr><operator>(</operator><name>QSVMid</name><operator>*</operator><operator>)</operator><name><name>mids_buf</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces</name> <init>= <expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_surfaces</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_surfaces</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>mids</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>=</operator> <name>nb_surfaces</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxMemId</name><operator>)</operator><call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>hw_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>mids_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>(</operator><name>AVBufferRef</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>qsv_frame_alloc</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,

<parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>pthis</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <operator>(</operator><name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name> <operator>|</operator>

<name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <operator>(</operator><name>MFX_MEMTYPE_FROM_DECODE</name> <operator>|</operator> <name>MFX_MEMTYPE_FROM_ENCODE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_EXTERNAL_FRAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>Info</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>i1</name> <init>= <expr><operator>&amp;</operator><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>Width</name></name> <operator>&gt;</operator> <name><name>i1</name><operator>-&gt;</operator><name>Width</name></name> <operator>||</operator> <name><name>i</name><operator>-&gt;</operator><name>Height</name></name> <operator>&gt;</operator> <name><name>i1</name><operator>-&gt;</operator><name>Height</name></name> <operator>||</operator>

<name><name>i</name><operator>-&gt;</operator><name>FourCC</name></name> <operator>!=</operator> <name><name>i1</name><operator>-&gt;</operator><name>FourCC</name></name> <operator>||</operator> <name><name>i</name><operator>-&gt;</operator><name>ChromaFormat</name></name> <operator>!=</operator> <name><name>i1</name><operator>-&gt;</operator><name>ChromaFormat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>logctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mismatching surface properties in an "</literal>

<literal type="string">"allocation request: %dx%d %d %d vs %dx%d %d %d\n"</literal></expr></argument>,

<argument><expr><name><name>i</name><operator>-&gt;</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>FourCC</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>ChromaFormat</name></name></expr></argument>,

<argument><expr><name><name>i1</name><operator>-&gt;</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>i1</name><operator>-&gt;</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>i1</name><operator>-&gt;</operator><name>FourCC</name></name></expr></argument>, <argument><expr><name><name>i1</name><operator>-&gt;</operator><name>ChromaFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_setup_mids</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mids_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>logctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error filling an external frame allocation request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_INTERNAL_FRAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ext_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>Info</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mids_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frames_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>ext_frames_ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frames_ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_hwctx</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <call><name>ff_qsv_map_fourcc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>FourCC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>Width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>Height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>NumFrameSuggested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>Type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>logctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing a frames context for an internal frame "</literal>

<literal type="string">"allocation request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mids_buf</name> <operator>=</operator> <call><name>qsv_create_mids</name><argument_list>(<argument><expr><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mids_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_setup_mids</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>frames_ref</name></expr></argument>, <argument><expr><name>mids_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mids_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>logctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error filling an internal frame allocation request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>qsv_frame_free</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>(</operator><name>AVBufferRef</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>(</operator><name>AVBufferRef</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>qsv_frame_lock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>qsv_mid</name> <init>= <expr><name>mid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hw_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>hw_frames_hwctx</name> <init>= <expr><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MFX_ERR_UNDEFINED_BEHAVIOR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>surf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>surf</name><operator>.</operator><name>Info</name></name> <operator>=</operator> <name><name>hw_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>surf</name><operator>.</operator><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <name><name>qsv_mid</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_map</name><argument_list>(<argument><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name></name></expr></argument>, <argument><expr><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name></name></expr></argument>,

<argument><expr><name>AV_HWFRAME_MAP_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>Pitch</name></name> <operator>=</operator> <name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>U</name></name> <operator>=</operator> <name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>V</name></name> <operator>=</operator> <name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>qsv_frame_unlock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>qsv_mid</name> <init>= <expr><name>mid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>locked_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qsv_mid</name><operator>-&gt;</operator><name>hw_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>qsv_frame_get_hdl</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>hdl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVMid</name> <modifier>*</modifier></type><name>qsv_mid</name> <init>= <expr><operator>(</operator><name>QSVMid</name><operator>*</operator><operator>)</operator><name>mid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>hdl</name> <operator>=</operator> <name><name>qsv_mid</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_init_session_device</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>mfxSession</name> <modifier>*</modifier></type><name>psession</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>load_plugins</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>gpu_copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxHandleType</name></type> <name><name>handle_types</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>MFX_HANDLE_VA_DISPLAY</name></expr>,

<expr><name>MFX_HANDLE_D3D9_DEVICE_MANAGER</name></expr>,

<expr><name>MFX_HANDLE_D3D11_DEVICE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name> <init>= <expr><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVDeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>parent_session</name> <init>= <expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxInitParam</name></type> <name>init_par</name> <init>= <expr><block>{ <expr><name>MFX_IMPL_AUTO_ANY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHandleType</name></type> <name>handle_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name>parent_session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name>parent_session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><literal type="string">"Error querying the session attributes"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>handle_types</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_GetHandle</name><argument_list>(<argument><expr><name>parent_session</name></expr></argument>, <argument><expr><name><name>handle_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle_type</name> <operator>=</operator> <name><name>handle_types</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"No supported hw handle could be retrieved "</literal>

<literal type="string">"from the session\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>init_par</name><operator>.</operator><name>GPUCopy</name></name> <operator>=</operator> <name>gpu_copy</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>init_par</name><operator>.</operator><name>Implementation</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>init_par</name><operator>.</operator><name>Version</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXInitEx</name><argument_list>(<argument><expr><name>init_par</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing a child MFX session"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>handle_type</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><literal type="string">"Error setting a HW handle"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXJoinSession</name><argument_list>(<argument><expr><name>parent_session</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><literal type="string">"Error joining session"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_load_plugins</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>load_plugins</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error loading plugins\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psession</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_init_session_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>mfxSession</name> <modifier>*</modifier></type><name>psession</name></decl></parameter>,

<parameter><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>qsv_frames_ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>load_plugins</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gpu_copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mfxFrameAllocator</name></type> <name>frame_allocator</name> <init>= <expr><block>{

<expr><operator>.</operator><name>pthis</name> <operator>=</operator> <name>qsv_frames_ctx</name></expr>,

<expr><operator>.</operator><name>Alloc</name> <operator>=</operator> <name>qsv_frame_alloc</name></expr>,

<expr><operator>.</operator><name>Lock</name> <operator>=</operator> <name>qsv_frame_lock</name></expr>,

<expr><operator>.</operator><name>Unlock</name> <operator>=</operator> <name>qsv_frame_unlock</name></expr>,

<expr><operator>.</operator><name>GetHDL</name> <operator>=</operator> <name>qsv_frame_get_hdl</name></expr>,

<expr><operator>.</operator><name>Free</name> <operator>=</operator> <name>qsv_frame_free</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_session_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>,

<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>, <argument><expr><name>load_plugins</name></expr></argument>, <argument><expr><name>gpu_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opaque</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>logctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>mids_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>mids_buf</name></name> <operator>=</operator> <call><name>qsv_create_mids</name><argument_list>(<argument><expr><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>mids_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <operator>(</operator><name>QSVMid</name><operator>*</operator><operator>)</operator><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>mids_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_frames_ctx</name><operator>-&gt;</operator><name>nb_mids</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetFrameAllocator</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><literal type="string">"Error setting a frame allocator"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psession</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_close_internal_session</name><parameter_list>(<parameter><decl><type><name>QSVSession</name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_QSV_LINUX_SESSION_HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>va_device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
