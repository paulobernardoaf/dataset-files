<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_mpeg2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_mpeg2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ff_cbs_trace_header(ctx, name); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>call</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { err = (call); if (err &lt; 0) return err; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_NAME</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>codec</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cbs_ ##codec ##_ ##rw ##_ ##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_MPEG2</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_NAME(rw, mpeg2, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_MPEG2(READWRITE, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSCRIPTS</name><parameter_list>(<parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(subs &gt; 0 ? ((int[subs + 1]){ subs, __VA_ARGS__ }) : NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ui</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xui(width, name, current-&gt;name, 0, MAX_UINT_BITS(width), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uir</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xui(width, name, current-&gt;name, 1, MAX_UINT_BITS(width), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uis</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xui(width, name, current-&gt;name, 0, MAX_UINT_BITS(width), subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uirs</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xui(width, name, current-&gt;name, 1, MAX_UINT_BITS(width), subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xui</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xuia(width, #name, var, range_min, range_max, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sis</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xsi(width, name, current-&gt;name, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>marker_bit</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>bit("marker_bit", 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit</name><parameter_list>(<parameter><type><name>string</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { av_unused uint32_t bit = value; xuia(1, string, bit, value, value, 0); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>read</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>GetBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xuia</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(ff_cbs_read_unsigned(ctx, rw, width, string, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xsi</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int32_t value; CHECK(ff_cbs_read_signed(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, MIN_INT_BITS(width), MAX_INT_BITS(width))); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nextbits</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>compare</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(get_bits_left(rw) &gt;= width &amp;&amp; (var = show_bits(rw, width)) == (compare))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infer</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_mpeg2_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xuia</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xsi</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>nextbits</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>infer</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>write</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>PutBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xuia</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(ff_cbs_write_unsigned(ctx, rw, width, string, SUBSCRIPTS(subs, __VA_ARGS__), var, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xsi</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(ff_cbs_write_signed(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), var, MIN_INT_BITS(width), MAX_INT_BITS(width))); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nextbits</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>compare</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(var)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infer</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (current-&gt;name != (value)) { av_log(ctx-&gt;log_ctx, AV_LOG_WARNING, "Warning: " "%s does not match inferred value: " "%"PRId64", but should be %"PRId64".\n", #name, (int64_t)current-&gt;name, (int64_t)(value)); } } while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_mpeg2_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xuia</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xsi</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>nextbits</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>infer</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_mpeg2_free_picture_header</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPEG2RawPictureHeader</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><operator>(</operator><name>MPEG2RawPictureHeader</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>extra_information_picture</name><operator>.</operator><name>extra_information_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_mpeg2_free_user_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPEG2RawUserData</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><operator>(</operator><name>MPEG2RawUserData</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>user</name><operator>-&gt;</operator><name>user_data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_mpeg2_free_slice</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPEG2RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>(</operator><name>MPEG2RawSlice</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>extra_information_slice</name><operator>.</operator><name>extra_information_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_mpeg2_split_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamUnitType</name></type> <name>unit_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unit_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>final</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0x000001</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>unit_type</name> <operator>=</operator> <name>start_code</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>start</name><operator>--</operator></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0x000001</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>unit_size</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>unit_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>final</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>unit_type</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>start</name></expr></argument>,

<argument><expr><name>unit_size</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>final</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_mpeg2_read_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MPEG2_START_IS_SLICE</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MPEG2RawSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_mpeg2_free_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_mpeg2_read_slice_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>=</operator> <name>pos</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START</name><parameter_list>(<parameter><type><name>start_code</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>read_func</name></type></parameter>, <parameter><type><name>free_func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case start_code: { type *header; err = ff_cbs_alloc_unit_content(ctx, unit, sizeof(*header), free_func); if (err &lt; 0) return err; header = unit-&gt;content; err = cbs_mpeg2_read_ ##read_func(ctx, &amp;gbc, header); if (err &lt; 0) return err; } break;</cpp:value></cpp:define>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_PICTURE</name></expr></argument>, <argument><expr><name>MPEG2RawPictureHeader</name></expr></argument>,

<argument><expr><name>picture_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs_mpeg2_free_picture_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_USER_DATA</name></expr></argument>, <argument><expr><name>MPEG2RawUserData</name></expr></argument>,

<argument><expr><name>user_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs_mpeg2_free_user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_SEQUENCE_HEADER</name></expr></argument>, <argument><expr><name>MPEG2RawSequenceHeader</name></expr></argument>,

<argument><expr><name>sequence_header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_EXTENSION</name></expr></argument>, <argument><expr><name>MPEG2RawExtensionData</name></expr></argument>,

<argument><expr><name>extension_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_GROUP</name></expr></argument>, <argument><expr><name>MPEG2RawGroupOfPicturesHeader</name></expr></argument>,

<argument><expr><name>group_of_pictures_header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_SEQUENCE_END</name></expr></argument>, <argument><expr><name>MPEG2RawSequenceEnd</name></expr></argument>,

<argument><expr><name>sequence_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>START</name></cpp:undef>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_mpeg2_write_header</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START</name><parameter_list>(<parameter><type><name>start_code</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case start_code: err = cbs_mpeg2_write_ ##func(ctx, pbc, unit-&gt;content); break;</cpp:value></cpp:define>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_PICTURE</name></expr></argument>, <argument><expr><name>MPEG2RawPictureHeader</name></expr></argument>, <argument><expr><name>picture_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_USER_DATA</name></expr></argument>, <argument><expr><name>MPEG2RawUserData</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_SEQUENCE_HEADER</name></expr></argument>, <argument><expr><name>MPEG2RawSequenceHeader</name></expr></argument>, <argument><expr><name>sequence_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_EXTENSION</name></expr></argument>, <argument><expr><name>MPEG2RawExtensionData</name></expr></argument>, <argument><expr><name>extension_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_GROUP</name></expr></argument>, <argument><expr><name>MPEG2RawGroupOfPicturesHeader</name></expr></argument>,

<argument><expr><name>group_of_pictures_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>START</name><argument_list>(<argument><expr><name>MPEG2_START_SEQUENCE_END</name></expr></argument>, <argument><expr><name>MPEG2RawSequenceEnd</name></expr></argument>, <argument><expr><name>sequence_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>START</name></cpp:undef>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Write unimplemented for start "</literal>

<literal type="string">"code %02"</literal><name>PRIx32</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_mpeg2_write_slice</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPEG2RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_mpeg2_write_slice_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rest</name> <init>= <expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&gt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>%</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>&amp;</operator> <call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>%</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>rest</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>rest</name> <operator>-=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>rest</name></expr>;</condition> <incr><expr><name>rest</name><operator>--</operator></expr><operator>,</operator> <expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_mpeg2_write_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>MPEG2_START_IS_SLICE</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>cbs_mpeg2_write_slice</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>cbs_mpeg2_write_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_mpeg2_assemble_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_size</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>dp</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>dp</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamType</name></type> <name>ff_cbs_type_mpeg2</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CodedBitstreamMPEG2Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>split_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_mpeg2_split_fragment</name></expr>,

<expr><operator>.</operator><name>read_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_mpeg2_read_unit</name></expr>,

<expr><operator>.</operator><name>write_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_mpeg2_write_unit</name></expr>,

<expr><operator>.</operator><name>assemble_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_mpeg2_assemble_fragment</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
