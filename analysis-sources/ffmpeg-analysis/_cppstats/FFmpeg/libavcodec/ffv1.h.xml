<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ffv1.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangecoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>av_flatten</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_flatten</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PLANES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_QUANT_TABLES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONTEXT_INPUTS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_GOLOMB_RICE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_RANGE_DEFAULT_TAB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_RANGE_CUSTOM_TAB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_RANGE_DEFAULT_TAB_FORCE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VlcState</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>drift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>error_sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>bias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>count</name></decl>;</decl_stmt>

}</block></struct></type> <name>VlcState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PlaneContext</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>quant_table</name><index>[<expr><name>MAX_CONTEXT_INPUTS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_table_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>context_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call><index>[<expr><name>CONTEXT_SIZE</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VlcState</name> <modifier>*</modifier></type><name>vlc_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>interlace_bit_state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>PlaneContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLICES</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FFV1Context</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>rc_stat</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>rc_stat2</name><index>[<expr><name>MAX_QUANT_TABLES</name></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>micro_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_h_shift</name></decl>, <name>chroma_v_shift</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transparency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>picture_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>picture</name></decl>, <name>last_picture</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>FFV1Context</name></name> <modifier>*</modifier></type><name>fsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ac</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ac_byte_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PlaneContext</name></type> <name><name>plane</name><index>[<expr><name>MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>quant_table</name><index>[<expr><name>MAX_CONTEXT_INPUTS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>quant_tables</name><index>[<expr><name>MAX_QUANT_TABLES</name></expr>]</index><index>[<expr><name>MAX_CONTEXT_INPUTS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>context_count</name><index>[<expr><name>MAX_QUANT_TABLES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state_transition</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>initial_states</name><index>[<expr><name>MAX_QUANT_TABLES</name></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sample_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample_buffer32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use32bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_damaged</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key_frame_ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>context_model</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_raw_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packed_at_lsb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gob_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_table_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>FFV1Context</name></name> <modifier>*</modifier></type><name><name>slice_context</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_v_slices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_h_slices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_reset_contexts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_coding_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_rct_by_coef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_rct_ry_coef</name></decl>;</decl_stmt>

}</block></struct></type> <name>FFV1Context</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_ffv1_common_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ffv1_init_slice_state</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ffv1_init_slices_state</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ffv1_init_slice_contexts</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ffv1_allocate_initial_states</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ffv1_clear_slice_state</name><parameter_list>(<parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>FFV1Context</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ffv1_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>fold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>diff</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>diff</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_vlc_state</name><parameter_list>(<parameter><decl><type><name>VlcState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>drift</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>drift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error_sum</name></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drift</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>count</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>drift</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error_sum</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drift</name> <operator>&lt;=</operator> <operator>-</operator><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bias</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>bias</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drift</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>drift</name> <operator>+</operator> <name>count</name></expr></argument>, <argument><expr><operator>-</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>drift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bias</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>bias</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drift</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>drift</name> <operator>-</operator> <name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>drift</name></name> <operator>=</operator> <name>drift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffv1_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name ##32</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffv1_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

</unit>
