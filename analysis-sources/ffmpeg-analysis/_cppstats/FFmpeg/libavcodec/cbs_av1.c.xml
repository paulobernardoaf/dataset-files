<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_av1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_av1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_read_uvlc</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>zeroes</name></decl>, <decl><type ref="prev"/><name>bits_value</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zeroes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid uvlc code at "</literal>

<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>zeroes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>zeroes</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>zeroes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid uvlc code at "</literal>

<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bits_value</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>bits_value</name> <operator>+</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>zeroes</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>zeroes</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>zeroes</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>zeroes</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zeroes</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>zeroes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zeroes</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>zeroes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bits_value</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>zeroes</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_write_uvlc</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>zeroes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zeroes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>zeroes</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>value</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>zeroes</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>zeroes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>zeroes</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>zeroes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>zeroes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>zeroes</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_read_leb128</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>subscript</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>i</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_unsigned</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"leb128_byte[i]"</literal></expr></argument>, <argument><expr><name>subscript</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_write_leb128</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>subscript</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>i</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>byte</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_unsigned</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"leb128_byte[i]"</literal></expr></argument>, <argument><expr><name>subscript</name></expr></argument>,

<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_read_ns</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>extra_bit</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>w</name><operator>)</operator> <operator>-</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid non-symmetric value at "</literal>

<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>extra_bit</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>m</name> <operator>+</operator> <name>extra_bit</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>extra_bit</name></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_write_ns</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>extra_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [0,%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>w</name><operator>)</operator> <operator>-</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>m</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>-</operator> <name>m</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_bit</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>-</operator> <name>m</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>extra_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>extra_bit</name></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_read_increment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>range_min</name> <operator>&lt;=</operator> <name>range_max</name> <operator>&amp;&amp;</operator> <name>range_max</name> <operator>-</operator> <name>range_min</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>value</name> <operator>=</operator> <name>range_min</name></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <name>range_max</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid increment value at "</literal>

<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>value</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_write_increment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>range_min</name> <operator>&lt;=</operator> <name>range_max</name> <operator>&amp;&amp;</operator> <name>range_max</name> <operator>-</operator> <name>range_min</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>range_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>range_max</name> <operator>-</operator> <name>range_min</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>value</name> <operator>-</operator> <name>range_min</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>range_min</name> <operator>+</operator> <name>i</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>value</name> <operator>!=</operator> <name>range_max</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_read_subexp</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>range_offset</name></decl>, <decl><type ref="prev"/><name>range_bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>range_max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>range_max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_increment</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_len</name></expr></argument>,

<argument><expr><literal type="string">"subexp_more_bits"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range_bits</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>range_offset</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>range_bits</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>range_bits</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>range_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>max_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_unsigned</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>range_bits</name></expr></argument>,

<argument><expr><literal type="string">"subexp_bits"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>range_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_ns</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>range_max</name> <operator>-</operator> <name>range_offset</name></expr></argument>,

<argument><expr><literal type="string">"subexp_final_bits"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>range_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_write_subexp</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>range_offset</name></decl>, <decl><type ref="prev"/><name>range_bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [0,%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>range_max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>range_max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range_bits</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>range_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>range_bits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>range_bits</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>max_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>max_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>range_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>max_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>range_offset</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>range_bits</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_increment</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_len</name></expr></argument>,

<argument><expr><literal type="string">"subexp_more_bits"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>max_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_unsigned</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>range_bits</name></expr></argument>,

<argument><expr><literal type="string">"subexp_bits"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>value</name> <operator>-</operator> <name>range_offset</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>range_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_ns</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>range_max</name> <operator>-</operator> <name>range_offset</name></expr></argument>,

<argument><expr><literal type="string">"subexp_final_bits"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>value</name> <operator>-</operator> <name>range_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_tile_log2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>blksize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>blksize</name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>&lt;</operator> <name>target</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_get_relative_dist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>seq</name><operator>-&gt;</operator><name>order_hint_bits_minus_1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>diff</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>cbs_av1_get_payload_bytes_left</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>gbc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ff_cbs_trace_header(ctx, name); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>call</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { err = (call); if (err &lt; 0) return err; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_NAME</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>codec</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cbs_ ##codec ##_ ##rw ##_ ##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_AV1</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_NAME(rw, av1, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_AV1(READWRITE, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSCRIPTS</name><parameter_list>(<parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(subs &gt; 0 ? ((int[subs + 1]){ subs, __VA_ARGS__ }) : NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fb</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xf(width, name, current-&gt;name, 0, MAX_UINT_BITS(width), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fc</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xf(width, name, current-&gt;name, range_min, range_max, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flag</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fb(1, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>su</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xsu(width, name, current-&gt;name, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fbs</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xf(width, name, current-&gt;name, 0, MAX_UINT_BITS(width), subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fcs</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xf(width, name, current-&gt;name, range_min, range_max, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flags</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xf(1, name, current-&gt;name, 0, 1, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sus</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xsu(width, name, current-&gt;name, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fixed</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { av_unused uint32_t fixed_value = value; xf(width, name, fixed_value, value, value, 0); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>read</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>GetBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xf</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(ff_cbs_read_unsigned(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xsu</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int32_t value; CHECK(ff_cbs_read_signed(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, MIN_INT_BITS(width), MAX_INT_BITS(width))); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uvlc</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(cbs_av1_read_uvlc(ctx, rw, #name, &amp;value, range_min, range_max)); current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ns</name><parameter_list>(<parameter><type><name>max_value</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(cbs_av1_read_ns(ctx, rw, max_value, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value)); current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>increment</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(cbs_av1_read_increment(ctx, rw, min, max, #name, &amp;value)); current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>subexp</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(cbs_av1_read_subexp(ctx, rw, max, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value)); current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>delta_q</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint8_t delta_coded; int8_t delta_q; xf(1, name.delta_coded, delta_coded, 0, 1, 0); if (delta_coded) xsu(1 + 6, name.delta_q, delta_q, 0); else delta_q = 0; current-&gt;name = delta_q; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>leb128</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint64_t value; CHECK(cbs_av1_read_leb128(ctx, rw, #name, &amp;value)); current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infer</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>byte_alignment</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(get_bits_count(rw) % 8)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_av1_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xf</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xsu</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>uvlc</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ns</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>increment</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>subexp</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>delta_q</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>leb128</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>infer</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>byte_alignment</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>write</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>PutBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xf</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(ff_cbs_write_unsigned(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), var, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xsu</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(ff_cbs_write_signed(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), var, MIN_INT_BITS(width), MAX_INT_BITS(width))); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uvlc</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(cbs_av1_write_uvlc(ctx, rw, #name, current-&gt;name, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ns</name><parameter_list>(<parameter><type><name>max_value</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(cbs_av1_write_ns(ctx, rw, max_value, #name, SUBSCRIPTS(subs, __VA_ARGS__), current-&gt;name)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>increment</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(cbs_av1_write_increment(ctx, rw, min, max, #name, current-&gt;name)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>subexp</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(cbs_av1_write_subexp(ctx, rw, max, #name, SUBSCRIPTS(subs, __VA_ARGS__), current-&gt;name)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>delta_q</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { xf(1, name.delta_coded, current-&gt;name != 0, 0, 1, 0); if (current-&gt;name) xsu(1 + 6, name.delta_q, current-&gt;name, 0); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>leb128</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(cbs_av1_write_leb128(ctx, rw, #name, current-&gt;name)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infer</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (current-&gt;name != (value)) { av_log(ctx-&gt;log_ctx, AV_LOG_WARNING, "Warning: " "%s does not match inferred value: " "%"PRId64", but should be %"PRId64".\n", #name, (int64_t)current-&gt;name, (int64_t)(value)); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>byte_alignment</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(put_bits_count(rw) % 8)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_av1_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xf</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xsu</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>uvlc</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ns</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>increment</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>subexp</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>delta_q</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>leb128</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>infer</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>byte_alignment</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_split_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>obu_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>trace</name></decl>;</decl_stmt>

<expr_stmt><expr><name>trace</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid fragment: "</literal>

<literal type="string">"too large (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes).\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1RawOBUHeader</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>obu_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_obu_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>obu_has_size_field</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid OBU: fragment "</literal>

<literal type="string">"too short (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes).\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_leb128</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="string">"obu_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obu_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obu_size</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>header</name><operator>.</operator><name>obu_extension_flag</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pos</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obu_length</name> <operator>=</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name>obu_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>obu_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid OBU length: "</literal>

<literal type="string">"%"</literal><name>PRIu64</name><literal type="string">", but only %"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes remaining in fragment.\n"</literal></expr></argument>,

<argument><expr><name>obu_length</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>obu_type</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>obu_length</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>obu_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>obu_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name> <operator>=</operator> <name>trace</name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_av1_free_tile_data</name><parameter_list>(<parameter><decl><type><name>AV1RawTileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_av1_free_padding</name><parameter_list>(<parameter><decl><type><name>AV1RawPadding</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>payload_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_av1_free_metadata</name><parameter_list>(<parameter><decl><type><name>AV1RawMetadata</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>metadata_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV1_METADATA_TYPE_ITUT_T35</name></expr>:</case>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>itut_t35</name><operator>.</operator><name>payload_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_av1_free_obu</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name> <init>= <expr><operator>(</operator><name>AV1RawOBU</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV1_OBU_TILE_GROUP</name></expr>:</case>

<expr_stmt><expr><call><name>cbs_av1_free_tile_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_group</name><operator>.</operator><name>tile_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_OBU_FRAME</name></expr>:</case>

<expr_stmt><expr><call><name>cbs_av1_free_tile_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name><operator>.</operator><name>tile_group</name><operator>.</operator><name>tile_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TILE_LIST</name></expr>:</case>

<expr_stmt><expr><call><name>cbs_av1_free_tile_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_list</name><operator>.</operator><name>tile_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_OBU_METADATA</name></expr>:</case>

<expr_stmt><expr><call><name>cbs_av1_free_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_OBU_PADDING</name></expr>:</case>

<expr_stmt><expr><call><name>cbs_av1_free_padding</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_ref_tile_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><name>AV1RawTileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bitstream ended before "</literal>

<literal type="string">"any data in tile group (%d bits read).\n"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pos</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_read_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>start_pos</name></decl>, <decl><type ref="prev"/><name>end_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>obu</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_av1_free_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obu</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_obu_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>==</operator> <name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_has_size_field</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>obu_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_leb128</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="string">"obu_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obu_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>=</operator> <name>obu_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_extension_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid OBU length: "</literal>

<literal type="string">"unit too short (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">").\n"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_extension_flag</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_extension_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>=</operator> <name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>temporal_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>spatial_id</name></name> <operator>=</operator> <name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>spatial_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>!=</operator> <name>AV1_OBU_SEQUENCE_HEADER</name> <operator>&amp;&amp;</operator>

<name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>!=</operator> <name>AV1_OBU_TEMPORAL_DELIMITER</name> <operator>&amp;&amp;</operator>

<name><name>priv</name><operator>-&gt;</operator><name>operating_point_idc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_temporal_layer</name> <init>=

<expr><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>operating_point_idc</name></name> <operator>&gt;&gt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_spatial_layer</name> <init>=

<expr><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>operating_point_idc</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>spatial_id</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_temporal_layer</name> <operator>||</operator> <operator>!</operator><name>in_spatial_layer</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>spatial_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <operator>(</operator><name>AV1ReferenceFrameState</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_ref</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV1_OBU_SEQUENCE_HEADER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_sequence_header_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>sequence_header</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_temporal_delimiter_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_FRAME_HEADER</name></expr>:</case>

<case>case <expr><name>AV1_OBU_REDUNDANT_FRAME_HEADER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_frame_header_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame_header</name></name></expr></argument>,

<argument><expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>==</operator>

<name>AV1_OBU_REDUNDANT_FRAME_HEADER</name></expr></argument>,

<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TILE_GROUP</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_tile_group_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_ref_tile_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_group</name><operator>.</operator><name>tile_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_FRAME</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_frame_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name></name></expr></argument>,

<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_ref_tile_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name><operator>.</operator><name>tile_group</name><operator>.</operator><name>tile_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TILE_LIST</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_tile_list_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_ref_tile_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_list</name><operator>.</operator><name>tile_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_METADATA</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_metadata_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_PADDING</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_padding_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>end_pos</name> <operator>&lt;=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>!=</operator> <name>AV1_OBU_TILE_GROUP</name> <operator>&amp;&amp;</operator>

<name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>!=</operator> <name>AV1_OBU_TILE_LIST</name> <operator>&amp;&amp;</operator>

<name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>!=</operator> <name>AV1_OBU_FRAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_bits</name> <init>= <expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>start_pos</name> <operator>-</operator> <name>end_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_bits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_read_trailing_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_write_obu</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pbc_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawTileData</name> <modifier>*</modifier></type><name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>start_pos</name></decl>, <decl><type ref="prev"/><name>end_pos</name></decl>, <decl><type ref="prev"/><name>data_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_has_size_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_obu_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_has_size_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pbc_tmp</name> <operator>=</operator> <operator>*</operator><name>pbc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <operator>(</operator><name>AV1ReferenceFrameState</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>write_ref</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV1_OBU_SEQUENCE_HEADER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_sequence_header_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>sequence_header</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_temporal_delimiter_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_FRAME_HEADER</name></expr>:</case>

<case>case <expr><name>AV1_OBU_REDUNDANT_FRAME_HEADER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_frame_header_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame_header</name></name></expr></argument>,

<argument><expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>==</operator>

<name>AV1_OBU_REDUNDANT_FRAME_HEADER</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TILE_GROUP</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_tile_group_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_group</name><operator>.</operator><name>tile_data</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_FRAME</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_frame_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name><operator>.</operator><name>tile_group</name><operator>.</operator><name>tile_data</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_TILE_LIST</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_tile_list_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_list</name><operator>.</operator><name>tile_data</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_METADATA</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_metadata_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV1_OBU_PADDING</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_padding_obu</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <operator>(</operator><name>end_pos</name> <operator>-</operator> <name>start_pos</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>=</operator> <name>header_size</name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>header_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_trailing_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <name>end_pos</name> <operator>%</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>=</operator> <name>header_size</name> <operator>=</operator> <operator>(</operator><name>end_pos</name> <operator>-</operator> <name>start_pos</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>end_pos</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pbc</name> <operator>=</operator> <name>pbc_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_av1_write_leb128</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="string">"obu_size"</literal></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>data_pos</name> <operator>&lt;=</operator> <name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>*</operator> <name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>&gt;</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>obu_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pbc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>data_pos</name></expr></argument>,

<argument><expr><name><name>pbc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>start_pos</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pbc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>data_pos</name> <operator>+</operator> <name>header_size</name></expr></argument>,

<argument><expr><name><name>td</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_av1_assemble_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_size</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_av1_close</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamType</name></type> <name>ff_cbs_type_av1</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_AV1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CodedBitstreamAV1Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>split_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_av1_split_fragment</name></expr>,

<expr><operator>.</operator><name>read_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_av1_read_unit</name></expr>,

<expr><operator>.</operator><name>write_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_av1_write_obu</name></expr>,

<expr><operator>.</operator><name>assemble_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_av1_assemble_fragment</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_av1_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
