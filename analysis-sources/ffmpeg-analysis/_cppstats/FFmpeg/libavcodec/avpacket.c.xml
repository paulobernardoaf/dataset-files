<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\avpacket.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>av_init_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>AVPacket</name> <modifier>*</modifier></type><name>av_packet_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pkt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pkt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_packet_free</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packet_alloc</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffer_realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_new_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>packet_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_shrink_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_grow_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grow_by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>grow_by</name> <operator>&gt;</operator>

<name>INT_MAX</name> <operator>-</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>grow_by</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>old_data</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_offset</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>new_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>+</operator> <name>data_offset</name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_buffer_realloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>new_size</name> <operator>+</operator> <name>data_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>old_data</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>data_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>grow_by</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_from_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>,

<argument><expr><name>av_buffer_default_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPACKET_OLD_API</name></expr></cpp:if>

<function><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_MALLOC</name><parameter_list>(<parameter><type><name>data</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>data = av_malloc(size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_BUF</name><parameter_list>(<parameter><type><name>data</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { av_buffer_realloc(&amp;pkt-&gt;buf, size); data = pkt-&gt;buf ? pkt-&gt;buf-&gt;data : NULL; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP_DATA</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>padding</name></type></parameter>, <parameter><type><name>ALLOC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { void *data; if (padding) { if ((unsigned)(size) &gt; (unsigned)(size) + AV_INPUT_BUFFER_PADDING_SIZE) goto failed_alloc; ALLOC(data, size + AV_INPUT_BUFFER_PADDING_SIZE); } else { ALLOC(data, size); } if (!data) goto failed_alloc; memcpy(data, src, size); if (padding) memset((uint8_t *)data + size, 0, AV_INPUT_BUFFER_PADDING_SIZE); dst = data; } while (0)</cpp:value></cpp:define>

<specifier>static</specifier> <name>int</name></type> <name>copy_packet_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>DUP_DATA</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLOC_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>&amp;&amp;</operator> <name>dup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dup</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_copy_packet_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failed_alloc</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_copy_packet_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DUP_DATA</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLOC_MALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>DUP_DATA</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLOC_MALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failed_alloc</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_dup_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>tmp_pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_pkt</name> <operator>=</operator> <operator>*</operator><name>pkt</name></expr>;</expr_stmt>

<return>return <expr><call><name>copy_packet_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_copy_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<return>return <expr><call><name>copy_packet_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>void</name></type> <name>av_packet_free_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPACKET_OLD_API</name></expr></cpp:if>

<function><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name>

<name>void</name></type> <name>av_free_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_free_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>int</name></type> <name>av_packet_add_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>elems</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>elems</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>AV_PKT_DATA_NB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>elems</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>elems</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>elems</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>elems</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>av_packet_new_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_add_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>av_packet_get_side_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_packet_side_data_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PKT_DATA_PALETTE</name></expr>:</case> <return>return <expr><literal type="string">"Palette"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr>:</case> <return>return <expr><literal type="string">"New Extradata"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_PARAM_CHANGE</name></expr>:</case> <return>return <expr><literal type="string">"Param Change"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_H263_MB_INFO</name></expr>:</case> <return>return <expr><literal type="string">"H263 MB Info"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_REPLAYGAIN</name></expr>:</case> <return>return <expr><literal type="string">"Replay Gain"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr>:</case> <return>return <expr><literal type="string">"Display Matrix"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_STEREO3D</name></expr>:</case> <return>return <expr><literal type="string">"Stereo 3D"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_AUDIO_SERVICE_TYPE</name></expr>:</case> <return>return <expr><literal type="string">"Audio Service Type"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_QUALITY_STATS</name></expr>:</case> <return>return <expr><literal type="string">"Quality stats"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_FALLBACK_TRACK</name></expr>:</case> <return>return <expr><literal type="string">"Fallback track"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr>:</case> <return>return <expr><literal type="string">"CPB properties"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_SKIP_SAMPLES</name></expr>:</case> <return>return <expr><literal type="string">"Skip Samples"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_JP_DUALMONO</name></expr>:</case> <return>return <expr><literal type="string">"JP Dual Mono"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_STRINGS_METADATA</name></expr>:</case> <return>return <expr><literal type="string">"Strings Metadata"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_SUBTITLE_POSITION</name></expr>:</case> <return>return <expr><literal type="string">"Subtitle Position"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr>:</case> <return>return <expr><literal type="string">"Matroska BlockAdditional"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_WEBVTT_IDENTIFIER</name></expr>:</case> <return>return <expr><literal type="string">"WebVTT ID"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_WEBVTT_SETTINGS</name></expr>:</case> <return>return <expr><literal type="string">"WebVTT Settings"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_METADATA_UPDATE</name></expr>:</case> <return>return <expr><literal type="string">"Metadata Update"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_MPEGTS_STREAM_ID</name></expr>:</case> <return>return <expr><literal type="string">"MPEGTS Stream ID"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_MASTERING_DISPLAY_METADATA</name></expr>:</case> <return>return <expr><literal type="string">"Mastering display metadata"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_CONTENT_LIGHT_LEVEL</name></expr>:</case> <return>return <expr><literal type="string">"Content light level metadata"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_SPHERICAL</name></expr>:</case> <return>return <expr><literal type="string">"Spherical Mapping"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_A53_CC</name></expr>:</case> <return>return <expr><literal type="string">"A53 Closed Captions"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_ENCRYPTION_INIT_INFO</name></expr>:</case> <return>return <expr><literal type="string">"Encryption initialization data"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_ENCRYPTION_INFO</name></expr>:</case> <return>return <expr><literal type="string">"Encryption info"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_AFD</name></expr>:</case> <return>return <expr><literal type="string">"Active Format Description data"</literal></expr>;</return>

<case>case <expr><name>AV_PKT_DATA_ICC_PROFILE</name></expr>:</case> <return>return <expr><literal type="string">"ICC Profile"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_MERGE_SD_API</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MERGE_MARKER</name></cpp:macro> <cpp:value>0x8c4d9d108e25e9feULL</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>av_packet_merge_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name><init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">8LL</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>old</name><init>= <expr><operator>*</operator><name>pkt</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>old</name><operator>.</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>old</name><operator>.</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <literal type="number">5LL</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>old</name><operator>.</operator><name>side_data_elems</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>old</name><operator>.</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>==</operator><name><name>old</name><operator>.</operator><name>side_data_elems</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream_put_be64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>FF_MERGE_MARKER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_split_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator><literal type="number">12</literal> <operator>&amp;&amp;</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FF_MERGE_MARKER</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name><operator>&gt;</operator><name>INT_MAX</name> <operator>-</operator> <literal type="number">5</literal> <operator>||</operator> <name>p</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>-=</operator> <name>size</name><operator>+</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>AV_PKT_DATA_NB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>size</name><operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name><operator>&lt;=</operator><name>INT_MAX</name> <operator>-</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&gt;=</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">127</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>size</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>-=</operator> <name>size</name><operator>+</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>av_packet_pack_dictionary</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>keylen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>new_size</name> <init>= <expr><operator>*</operator><name>size</name> <operator>+</operator> <name>keylen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>valuelen</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>new_data</name> <init>= <expr><call><name>av_realloc</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>*</operator><name>size</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>keylen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>*</operator><name>size</name> <operator>+</operator> <name>keylen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>valuelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_unpack_dictionary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name> <operator>||</operator> <operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>data</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>end</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>val</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_shrink_side_data</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_copy_props</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>dst</name><operator>-&gt;</operator><name>convergence_duration</name></name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>convergence_duration</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>side_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>type</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_data</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_free_side_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_packet_unref</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_packet_free_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_ref</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_copy_props</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>packet_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVPacket</name> <modifier>*</modifier></type><name>av_packet_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_packet_ref</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_packet_move_ref</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_make_refcounted</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>packet_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_packet_make_writable</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <call><name>av_buffer_is_writable</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>packet_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_packet_rescale_ts</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>src_tb</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>dst_tb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>src_tb</name></expr></argument>, <argument><expr><name>dst_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>src_tb</name></expr></argument>, <argument><expr><name>dst_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>src_tb</name></expr></argument>, <argument><expr><name>dst_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name></expr></argument>, <argument><expr><name>src_tb</name></expr></argument>, <argument><expr><name>dst_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_side_data_set_encoder_stats</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pict_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_QUALITY_STATS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>side_data_size</name> <operator>=</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>error_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_QUALITY_STATS</name></expr></argument>,

<argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name> <operator>||</operator> <name>side_data_size</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>error_count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>side_data</name></expr></argument> , <argument><expr><name>quality</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>side_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>pict_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>side_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>error_count</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>error_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WL64</name><argument_list>(<argument><expr><name>side_data</name><operator>+</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>i</name></expr></argument> , <argument><expr><name><name>error</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_side_data_set_prft</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVProducerReferenceTime</name> <modifier>*</modifier></type><name>prft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PRFT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>side_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVProducerReferenceTime</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PRFT</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name> <operator>||</operator> <name>side_data_size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVProducerReferenceTime</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prft</name> <operator>=</operator> <operator>(</operator><name>AVProducerReferenceTime</name> <operator>*</operator><operator>)</operator><name>side_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prft</name><operator>-&gt;</operator><name>wallclock</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
