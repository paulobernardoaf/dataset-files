<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\intrax8dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>area1</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>area2</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>area3</name></cpp:macro> <cpp:value>(8 + 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>area4</name></cpp:macro> <cpp:value>(8 + 8 + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>area5</name></cpp:macro> <cpp:value>(8 + 8 + 1 + 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>area6</name></cpp:macro> <cpp:value>(8 + 8 + 1 + 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_setup_spatial_compensation</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>range</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>psum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edges</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_pix</name></decl>, <decl><type ref="prev"/><name>max_pix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>edges</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psum</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>range</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>min_pix</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pix</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>edges</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>area1</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_pix</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_pix</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pix</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_pix</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>area2</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>edges</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>src</name> <operator>-</operator> <name>stride</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_pix</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_pix</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pix</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_pix</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>edges</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>area5</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>area4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>area4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>area6</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edges</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>avg</name> <init>= <expr><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>edges</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>area1</name></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>area3</name></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>avg</name> <operator>*</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>stride</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>area3</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>range</name> <operator>=</operator> <name>max_pix</name> <operator>-</operator> <name>min_pix</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>area5</name><operator>)</operator> <operator>+</operator> <operator>*</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>area5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>psum</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>zero_prediction_weights</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">640</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">669</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">708</literal></expr>, <expr><literal type="number">354</literal></expr>, <expr><literal type="number">748</literal></expr>, <expr><literal type="number">257</literal></expr>,

<expr><literal type="number">792</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">760</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">808</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">772</literal></expr>, <expr><literal type="number">72</literal></expr>,

<expr><literal type="number">480</literal></expr>, <expr><literal type="number">669</literal></expr>, <expr><literal type="number">537</literal></expr>, <expr><literal type="number">537</literal></expr>, <expr><literal type="number">598</literal></expr>, <expr><literal type="number">416</literal></expr>, <expr><literal type="number">661</literal></expr>, <expr><literal type="number">316</literal></expr>,

<expr><literal type="number">719</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">707</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">768</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">745</literal></expr>, <expr><literal type="number">97</literal></expr>,

<expr><literal type="number">354</literal></expr>, <expr><literal type="number">708</literal></expr>, <expr><literal type="number">416</literal></expr>, <expr><literal type="number">598</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">564</literal></expr>, <expr><literal type="number">388</literal></expr>,

<expr><literal type="number">634</literal></expr>, <expr><literal type="number">317</literal></expr>, <expr><literal type="number">642</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">716</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">706</literal></expr>, <expr><literal type="number">132</literal></expr>,

<expr><literal type="number">257</literal></expr>, <expr><literal type="number">748</literal></expr>, <expr><literal type="number">316</literal></expr>, <expr><literal type="number">661</literal></expr>, <expr><literal type="number">388</literal></expr>, <expr><literal type="number">564</literal></expr>, <expr><literal type="number">469</literal></expr>, <expr><literal type="number">469</literal></expr>,

<expr><literal type="number">543</literal></expr>, <expr><literal type="number">395</literal></expr>, <expr><literal type="number">571</literal></expr>, <expr><literal type="number">311</literal></expr>, <expr><literal type="number">655</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">660</literal></expr>, <expr><literal type="number">180</literal></expr>,

<expr><literal type="number">198</literal></expr>, <expr><literal type="number">792</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">719</literal></expr>, <expr><literal type="number">317</literal></expr>, <expr><literal type="number">634</literal></expr>, <expr><literal type="number">395</literal></expr>, <expr><literal type="number">543</literal></expr>,

<expr><literal type="number">469</literal></expr>, <expr><literal type="number">469</literal></expr>, <expr><literal type="number">507</literal></expr>, <expr><literal type="number">380</literal></expr>, <expr><literal type="number">597</literal></expr>, <expr><literal type="number">299</literal></expr>, <expr><literal type="number">616</literal></expr>, <expr><literal type="number">231</literal></expr>,

<expr><literal type="number">161</literal></expr>, <expr><literal type="number">855</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">788</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">710</literal></expr>, <expr><literal type="number">340</literal></expr>, <expr><literal type="number">623</literal></expr>,

<expr><literal type="number">411</literal></expr>, <expr><literal type="number">548</literal></expr>, <expr><literal type="number">455</literal></expr>, <expr><literal type="number">455</literal></expr>, <expr><literal type="number">548</literal></expr>, <expr><literal type="number">366</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">288</literal></expr>,

<expr><literal type="number">122</literal></expr>, <expr><literal type="number">972</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">914</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">842</literal></expr>, <expr><literal type="number">276</literal></expr>, <expr><literal type="number">758</literal></expr>,

<expr><literal type="number">341</literal></expr>, <expr><literal type="number">682</literal></expr>, <expr><literal type="number">389</literal></expr>, <expr><literal type="number">584</literal></expr>, <expr><literal type="number">483</literal></expr>, <expr><literal type="number">483</literal></expr>, <expr><literal type="number">520</literal></expr>, <expr><literal type="number">390</literal></expr>,

<expr><literal type="number">110</literal></expr>, <expr><literal type="number">1172</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">1107</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">1028</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">932</literal></expr>,

<expr><literal type="number">317</literal></expr>, <expr><literal type="number">846</literal></expr>, <expr><literal type="number">366</literal></expr>, <expr><literal type="number">731</literal></expr>, <expr><literal type="number">458</literal></expr>, <expr><literal type="number">611</literal></expr>, <expr><literal type="number">499</literal></expr>, <expr><literal type="number">499</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_0</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>p</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>left_sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>top_sum</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_sum</name><index>[<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_sum</name><index>[<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_sum</name><index>[<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top_sum</name><index>[<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>top_sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>top_sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">181</literal> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>left_sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>left_sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">181</literal> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>top_sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>zero_prediction_weights</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>left_sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>*</operator> <name><name>zero_prediction_weights</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>area6</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_5</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>x</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_6</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area3</name> <operator>+</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_7</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>area3</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>area3</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>area1</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_9</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">6</literal> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_10</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>+</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compensation_11</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>area2</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>area4</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>a_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>b_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p3</name></decl>, <decl><type ref="prev"/><name>p4</name></decl>, <decl><type ref="prev"/><name>p5</name></decl>, <decl><type ref="prev"/><name>p6</name></decl>, <decl><type ref="prev"/><name>p7</name></decl>, <decl><type ref="prev"/><name>p8</name></decl>, <decl><type ref="prev"/><name>p9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ql</name> <init>= <expr><operator>(</operator><name>quant</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <name>b_stride</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">5</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p4</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p5</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p6</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p7</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p8</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p9</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p2</name> <operator>-</operator> <name>p3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p3</name> <operator>-</operator> <name>p4</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p4</name> <operator>-</operator> <name>p5</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p5</name> <operator>-</operator> <name>p6</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p6</name> <operator>-</operator> <name>p7</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p7</name> <operator>-</operator> <name>p8</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p8</name> <operator>-</operator> <name>p9</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p0</name> <operator>-</operator> <name>p1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ql</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>max</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>-</operator> <name>min</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>quant</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>-</operator> <name>min</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>quant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p3</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>p7</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p4</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p7</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p5</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p7</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p6</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>p7</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>p3</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>p4</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>p5</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>p6</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>quant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>p1</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>p3</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>p4</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>p5</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>p6</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>p7</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>p8</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>p4</name> <operator>-</operator> <name>p5</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>m</name> <operator>^</operator> <name>x0</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>m</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>m</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>a_stride</name></expr>]</index></name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_h_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>x8_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_v_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>x8_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_intrax8dsp_init</name><parameter_list>(<parameter><decl><type><name>IntraX8DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>h_loop_filter</name></name> <operator>=</operator> <name>x8_h_loop_filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>v_loop_filter</name></name> <operator>=</operator> <name>x8_v_loop_filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>setup_spatial_compensation</name></name> <operator>=</operator> <name>x8_setup_spatial_compensation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_9</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>spatial_compensation</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>spatial_compensation_11</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
