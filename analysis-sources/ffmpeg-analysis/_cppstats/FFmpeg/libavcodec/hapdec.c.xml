<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hapdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snappy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_parse_decode_instructions</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>section_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>HapSectionType</name></name></type> <name>section_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_first_table</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>had_offsets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>had_compressors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>had_sizes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_remaining</name> <init>= <expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>stream_remaining</name> <operator>-</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>section_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HAP_ST_COMPRESSOR_TABLE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_set_chunk_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>section_size</name></expr></argument>, <argument><expr><name>is_first_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>section_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>had_compressors</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_first_table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HAP_ST_SIZE_TABLE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_set_chunk_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>section_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>is_first_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>section_size</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>had_sizes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_first_table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HAP_ST_OFFSET_TABLE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_set_chunk_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>section_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>is_first_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>section_size</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_offset</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>had_offsets</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_first_table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>section_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_sizes</name> <operator>||</operator> <operator>!</operator><name>had_compressors</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_offsets</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>running_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_offset</name> <operator>=</operator> <name>running_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>running_size</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_can_use_tex_in_place</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>running_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_offset</name> <operator>!=</operator> <name>running_offset</name>

<operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>!=</operator> <name>HAP_COMP_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>running_offset</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_parse_frame_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>section_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>HapSectionType</name></name></type> <name>section_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressorstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>texture_section_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>HAP_FMT_RGBDXT1</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>HAP_FMT_RGBADXT5</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>HAP_FMT_YCOCGDXT5</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>HAP_FMT_RGTC1</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>HAP_FMT_RGTC1</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>HAP_FMT_YCOCGDXT5</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid texture format %#04x.\n"</literal></expr></argument>, <argument><expr><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>section_type</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HAP_COMP_NONE</name></expr>:</case>

<case>case <expr><name>HAP_COMP_SNAPPY</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_set_chunk_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>=</operator> <name>section_type</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>compressed_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>compressed_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_section_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>==</operator> <name>HAP_COMP_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>compressorstr</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>compressorstr</name> <operator>=</operator> <literal type="string">"snappy"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>HAP_COMP_COMPLEX</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>section_type</name> <operator>!=</operator> <name>HAP_ST_DECODE_INSTRUCTIONS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hap_parse_decode_instructions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>section_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compressorstr</name> <operator>=</operator> <literal type="string">"complex"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>HapChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_offset</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_offset</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>compressor</name></name> <operator>==</operator> <name>HAP_COMP_SNAPPY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc_tmp</name></expr></argument>, <argument><expr><name><name>gbc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>compressed_offset</name></name></expr></argument>,

<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uncompressed_size</name> <operator>=</operator> <call><name>ff_snappy_peek_uncompressed_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uncompressed_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>uncompressed_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>compressor</name></name> <operator>==</operator> <name>HAP_COMP_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s compressor\n"</literal></expr></argument>, <argument><expr><name>compressorstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_chunks_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chunk_nb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_nb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HapChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>chunk_nb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>compressed_offset</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>compressor</name></name> <operator>==</operator> <name>HAP_COMP_SNAPPY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>uncompressed_size</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_snappy_uncompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Snappy uncompress error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>compressor</name></name> <operator>==</operator> <name>HAP_COMP_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_texture_thread_internal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_nb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>texture_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_block</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <name>TEXTURE_BLOCK_W</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h_block</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <name>TEXTURE_BLOCK_H</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_slice</name></decl>, <decl><type ref="prev"/><name>end_slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base_blocks_per_slice</name> <init>= <expr><name>h_block</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remainder_blocks</name> <init>= <expr><name>h_block</name> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start_slice</name> <operator>=</operator> <name>slice</name> <operator>*</operator> <name>base_blocks_per_slice</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_slice</name> <operator>+=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>remainder_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_slice</name> <operator>=</operator> <name>start_slice</name> <operator>+</operator> <name>base_blocks_per_slice</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice</name> <operator>&lt;</operator> <name>remainder_blocks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_slice</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_slice</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_slice</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>TEXTURE_BLOCK_H</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>y</name> <operator>*</operator> <name>w_block</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w_block</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>texture_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uncompress_pix_size</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>d</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun2</name></name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uncompress_pix_size</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>d</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_rat2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_texture_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_nb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>decompress_texture_thread_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>, <argument><expr><name>thread_nb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_texture2_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_nb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>decompress_texture_thread_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>, <argument><expr><name>thread_nb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tex_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>section_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>HapSectionType</name></name></type> <name>section_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_texture_section</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tex_rat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex_rat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_parse_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>section_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0D</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid section type in 2 textures mode %#04x.\n"</literal></expr></argument>, <argument><expr><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_texture_section</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex_rat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_rat2</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tframe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_count</name></name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><name>start_texture_section</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hap_parse_frame_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_texture_section</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_section_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hap_can_use_tex_in_place</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gbc</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tex_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_section_size</name></name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decompress_chunks_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_results</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_results</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_results</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tex_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tex_size</name> <operator>&lt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <name>TEXTURE_BLOCK_W</name><operator>)</operator>

<operator>*</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <name>TEXTURE_BLOCK_H</name><operator>)</operator>

<operator>*</operator><name><name>tex_rat</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decompress_texture_thread</name></expr></argument>, <argument><expr><name><name>tframe</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decompress_texture2_thread</name></expr></argument>, <argument><expr><name><name>tframe</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hap_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>texture_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid video size %dx%d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>TEXTURE_BLOCK_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>TEXTURE_BLOCK_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_texturedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uncompress_pix_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>texture_name</name> <operator>=</operator> <literal type="string">"DXT1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt1_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>texture_name</name> <operator>=</operator> <literal type="string">"DXT5"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt5_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>texture_name</name> <operator>=</operator> <literal type="string">"DXT5-YCoCg-scaled"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt5ys_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>texture_name</name> <operator>=</operator> <literal type="string">"RGTC1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>rgtc1u_gray_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uncompress_pix_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>texture_name</name> <operator>=</operator> <literal type="string">"DXT5-YCoCg-scaled / RGTC1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat2</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt5ys_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun2</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>rgtc1u_alpha_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>AVERROR_DECODER_NOT_FOUND</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s texture\n"</literal></expr></argument>, <argument><expr><name>texture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <name>TEXTURE_BLOCK_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hap_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_hap_free_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hap_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hap"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Vidvox Hap"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HAP</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>hap_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>hap_decode</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>hap_close</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HapContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>codec_tags</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint32_t</name> <index>[]</index></name><operator>)</operator><block>{

<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>FF_CODEC_TAGS_END</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
