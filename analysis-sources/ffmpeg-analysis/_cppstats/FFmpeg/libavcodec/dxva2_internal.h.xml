<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dxva2_internal.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxva2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_dxva2.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11va.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_d3d11va.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DXVA_H</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINAPI_FAMILY</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI_FAMILY</name></cpp:macro> <cpp:value>WINAPI_FAMILY_DESKTOP_APP</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_CRT_BUILD_DESKTOP_APP</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_BUILD_DESKTOP_APP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>void</name></type> <name>DECODER_BUFFER_DESC</name>;</typedef>

<typedef>typedef <type><union>union <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>AVD3D11VAContext</name></name></type> <name>d3d11va</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>dxva_context</name></name></type> <name>dxva2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></union></type> <name>AVDXVAContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FFDXVASharedContext</name> <block>{

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>decoder_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>workaround</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<decl_stmt><decl><type><name>ID3D11VideoDecoder</name> <modifier>*</modifier></type><name>d3d11_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name></type> <name>d3d11_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11VideoDecoderOutputView</name> <modifier>*</modifier><modifier>*</modifier></type><name>d3d11_views</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_d3d11_views</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>d3d11_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<decl_stmt><decl><type><name>IDirectXVideoDecoder</name> <modifier>*</modifier></type><name>dxva2_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirectXVideoDecoderService</name> <modifier>*</modifier></type><name>dxva2_service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA2_ConfigPictureDecode</name></type> <name>dxva2_config</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>AVDXVAContext</name></type> <name>ctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>FFDXVASharedContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_SHARED_CONTEXT</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((FFDXVASharedContext *)((avctx)-&gt;internal-&gt;hwaccel_priv_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(AVDXVAContext *)((avctx)-&gt;hwaccel_context ? (avctx)-&gt;hwaccel_context : (&amp;(DXVA_SHARED_CONTEXT(avctx)-&gt;ctx)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11VA_CONTEXT</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;ctx-&gt;d3d11va)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2_CONTEXT</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;ctx-&gt;dxva2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name> <operator>&amp;&amp;</operator> <name>CONFIG_DXVA2</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_WORKAROUND</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? ctx-&gt;d3d11va.workaround : ctx-&gt;dxva2.workaround)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_COUNT</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? ctx-&gt;d3d11va.surface_count : ctx-&gt;dxva2.surface_count)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_DECODER</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? (void *)ctx-&gt;d3d11va.decoder : (void *)ctx-&gt;dxva2.decoder)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_REPORT_ID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(ff_dxva2_is_d3d11(avctx) ? &amp;ctx-&gt;d3d11va.report_id : &amp;ctx-&gt;dxva2.report_id))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? (void *)ctx-&gt;d3d11va.cfg : (void *)ctx-&gt;dxva2.cfg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_BITSTREAM</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? ctx-&gt;d3d11va.cfg-&gt;ConfigBitstreamRaw : ctx-&gt;dxva2.cfg-&gt;ConfigBitstreamRaw)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_INTRARESID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? ctx-&gt;d3d11va.cfg-&gt;ConfigIntraResidUnsigned : ctx-&gt;dxva2.cfg-&gt;ConfigIntraResidUnsigned)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_RESIDACCEL</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_dxva2_is_d3d11(avctx) ? ctx-&gt;d3d11va.cfg-&gt;ConfigResidDiffAccelerator : ctx-&gt;dxva2.cfg-&gt;ConfigResidDiffAccelerator)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_VALID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DXVA_CONTEXT_DECODER(avctx, ctx) &amp;&amp; DXVA_CONTEXT_CFG(avctx, ctx) &amp;&amp; (ff_dxva2_is_d3d11(avctx) || ctx-&gt;dxva2.surface_count))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_WORKAROUND</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.workaround)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_COUNT</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.surface_count)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_DECODER</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.decoder)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_REPORT_ID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(&amp;ctx-&gt;dxva2.report_id))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.cfg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_BITSTREAM</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.cfg-&gt;ConfigBitstreamRaw)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_INTRARESID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.cfg-&gt;ConfigIntraResidUnsigned)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_RESIDACCEL</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.cfg-&gt;ConfigResidDiffAccelerator)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_VALID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;dxva2.decoder &amp;&amp; ctx-&gt;dxva2.cfg &amp;&amp; ctx-&gt;dxva2.surface_count)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_WORKAROUND</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.workaround)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_COUNT</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.surface_count)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_DECODER</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.decoder)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_REPORT_ID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(&amp;ctx-&gt;d3d11va.report_id))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.cfg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_BITSTREAM</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.cfg-&gt;ConfigBitstreamRaw)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_INTRARESID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.cfg-&gt;ConfigIntraResidUnsigned)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_CFG_RESIDACCEL</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.cfg-&gt;ConfigResidDiffAccelerator)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA_CONTEXT_VALID</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;d3d11va.decoder &amp;&amp; ctx-&gt;d3d11va.cfg)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>unsigned</name></type> <name>ff_dxva2_get_surface_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVDXVAContext</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dxva2_commit_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>mb_count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dxva2_common_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pp_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>qm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>qm_size</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>commit_bs_si</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dxva2_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dxva2_decode_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dxva2_common_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dxva2_is_d3d11</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
