<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_cavlc.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CABAC</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHECKED_BITSTREAM_READER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mvpred.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>golomb_to_inter_cbp_gray</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>golomb_to_intra4x4_cbp_gray</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_dc_coeff_token_len</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_dc_coeff_token_bits</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma422_dc_coeff_token_len</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">9</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma422_dc_coeff_token_bits</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">9</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>coeff_token_len</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">17</literal></expr>]</index></name><init>=<expr><block>{

<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">10</literal></expr>,

<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>,

<expr><literal type="number">16</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">12</literal></expr>,

<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>coeff_token_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">17</literal></expr>]</index></name><init>=<expr><block>{

<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">12</literal></expr>,

<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>,

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,

<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,

<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,

<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,

<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">63</literal></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>total_zeros_len</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>total_zeros_bits</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_dc_total_zeros_len</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_dc_total_zeros_bits</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma422_dc_total_zeros_len</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma422_dc_total_zeros_bits</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>run_len</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>run_bits</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>coeff_token_vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>coeff_token_vlc_tables</name><index>[<expr><literal type="number">520</literal><operator>+</operator><literal type="number">332</literal><operator>+</operator><literal type="number">280</literal><operator>+</operator><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>coeff_token_vlc_tables_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">520</literal></expr>,<expr><literal type="number">332</literal></expr>,<expr><literal type="number">280</literal></expr>,<expr><literal type="number">256</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>chroma_dc_coeff_token_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>chroma_dc_coeff_token_vlc_table</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>chroma_dc_coeff_token_vlc_table_size</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>chroma422_dc_coeff_token_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>chroma422_dc_coeff_token_vlc_table</name><index>[<expr><literal type="number">8192</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>chroma422_dc_coeff_token_vlc_table_size</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>total_zeros_vlc</name><index>[<expr><literal type="number">15</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>total_zeros_vlc_tables</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">512</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>total_zeros_vlc_tables_size</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>chroma_dc_total_zeros_vlc</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>chroma_dc_total_zeros_vlc_tables</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>chroma_dc_total_zeros_vlc_tables_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>chroma422_dc_total_zeros_vlc</name><index>[<expr><literal type="number">7</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>chroma422_dc_total_zeros_vlc_tables</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>chroma422_dc_total_zeros_vlc_tables_size</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>run_vlc</name><index>[<expr><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>run_vlc_tables</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>run_vlc_tables_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>run7_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>run7_vlc_table</name><index>[<expr><literal type="number">96</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>run7_vlc_table_size</name> <init>= <expr><literal type="number">96</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_TAB_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int8_t</name></type> <name><name>cavlc_level_tab</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>LEVEL_TAB_BITS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_DC_COEFF_TOKEN_VLC_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA422_DC_COEFF_TOKEN_VLC_BITS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF_TOKEN_VLC_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOTAL_ZEROS_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_DC_TOTAL_ZEROS_VLC_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA422_DC_TOTAL_ZEROS_VLC_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_VLC_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN7_VLC_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pred_non_zero_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index8</name><init>= <expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>index8</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>top</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>index8</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>left</name> <operator>+</operator> <name>top</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pred_nnz L%X T%X n%d s%d P%X\n"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>&amp;</operator><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name><operator>&amp;</operator><literal type="number">31</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_cavlc_level_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>suffix_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>suffix_length</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>suffix_length</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>suffix_length</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>LEVEL_TAB_BITS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prefix</name><init>= <expr><name>LEVEL_TAB_BITS</name> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>prefix</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>suffix_length</name> <operator>&lt;=</operator> <name>LEVEL_TAB_BITS</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level_code</name> <init>= <expr><operator>(</operator><name>prefix</name> <operator>&lt;&lt;</operator> <name>suffix_length</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>suffix_length</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>suffix_length</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>-</operator><operator>(</operator><name>level_code</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level_code</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>level_code</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>level_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>prefix</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>suffix_length</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>prefix</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>LEVEL_TAB_BITS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>prefix</name><operator>+</operator><literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>prefix</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>LEVEL_TAB_BITS</name><operator>+</operator><literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>LEVEL_TAB_BITS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264_decode_init_vlc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_dc_coeff_token_vlc</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>chroma_dc_coeff_token_vlc_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_dc_coeff_token_vlc</name><operator>.</operator><name>table_allocated</name></name> <operator>=</operator> <name>chroma_dc_coeff_token_vlc_table_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chroma_dc_coeff_token_vlc</name></expr></argument>, <argument><expr><name>CHROMA_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma_dc_coeff_token_len</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma_dc_coeff_token_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma422_dc_coeff_token_vlc</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>chroma422_dc_coeff_token_vlc_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma422_dc_coeff_token_vlc</name><operator>.</operator><name>table_allocated</name></name> <operator>=</operator> <name>chroma422_dc_coeff_token_vlc_table_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chroma422_dc_coeff_token_vlc</name></expr></argument>, <argument><expr><name>CHROMA422_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">9</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma422_dc_coeff_token_len</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma422_dc_coeff_token_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>coeff_token_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name>coeff_token_vlc_tables</name><operator>+</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff_token_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>coeff_token_vlc_tables_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coeff_token_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">17</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coeff_token_len</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coeff_token_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>coeff_token_vlc_tables_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>offset</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>coeff_token_vlc_tables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>chroma_dc_total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name><name>chroma_dc_total_zeros_vlc_tables</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_dc_total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name>chroma_dc_total_zeros_vlc_tables_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_dc_total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>CHROMA_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma_dc_total_zeros_len</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma_dc_total_zeros_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>chroma422_dc_total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name><name>chroma422_dc_total_zeros_vlc_tables</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma422_dc_total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name>chroma422_dc_total_zeros_vlc_tables_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma422_dc_total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>CHROMA422_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma422_dc_total_zeros_len</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chroma422_dc_total_zeros_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name><name>total_zeros_vlc_tables</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name>total_zeros_vlc_tables_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>total_zeros_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>total_zeros_len</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>total_zeros_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>run_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name><name>run_vlc_tables</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name>run_vlc_tables_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>run_vlc</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>RUN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>run_len</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>run_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>run7_vlc</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>run7_vlc_table</name></expr><operator>,</operator>

<expr><name><name>run7_vlc</name><operator>.</operator><name>table_allocated</name></name> <operator>=</operator> <name>run7_vlc_table_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>run7_vlc</name></expr></argument>, <argument><expr><name>RUN7_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>run_len</name> <index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>run_bits</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_cavlc_level_tab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_level_prefix</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name><operator>=</operator><call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name><operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>log</name><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_residual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>qmul</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_coeff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>coeff_token_table_index</name><index>[<expr><literal type="number">17</literal></expr>]</index></name><init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>level</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zeros_left</name></decl>, <decl><type ref="prev"/><name>coeff_token</name></decl>, <decl><type ref="prev"/><name>total_coeff</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>trailing_ones</name></decl>, <decl><type ref="prev"/><name>run_before</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>max_coeff</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max_coeff</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff_token</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chroma_dc_coeff_token_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>CHROMA_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff_token</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chroma422_dc_coeff_token_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>CHROMA422_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>total_coeff</name><operator>=</operator> <name>coeff_token</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>LUMA_DC_BLOCK_INDEX</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>total_coeff</name><operator>=</operator> <call><name>pred_non_zero_count</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>-</operator> <name>LUMA_DC_BLOCK_INDEX</name><operator>)</operator><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff_token</name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>coeff_token_vlc</name><index>[ <expr><name><name>coeff_token_table_index</name><index>[<expr><name>total_coeff</name></expr>]</index></name></expr> ]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_coeff</name><operator>=</operator> <name>coeff_token</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>total_coeff</name><operator>=</operator> <call><name>pred_non_zero_count</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff_token</name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>coeff_token_vlc</name><index>[ <expr><name><name>coeff_token_table_index</name><index>[<expr><name>total_coeff</name></expr>]</index></name></expr> ]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_coeff</name><operator>=</operator> <name>coeff_token</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>total_coeff</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>total_coeff</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>total_coeff</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>max_coeff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"corrupted macroblock %d %d (total_coeff=%d)\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trailing_ones</name><operator>=</operator> <name>coeff_token</name><operator>&amp;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"trailing:%d, total:%d\n"</literal></expr></argument>, <argument><expr><name>trailing_ones</name></expr></argument>, <argument><expr><name>total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>total_coeff</name><operator>&lt;=</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>trailing_ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>trailing_ones</name><operator>&lt;</operator><name>total_coeff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>suffix_length</name> <init>= <expr><name>total_coeff</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;</operator> <name>trailing_ones</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitsi</name><init>= <expr><call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>LEVEL_TAB_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_code</name><init>= <expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>bitsi</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>bitsi</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level_code</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>prefix</name><operator>=</operator> <name>level_code</name> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>prefix</name> <operator>==</operator> <name>LEVEL_TAB_BITS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>+=</operator> <call><name>get_level_prefix</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prefix</name><operator>&lt;</operator><literal type="number">14</literal></expr>)</condition><block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name>suffix_length</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <operator>(</operator><name>prefix</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>prefix</name><operator>==</operator><literal type="number">14</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>suffix_length</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <operator>(</operator><name>prefix</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <name>prefix</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>prefix</name><operator>&gt;=</operator><literal type="number">16</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>prefix</name> <operator>&gt;</operator> <literal type="number">25</literal><operator>+</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid level prefix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level_code</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>prefix</name><operator>-</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">4096</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level_code</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>prefix</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>trailing_ones</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level_code</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>suffix_length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name><operator>=</operator> <operator>-</operator><operator>(</operator><name>level_code</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><index>[<expr><name>trailing_ones</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>+</operator><name>level_code</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>level_code</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>level_code</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>trailing_ones</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>suffix_length</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>level_code</name> <operator>+</operator> <literal type="number">3U</literal> <operator>&gt;</operator> <literal type="number">6U</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><index>[<expr><name>trailing_ones</name></expr>]</index></name><operator>=</operator> <name>level_code</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>trailing_ones</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>total_coeff</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>suffix_limit</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitsi</name><init>= <expr><call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>LEVEL_TAB_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>bitsi</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>cavlc_level_tab</name><index>[<expr><name>suffix_length</name></expr>]</index><index>[<expr><name>bitsi</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level_code</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>prefix</name><operator>=</operator> <name>level_code</name> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>prefix</name> <operator>==</operator> <name>LEVEL_TAB_BITS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>prefix</name> <operator>+=</operator> <call><name>get_level_prefix</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prefix</name><operator>&lt;</operator><literal type="number">15</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>level_code</name> <operator>=</operator> <operator>(</operator><name>prefix</name><operator>&lt;&lt;</operator><name>suffix_length</name><operator>)</operator> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>suffix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>level_code</name> <operator>=</operator> <literal type="number">15</literal><operator>&lt;&lt;</operator><name>suffix_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name><operator>&gt;=</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>prefix</name> <operator>&gt;</operator> <literal type="number">25</literal><operator>+</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid level prefix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level_code</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>prefix</name><operator>-</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">4096</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level_code</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>prefix</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mask</name><operator>=</operator> <operator>-</operator><operator>(</operator><name>level_code</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>level_code</name><operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>+</operator><name>level_code</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>level_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>suffix_length</name><operator>+=</operator> <name><name>suffix_limit</name><index>[<expr><name>suffix_length</name></expr>]</index></name> <operator>+</operator> <name>level_code</name> <operator>&gt;</operator> <literal type="number">2U</literal><operator>*</operator><name><name>suffix_limit</name><index>[<expr><name>suffix_length</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>total_coeff</name> <operator>==</operator> <name>max_coeff</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros_left</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max_coeff</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max_coeff</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros_left</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chroma_dc_total_zeros_vlc</name><index>[<expr><name>total_coeff</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name>CHROMA_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros_left</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chroma422_dc_total_zeros_vlc</name><index>[<expr><name>total_coeff</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name>CHROMA422_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>zeros_left</name><operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>total_zeros_vlc</name><index>[ <expr><name>total_coeff</name></expr> ]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_BLOCK</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scantable += zeros_left + total_coeff - 1; if(n &gt;= LUMA_DC_BLOCK_INDEX){ ((type*)block)[*scantable] = level[0]; for(i=1;i&lt;total_coeff &amp;&amp; zeros_left &gt; 0;i++) { if(zeros_left &lt; 7) run_before= get_vlc2(gb, run_vlc[zeros_left].table, RUN_VLC_BITS, 1); else run_before= get_vlc2(gb, run7_vlc.table, RUN7_VLC_BITS, 2); zeros_left -= run_before; scantable -= 1 + run_before; ((type*)block)[*scantable]= level[i]; } for(;i&lt;total_coeff;i++) { scantable--; ((type*)block)[*scantable]= level[i]; } }else{ ((type*)block)[*scantable] = ((int)(level[0] * qmul[*scantable] + 32))&gt;&gt;6; for(i=1;i&lt;total_coeff &amp;&amp; zeros_left &gt; 0;i++) { if(zeros_left &lt; 7) run_before= get_vlc2(gb, run_vlc[zeros_left].table, RUN_VLC_BITS, 1); else run_before= get_vlc2(gb, run7_vlc.table, RUN7_VLC_BITS, 2); zeros_left -= run_before; scantable -= 1 + run_before; ((type*)block)[*scantable]= ((int)(level[i] * qmul[*scantable] + 32))&gt;&gt;6; } for(;i&lt;total_coeff;i++) { scantable--; ((type*)block)[*scantable]= ((int)(level[i] * qmul[*scantable] + 32))&gt;&gt;6; } }</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>)</condition> <block>{<block_content>

<macro><name>STORE_BLOCK</name><argument_list>(<argument>int32_t</argument>)</argument_list></macro>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>STORE_BLOCK</name><argument_list>(<argument>int16_t</argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>zeros_left</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"negative number of zero coeffs at %d %d\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>int</name></type> <name>decode_luma_residual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan8x8</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i4x4</name></decl>, <decl><type ref="prev"/><name>i8x8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name> <init>= <expr><ternary><condition><expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA16x16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_luma_dc</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>LUMA_DC_BLOCK_INDEX</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>cbp</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>cbp</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name><operator>&amp;</operator><literal type="number">15</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i8x8</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i8x8</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i8x8</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i4x4</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i4x4</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i4x4</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><name>i4x4</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i8x8</name> <operator>+</operator> <name>p</name><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><name>index</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,

<argument><expr><name>index</name></expr></argument>, <argument><expr><name>scan</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>qscale</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0xf</literal></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>p</name><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cqm</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>IS_INTRA</name><argument_list>( <argument><expr><name>mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator><operator>+</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_cbp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i8x8</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i8x8</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i8x8</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i8x8</name><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mb</name><index>[<expr><literal type="number">64</literal><operator>*</operator><name>i8x8</name><operator>+</operator><literal type="number">256</literal><operator>*</operator><name>p</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nnz</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i4x4</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i4x4</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i4x4</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><name>i4x4</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i8x8</name> <operator>+</operator> <name>p</name><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>scan8x8</name><operator>+</operator><literal type="number">16</literal><operator>*</operator><name>i4x4</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name><index>[<expr><name>cqm</name></expr>]</index><index>[<expr><name>qscale</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i8x8</name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>nnz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>nnz</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_cbp</name> <operator>|=</operator> <operator>!</operator><operator>!</operator><name><name>nnz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i8x8</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>i4x4</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i4x4</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i4x4</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><name>i4x4</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i8x8</name> <operator>+</operator> <name>p</name><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><name>index</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><name>scan</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>cqm</name></expr>]</index><index>[<expr><name>qscale</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_cbp</name> <operator>|=</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>index</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i8x8</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>nnz</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i8x8</name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nnz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>new_cbp</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_decode_mb_cavlc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>partition_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mb_type</name></decl>, <decl><type ref="prev"/><name>cbp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct8x8_allowed</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>decode_chroma</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_shift</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_skip_run</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mb_skip_run</name> <init>= <expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_skip_run</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mb_skip_run %d is invalid\n"</literal></expr></argument>, <argument><expr><name>mb_skip_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_skip_run</name></name> <operator>=</operator> <name>mb_skip_run</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_skip_run</name></name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_skip_run</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_mbaff</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_field_decoding_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_mb_skip</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_mbaff</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_field_decoding_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>prev_mb_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name><operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mb_type</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>partition_count</name> <operator>=</operator> <name><name>ff_h264_b_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>partition_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name><name>ff_h264_b_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>-=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<goto>goto <name>decode_intra_mb</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mb_type</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>partition_count</name> <operator>=</operator> <name><name>ff_h264_p_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>partition_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name><name>ff_h264_p_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<goto>goto <name>decode_intra_mb</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_SI</name> <operator>&amp;&amp;</operator> <name>mb_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>decode_intra_mb</name>:</label>

<if_stmt><if>if<condition>(<expr><name>mb_type</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mb_type %d in %c slice too large at %d %d\n"</literal></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>partition_count</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <name><name>ff_h264_i_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>cbp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name> <operator>=</operator> <name><name>ff_h264_i_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>pred_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name><name>ff_h264_i_mb_type_info</name><index>[<expr><name>mb_type</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA_PCM</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_size</name> <init>= <expr><name><name>ff_h264_mb_sizes</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name> <operator>*</operator>

<name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name> <operator>=</operator> <call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>mb_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for an intra PCM block.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>mb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>mb_type</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fill_decode_neighbors</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_decode_caches</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pred_mode</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>di</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dct8x8_allowed</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>di</name></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>pred_intra_mode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rem_mode</name><init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>rem_mode</name> <operator>+</operator> <operator>(</operator><name>rem_mode</name> <operator>&gt;=</operator> <name>mode</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>di</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>write_back_intra_pred_mode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_h264_check_intra4x4_pred_mode</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode_cache</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_samples_available</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name> <operator>=</operator> <call><name>ff_h264_check_intra_pred_mode</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_samples_available</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>intra16x16_pred_mode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>decode_chroma</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>pred_mode</name><operator>=</operator> <call><name>ff_h264_check_intra_pred_mode</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>top_samples_available</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>left_samples_available</name></name></expr></argument>, <argument><expr><call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pred_mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name> <operator>=</operator> <name>pred_mode</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name> <operator>=</operator> <name>DC_128_PRED8x8</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>partition_count</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name><name>sub_partition_count</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>list</name></decl>, <decl><type ref="prev"/><name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator><literal type="number">13</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"B sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub_partition_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_h264_b_sub_mb_type_info</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>partition_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_h264_b_sub_mb_type_info</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>|</operator><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>|</operator><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>|</operator><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_pred_direct_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"P sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub_partition_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_h264_p_sub_mb_type_info</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>partition_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_h264_p_sub_mb_type_info</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ref_count</name> <init>= <expr><ternary><condition><expr><call><name>IS_REF0</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ref_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>tmp</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>ref_count</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>tmp</name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>^</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>tmp</name><operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmp</name><operator>&gt;=</operator><name>ref_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ref %u overflow\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ref</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>ref</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>dct8x8_allowed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dct8x8_allowed</name> <operator>=</operator> <call><name>get_dct8x8_allowed</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr> ]</index></name><operator>=</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr> ]</index></name><operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">8</literal></expr> ]</index></name><operator>=</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">9</literal></expr> ]</index></name><operator>=</operator> <name><name>ref</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sub_mb_type</name><init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_width</name><init>= <expr><ternary><condition><expr><operator>(</operator><name>sub_mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x16</name><operator>|</operator><name>MB_TYPE_16x8</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>sub_partition_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <name>block_width</name><operator>*</operator><name>j</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator> <name>mv_cache</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><name>index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pred_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>block_width</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><name>index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"final mv:%d %d\n"</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_SUB_8X8</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator>

<name><name>mv_cache</name><index>[ <expr><literal type="number">8</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>mv_cache</name><index>[ <expr><literal type="number">9</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator>

<name><name>mv_cache</name><index>[ <expr><literal type="number">8</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>mv_cache</name><index>[ <expr><literal type="number">9</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>IS_SUB_8X4</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>IS_SUB_4X8</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">8</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">8</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">0</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_cache</name><index>[ <expr><literal type="number">0</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator>

<name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_pred_direct_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dct8x8_allowed</name> <operator>&amp;=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_16X16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rc</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>^</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ref %u overflow\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>pred_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"final mv:%d %d\n"</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>IS_16X8</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rc</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>^</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ref %u overflow\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <name>LIST_NOT_USED</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>pred_16x8_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"final mv:%d %d\n"</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>IS_8X16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>rc</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>^</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ref %u overflow\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>=</operator> <name>LIST_NOT_USED</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_DIR</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>pred_8x16_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"final mv:%d %d\n"</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name><operator>=</operator> <call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[ <expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTER</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_back_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>IS_INTRA16x16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>cbp</name><operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>decode_chroma</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>&gt;</operator> <literal type="number">47</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <name><name>ff_h264_golomb_to_intra4x4_cbp</name><index>[<expr><name>cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <name><name>ff_h264_golomb_to_inter_cbp</name><index>[<expr><name>cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA4x4</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cbp</name><operator>=</operator> <name><name>golomb_to_intra4x4_cbp_gray</name><index>[<expr><name>cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>cbp</name><operator>=</operator> <name><name>golomb_to_inter_cbp_gray</name><index>[<expr><name>cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decode_chroma</name> <operator>&amp;&amp;</operator> <name>cbp</name><operator>&gt;</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gray chroma\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dct8x8_allowed</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cbp</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_8x8DCT</name><operator>*</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name><operator>=</operator>

<name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name><operator>=</operator> <name>cbp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>mb_type</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>||</operator> <call><name>IS_INTRA16x16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i4x4</name></decl>, <decl><type ref="prev"/><name>i8x8</name></decl>, <decl><type ref="prev"/><name>chroma_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dquant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scan8x8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_qp</name> <init>= <expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dquant</name><operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>dquant</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name><operator>)</operator> <operator>&gt;</operator> <name>max_qp</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>+=</operator> <name>max_qp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>-=</operator> <name>max_qp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name><operator>)</operator> <operator>&gt;</operator> <name>max_qp</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dquant out of range (%d) at %d %d\n"</literal></expr></argument>, <argument><expr><name>dquant</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>max_qp</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>scan8x8</name> <operator>=</operator> <ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc</name></name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>field_scan</name></name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>scan8x8</name> <operator>=</operator> <ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc</name></name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan</name></name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_luma_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>scan8x8</name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>|=</operator> <name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_luma_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>scan8x8</name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_luma_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>scan8x8</name></expr></argument>, <argument><expr><name>pixel_shift</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_c8x8</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name><operator>&amp;</operator><literal type="number">0x30</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>chroma_idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>chroma_idx</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>chroma_idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">256</literal> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><literal type="number">16</literal><operator>*</operator><name>chroma_idx</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></argument>,

<argument><expr><name>CHROMA_DC_BLOCK_INDEX</name> <operator>+</operator> <name>chroma_idx</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ff_h264_chroma422_dc_scan</name></expr> </then><else>: <expr><name>ff_h264_chroma_dc_scan</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>num_c8x8</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name><operator>&amp;</operator><literal type="number">0x20</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>chroma_idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>chroma_idx</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>chroma_idx</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>qmul</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>chroma_idx</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><call><name>IS_INTRA</name><argument_list>( <argument><expr><name>mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><name>chroma_idx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mb</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>chroma_idx</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i8x8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i8x8</name><operator>&lt;</operator><name>num_c8x8</name></expr>;</condition> <incr><expr><name>i8x8</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i4x4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i4x4</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i4x4</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>chroma_idx</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>i8x8</name> <operator>+</operator> <name>i4x4</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>scan</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>qmul</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mb</name> <operator>+=</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>pixel_shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_back_non_zero_count</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
