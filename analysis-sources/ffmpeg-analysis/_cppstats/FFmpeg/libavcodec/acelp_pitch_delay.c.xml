<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\acelp_pitch_delay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audiodsp.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_acelp_decode_8bit_to_1st_delay3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ac_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ac_index</name> <operator>+=</operator> <literal type="number">58</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ac_index</name> <operator>&gt;</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ac_index</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>ac_index</name> <operator>-</operator> <literal type="number">510</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ac_index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_acelp_decode_4bit_to_2nd_delay3</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>ac_index</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pitch_delay_min</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ac_index</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>ac_index</name> <operator>+</operator> <name>pitch_delay_min</name><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>ac_index</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <name>pitch_delay_min</name> <operator>+</operator> <name>ac_index</name> <operator>+</operator> <literal type="number">6</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>ac_index</name> <operator>+</operator> <name>pitch_delay_min</name><operator>)</operator> <operator>-</operator> <literal type="number">18</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_acelp_decode_5_6_bit_to_2nd_delay3</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>ac_index</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pitch_delay_min</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">3</literal> <operator>*</operator> <name>pitch_delay_min</name> <operator>+</operator> <name>ac_index</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_acelp_decode_9bit_to_1st_delay6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ac_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ac_index</name> <operator>&lt;</operator> <literal type="number">463</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ac_index</name> <operator>+</operator> <literal type="number">105</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name>ac_index</name> <operator>-</operator> <literal type="number">368</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_acelp_decode_6bit_to_2nd_delay6</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>ac_index</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pitch_delay_min</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">6</literal> <operator>*</operator> <name>pitch_delay_min</name> <operator>+</operator> <name>ac_index</name> <operator>-</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_update_past_gain</name><parameter_list>(

<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>quant_energy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>gain_corr_factor</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_ma_pred_order</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>erasure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avg_gain</name><init>=<expr><name><name>quant_energy</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_ma_pred_order</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_ma_pred_order</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>avg_gain</name> <operator>+=</operator> <name><name>quant_energy</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant_energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>quant_energy</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>erasure</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>avg_gain</name> <operator>&gt;&gt;</operator> <name>log2_ma_pred_order</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10240</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">6165</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><call><name>ff_log2_q15</name><argument_list>(<argument><expr><name>gain_corr_factor</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">13</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>ff_acelp_decode_gain_code</name><parameter_list>(

<parameter><decl><type><name>AudioDSPContext</name> <modifier>*</modifier></type><name>adsp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>gain_corr_factor</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>fc_v</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mr_energy</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>quant_energy</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>ma_prediction_coeff</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ma_pred_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mr_energy</name> <operator>&lt;&lt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>ma_pred_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mr_energy</name> <operator>+=</operator> <name><name>quant_energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ma_prediction_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>G729_BITEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mr_energy</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">6165LL</literal> <operator>*</operator> <call><name>ff_log2</name><argument_list>(<argument><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>fc_v</name></expr></argument>, <argument><expr><name>fc_v</name></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mr_energy</name> <operator>=</operator> <operator>(</operator><literal type="number">5439</literal> <operator>*</operator> <operator>(</operator><name>mr_energy</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<return>return <expr><call><name>bidir_sal</name><argument_list>(

<argument><expr><operator>(</operator><operator>(</operator><call><name>ff_exp2</name><argument_list>(<argument><expr><name>mr_energy</name> <operator>&amp;</operator> <literal type="number">0x7fff</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>gain_corr_factor</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>mr_energy</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">25</literal></expr></argument>

)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>mr_energy</name> <operator>=</operator> <name>gain_corr_factor</name> <operator>*</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>mr_energy</name> <operator>/</operator> <operator>(</operator><literal type="number">20</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator>

<call><name>sqrt</name><argument_list>(<argument><expr><call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>fc_v</name></expr></argument>, <argument><expr><name>fc_v</name></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mr_energy</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>ff_amr_set_fixed_gain</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>fixed_gain_factor</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fixed_mean_energy</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>prediction_error</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>energy_mean</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>pred_table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><name>fixed_gain_factor</name> <operator>*</operator>

<call><name>ff_exp10</name><argument_list>(<argument><expr><literal type="number">0.05</literal> <operator>*</operator>

<operator>(</operator><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>pred_table</name></expr></argument>, <argument><expr><name>prediction_error</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<name>energy_mean</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator>

<call><name>sqrtf</name><argument_list>(<argument><expr><ternary><condition><expr><name>fixed_mean_energy</name></expr> ?</condition><then> <expr><name>fixed_mean_energy</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prediction_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prediction_error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>prediction_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prediction_error</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10f</name><argument_list>(<argument><expr><name>fixed_gain_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_decode_pitch_lag</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_int</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_frac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>prev_lag_int</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>third_as_first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resolution</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subframe</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>subframe</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>third_as_first</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">197</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>+=</operator> <literal type="number">59</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>pitch_index</name> <operator>-</operator> <literal type="number">335</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>resolution</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>search_range_min</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>prev_lag_int</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>PITCH_DELAY_MIN</name></expr></argument>,

<argument><expr><name>PITCH_DELAY_MAX</name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <name>search_range_min</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>search_range_min</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <name>search_range_min</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pitch_index</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resolution</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>prev_lag_int</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>PITCH_DELAY_MIN</name></expr></argument>,

<argument><expr><name>PITCH_DELAY_MAX</name> <operator>-</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pitch_index</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>prev_lag_int</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>PITCH_DELAY_MIN</name></expr></argument>,

<argument><expr><name>PITCH_DELAY_MAX</name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <name>pitch_index</name> <operator>*</operator> <literal type="number">10923</literal> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>*</operator><name>lag_int</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
