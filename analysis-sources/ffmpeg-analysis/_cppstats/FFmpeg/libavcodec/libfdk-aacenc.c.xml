<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libfdk-aacenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdk-aac/aacenc_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_frame_queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AACENCODER_LIB_VL0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDKENC_VER_AT_LEAST</name><parameter_list>(<parameter><type><name>vl0</name></type></parameter>, <parameter><type><name>vl1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((AACENCODER_LIB_VL0 &gt; vl0) || (AACENCODER_LIB_VL0 == vl0 &amp;&amp; AACENCODER_LIB_VL1 &gt;= vl1))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDKENC_VER_AT_LEAST</name><parameter_list>(<parameter><type><name>vl0</name></type></parameter>, <parameter><type><name>vl1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>AACContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE_AACENCODER</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>afterburner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eld_sbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eld_v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>signaling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>latm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_period</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioFrameQueue</name></type> <name>afq</name></decl>;</decl_stmt>

}</block></struct></type> <name>AACContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>aac_enc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"afterburner"</literal></expr>, <expr><literal type="string">"Afterburner (improved quality)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>afterburner</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eld_sbr"</literal></expr>, <expr><literal type="string">"Enable SBR for ELD (for SBR in other configurations, use the -profile parameter)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>eld_sbr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKENC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if> 

<expr><block>{ <expr><literal type="string">"eld_v2"</literal></expr>, <expr><literal type="string">"Enable ELDv2 (LD-MPS extension for ELD stereo signals)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>eld_v2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"signaling"</literal></expr>, <expr><literal type="string">"SBR/PS signaling style"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>signaling</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"signaling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><literal type="string">"Choose signaling implicitly (explicit hierarchical by default, implicit if global header is disabled)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"signaling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"implicit"</literal></expr>, <expr><literal type="string">"Implicit backwards compatible signaling"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"signaling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"explicit_sbr"</literal></expr>, <expr><literal type="string">"Explicit SBR, implicit PS signaling"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"signaling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"explicit_hierarchical"</literal></expr>, <expr><literal type="string">"Explicit hierarchical signaling"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"signaling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"latm"</literal></expr>, <expr><literal type="string">"Output LATM/LOAS encapsulated data"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>latm</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"header_period"</literal></expr>, <expr><literal type="string">"StreamMuxConfig and PCE repetition period (in frames)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>header_period</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xffff</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vbr"</literal></expr>, <expr><literal type="string">"VBR mode (1-5)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>vbr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>aac_enc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libfdk_aac"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>aac_enc_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aac_get_error</name><parameter_list>(<parameter><decl><type><name>AACENC_ERROR</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AACENC_OK</name></expr>:</case>

<return>return <expr><literal type="string">"No error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INVALID_HANDLE</name></expr>:</case>

<return>return <expr><literal type="string">"Invalid handle"</literal></expr>;</return>

<case>case <expr><name>AACENC_MEMORY_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"Memory allocation error"</literal></expr>;</return>

<case>case <expr><name>AACENC_UNSUPPORTED_PARAMETER</name></expr>:</case>

<return>return <expr><literal type="string">"Unsupported parameter"</literal></expr>;</return>

<case>case <expr><name>AACENC_INVALID_CONFIG</name></expr>:</case>

<return>return <expr><literal type="string">"Invalid config"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"Initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_AAC_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"AAC library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_SBR_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"SBR library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_TP_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"Transport library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_META_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"Metadata library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_ENCODE_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"Encoding error"</literal></expr>;</return>

<case>case <expr><name>AACENC_ENCODE_EOF</name></expr>:</case>

<return>return <expr><literal type="string">"End of file"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aac_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aacEncClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_af_queue_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aac_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_InfoStruct</name></type> <name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHANNEL_MODE</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_ERROR</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aot</name> <init>= <expr><name>FF_PROFILE_AAC_LOW</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cpe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open the encoder: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aot</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_AOT</name></expr></argument>, <argument><expr><name>aot</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set the AOT %d: %s\n"</literal></expr></argument>,

<argument><expr><name>aot</name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>FF_PROFILE_AAC_ELD</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eld_sbr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_SBR_MODE</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to enable SBR for ELD: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_SAMPLERATE</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set the sample rate %d: %s\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKENC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if> 

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>FF_PROFILE_AAC_ELD</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eld_v2</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_CHANNELMODE</name></expr></argument>,

<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to enable ELDv2: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_212</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKENC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if> 

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_7POINT1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_7_1_REAR_SURROUND</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_7_1_FRONT_CENTER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported number of channels %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_CHANNELMODE</name></expr></argument>,

<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unable to set channel mode %d: %s\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_CHANNELORDER</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unable to set wav channel order %d: %s\n"</literal></expr></argument>,

<argument><expr><name>mode</name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>vbr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>vbr</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>vbr</name></name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>mode</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"VBR quality %d out of range, should be 1-5\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Note, the VBR setting is unsupported and only works with "</literal>

<literal type="string">"some parameter combinations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_BITRATEMODE</name></expr></argument>,

<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set the VBR bitrate mode %d: %s\n"</literal></expr></argument>,

<argument><expr><name>mode</name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_AAC_HE_V2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><literal type="number">96</literal><operator>*</operator><name>sce</name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><name>cpe</name><operator>)</operator> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">44</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_AAC_HE</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_AAC_HE_V2</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_MPEG2_AAC_HE</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>eld_sbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_BITRATE</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set the bitrate %"</literal><name>PRId64</name><literal type="string">": %s\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_TRANSMUX</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr> ?</condition><then> <expr><name>TT_MP4_RAW</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>latm</name></name></expr> ?</condition><then> <expr><name>TT_MP4_LOAS</name></expr> </then><else>: <expr><name>TT_MP4_ADTS</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set the transmux format: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>latm</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>header_period</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_HEADER_PERIOD</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_period</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set header period: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>signaling</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>signaling</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_SIGNALING_MODE</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>signaling</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set signaling mode %d: %s\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>signaling</name></name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_AFTERBURNER</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>afterburner</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set afterburner to %d: %s\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>afterburner</name></name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">255</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;</operator> <literal type="number">20000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cutoff valid range is %d-20000\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">255</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AACENC_BANDWIDTH</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set the encoder bandwidth to %d: %s\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr></argument>, <argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncEncode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize the encoder: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncInfo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get encoder info: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>frameLength</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKENC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if> 

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nDelay</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>encoderDelay</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_af_queue_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>confSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>confBuf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>confSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>aac_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aac_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_BufDesc</name></type> <name>in_buf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>out_buf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_InArgs</name></type> <name>in_args</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_OutArgs</name></type> <name>out_args</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_buffer_identifier</name> <init>= <expr><name>IN_AUDIO_DATA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_buffer_size</name></decl>, <decl><type ref="prev"/><name>in_buffer_element_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_buffer_identifier</name> <init>= <expr><name>OUT_BITSTREAM_DATA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_buffer_size</name></decl>, <decl><type ref="prev"/><name>out_buffer_element_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>in_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dummy_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_ERROR</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_ptr</name> <operator>=</operator> <name>dummy_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_buffer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_args</name><operator>.</operator><name>numInSamples</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>in_ptr</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_buffer_size</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_args</name><operator>.</operator><name>numInSamples</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_af_queue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>in_buffer_element_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>numBufs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufs</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufferIdentifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_buffer_identifier</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufElSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_buffer_element_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">768</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_ptr</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_buffer_size</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_buffer_element_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>numBufs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufs</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufferIdentifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_buffer_identifier</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufElSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_buffer_element_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacEncEncode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>out_args</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <name>AACENC_ENCODE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to encode frame: %s\n"</literal></expr></argument>,

<argument><expr><call><name>aac_get_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_af_queue_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVProfile</name></type> <name><name>profiles</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>FF_PROFILE_AAC_LOW</name></expr>, <expr><literal type="string">"LC"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_AAC_HE</name></expr>, <expr><literal type="string">"HE-AAC"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_AAC_HE_V2</name></expr>, <expr><literal type="string">"HE-AACv2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_AAC_LD</name></expr>, <expr><literal type="string">"LD"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_AAC_ELD</name></expr>, <expr><literal type="string">"ELD"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>aac_encode_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>aac_channel_layout</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CH_LAYOUT_MONO</name></expr>,

<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,

<expr><name>AV_CH_LAYOUT_SURROUND</name></expr>,

<expr><name>AV_CH_LAYOUT_4POINT0</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKENC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if> 

<expr><name>AV_CH_LAYOUT_7POINT1_WIDE_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_7POINT1</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>aac_sample_rates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">96000</literal></expr>, <expr><literal type="number">88200</literal></expr>, <expr><literal type="number">64000</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">32000</literal></expr>,

<expr><literal type="number">24000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">12000</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libfdk_aac_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libfdk_aac"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Fraunhofer FDK AAC"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AACContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aac_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>aac_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aac_encode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aac_enc_class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>aac_encode_defaults</name></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <name>profiles</name></expr>,

<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <name>aac_sample_rates</name></expr>,

<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <name>aac_channel_layout</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libfdk"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
