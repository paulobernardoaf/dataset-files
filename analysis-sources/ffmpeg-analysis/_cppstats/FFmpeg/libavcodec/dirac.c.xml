<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dirac.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dirac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12data.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DIRAC_PARSE</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>dirac_source_params</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>chroma_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_field_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_rate_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>aspect_ratio_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>clean_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>clean_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>clean_left_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>clean_right_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pixel_range_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>color_spec_index</name></decl>;</decl_stmt> 

}</block></struct></type> <name>dirac_source_params</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dirac_source_params</name></type> <name><name>dirac_source_parameters_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">640</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">704</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">704</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">720</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">720</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">7680</literal></expr>, <expr><literal type="number">4320</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">7680</literal></expr>, <expr><literal type="number">4320</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>dirac_preset_aspect_ratios</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>dirac_frame_rate</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">15000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitdepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl>;</decl_stmt>

}</block> <decl><name><name>pixel_range_presets</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>AVCOL_RANGE_JPEG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>AVCOL_RANGE_MPEG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><name>AVCOL_RANGE_MPEG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><name>AVCOL_RANGE_MPEG</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name><name>dirac_primaries</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AVCOL_PRI_BT709</name></expr>,

<expr><name>AVCOL_PRI_SMPTE170M</name></expr>,

<expr><name>AVCOL_PRI_BT470BG</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl>;</decl_stmt>

}</block> <decl><name><name>dirac_color_presets</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AVCOL_PRI_BT709</name></expr>, <expr><name>AVCOL_SPC_BT709</name></expr>, <expr><name>AVCOL_TRC_BT709</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVCOL_PRI_SMPTE170M</name></expr>, <expr><name>AVCOL_SPC_BT470BG</name></expr>, <expr><name>AVCOL_TRC_BT709</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVCOL_PRI_BT470BG</name></expr>, <expr><name>AVCOL_SPC_BT470BG</name></expr>, <expr><name>AVCOL_TRC_BT709</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVCOL_PRI_BT709</name></expr>, <expr><name>AVCOL_SPC_BT709</name></expr>, <expr><name>AVCOL_TRC_BT709</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVCOL_PRI_BT709</name></expr>, <expr><name>AVCOL_SPC_BT709</name></expr>, <expr><name>AVCOL_TRC_UNSPECIFIED</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>dirac_pix_fmt</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>}</block></expr>,

<expr><block>{<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>}</block></expr>,

<expr><block>{<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_source_parameters</name><parameter_list>(<parameter><decl><type><name>AVDiracSeqHeader</name> <modifier>*</modifier></type><name>dsh</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>luma_depth</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>luma_offset</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_x_shift</name></decl>, <decl><type ref="prev"/><name>chroma_y_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>&gt;</operator> <literal type="number">2U</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown chroma format %d\n"</literal></expr></argument>,

<argument><expr><name><name>dsh</name><operator>-&gt;</operator><name>chroma_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name> <operator>&gt;</operator> <literal type="number">10U</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame_rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <name><name>ff_mpeg12_frame_rate_tab</name><index>[<expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <name><name>dirac_frame_rate</name><index>[<expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name>frame_rate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>aspect_ratio_index</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>aspect_ratio_index</name></name> <operator>&gt;</operator> <literal type="number">6U</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsh</name><operator>-&gt;</operator><name>aspect_ratio_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>aspect_ratio_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator>

<name><name>dirac_preset_aspect_ratios</name><index>[<expr><name><name>dsh</name><operator>-&gt;</operator><name>aspect_ratio_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_width</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_height</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_left_offset</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_right_offset</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>&gt;</operator> <literal type="number">4U</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>luma_offset</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>luma_depth</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name>luma_offset</name></expr> ?</condition><then> <expr><name>AVCOL_RANGE_MPEG</name></expr>

</then><else>: <expr><name>AVCOL_RANGE_JPEG</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>luma_depth</name> <operator>=</operator> <name><name>pixel_range_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>bitdepth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>pixel_range_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>color_range</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <name>luma_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>+=</operator> <name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>&lt;</operator> <literal type="number">2U</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>dirac_pix_fmt</name><index>[<expr><name><name>dsh</name><operator>-&gt;</operator><name>chroma_format</name></name></expr>]</index><index>[<expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>dsh</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_x_shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_y_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dsh</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>chroma_x_shift</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dsh</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>chroma_y_shift</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dimensions must be an integer multiple of the chroma subsampling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>dsh</name><operator>-&gt;</operator><name>color_spec_index</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>color_spec_index</name></name> <operator>&gt;</operator> <literal type="number">4U</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>dirac_color_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>color_primaries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>dirac_color_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>colorspace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>dirac_color_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>color_trc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsh</name><operator>-&gt;</operator><name>color_spec_index</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">3U</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>dirac_primaries</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>dsh</name><operator>-&gt;</operator><name>color_spec_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>dirac_color_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>color_primaries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>dirac_color_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>colorspace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>dirac_color_presets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>color_trc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_dirac_parse_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVDiracSeqHeader</name> <modifier>*</modifier><modifier>*</modifier></type><name>pdsh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDiracSeqHeader</name> <modifier>*</modifier></type><name>dsh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>video_format</name></decl>, <decl><type ref="prev"/><name>picture_coding_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dsh</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dsh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>major</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>video_format</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>major</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>log_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Stream is old and may not work\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>dsh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>major</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>log_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Stream may have unhandled features\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>video_format</name> <operator>&gt;</operator> <literal type="number">20U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>chroma_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>interlaced</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>top_field_first</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>frame_rate_index</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>frame_rate_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>aspect_ratio_index</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>aspect_ratio_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_width</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>clean_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_height</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>clean_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_left_offset</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>clean_left_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>clean_right_offset</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>clean_right_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>pixel_range_index</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>pixel_range_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsh</name><operator>-&gt;</operator><name>color_spec_index</name></name> <operator>=</operator> <name><name>dirac_source_parameters_defaults</name><index>[<expr><name>video_format</name></expr>]</index></name><operator>.</operator><name>color_spec_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_source_parameters</name><argument_list>(<argument><expr><name>dsh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>picture_coding_mode</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_coding_mode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported picture coding mode %d"</literal></expr></argument>,

<argument><expr><name>picture_coding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pdsh</name> <operator>=</operator> <name>dsh</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pdsh</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>av_dirac_parse_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVDiracSeqHeader</name> <modifier>*</modifier><modifier>*</modifier></type><name>pdsh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
