<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\g723_1dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g723_1.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CNG_RANDOM_SEED</name></cpp:macro> <cpp:value>12345</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g723_1_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G723_1_Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only mono and stereo are supported (requested channels: %d).\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pf_gain</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name>dc_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sid_lsp</name></name></expr></argument>, <argument><expr><name>dc_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>sid_lsp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name> <operator>=</operator> <name>CNG_RANDOM_SEED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>past_frame_type</name></name> <operator>=</operator> <name>SID_FRAME</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_bitstream</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ad_cb_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>info_bits</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info_bits</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>=</operator> <name>UNTRANSMITTED_FRAME</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info_bits</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>=</operator> <name>SID_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>amp_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name> <operator>=</operator> <ternary><condition><expr><name>info_bits</name></expr> ?</condition><then> <expr><name>RATE_5300</name></expr> </then><else>: <expr><name>RATE_6300</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>=</operator> <name>ACTIVE_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">123</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>PITCH_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">123</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>PITCH_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad_cb_len</name> <operator>=</operator> <literal type="number">170</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dirac_train</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name> <operator>==</operator> <name>RATE_6300</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dirac_train</name> <operator>=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>&amp;=</operator> <literal type="number">0x7FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ad_cb_len</name> <operator>=</operator> <literal type="number">85</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ad_cb_gain</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>GAIN_LEVELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ad_cb_gain</name> <operator>&lt;</operator> <name>ad_cb_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>amp_index</name> <operator>=</operator> <name>temp</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ad_cb_gain</name> <operator>*</operator>

<name>GAIN_LEVELS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>grid_index</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>grid_index</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>grid_index</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>grid_index</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name> <operator>==</operator> <name>RATE_6300</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <name>temp</name> <operator>/</operator> <literal type="number">810</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>*</operator> <literal type="number">810</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>*</operator> <literal type="number">90</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <name>temp</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>*</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>square_root</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>ff_sqrt</name><argument_list>(<argument><expr><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_fcb_excitation</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>G723_1_Subframe</name> <modifier>*</modifier></type><name>subfrm</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>Rate</name></name></type> <name>cur_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_rate</name> <operator>==</operator> <name>RATE_6300</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_pos</name></name> <operator>&gt;=</operator> <name><name>max_pos</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>PULSE_MAX</name> <operator>-</operator> <name><name>pulses</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>subfrm</name><operator>-&gt;</operator><name>pulse_pos</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>/</operator> <name>GRID_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>combinatorial_table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>combinatorial_table</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_sign</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>PULSE_MAX</name> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name><name>subfrm</name><operator>-&gt;</operator><name>grid_index</name></name> <operator>+</operator> <name>GRID_SIZE</name> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<operator>-</operator><name><name>fixed_cb_gain</name><index>[<expr><name><name>subfrm</name><operator>-&gt;</operator><name>amp_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name><name>subfrm</name><operator>-&gt;</operator><name>grid_index</name></name> <operator>+</operator> <name>GRID_SIZE</name> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>fixed_cb_gain</name><index>[<expr><name><name>subfrm</name><operator>-&gt;</operator><name>amp_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>PULSE_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>subfrm</name><operator>-&gt;</operator><name>dirac_train</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_g723_1_gen_dirac_train</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>pitch_lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>cb_gain</name> <init>= <expr><name><name>fixed_cb_gain</name><index>[<expr><name><name>subfrm</name><operator>-&gt;</operator><name>amp_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb_shift</name> <init>= <expr><name><name>subfrm</name><operator>-&gt;</operator><name>grid_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb_sign</name> <init>= <expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_sign</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb_pos</name> <init>= <expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>lag</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cb_pos</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>cb_shift</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cb_sign</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>cb_gain</name></expr> </then><else>: <expr><operator>-</operator><name>cb_gain</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_sign</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name><name>pitch_contrib</name><index>[<expr><name><name>subfrm</name><operator>-&gt;</operator><name>ad_cb_gain</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>pitch_lag</name> <operator>+</operator>

<name><name>subfrm</name><operator>-&gt;</operator><name>ad_cb_lag</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <name><name>pitch_contrib</name><index>[<expr><operator>(</operator><name><name>subfrm</name><operator>-&gt;</operator><name>ad_cb_gain</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lag</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>lag</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>beta</name> <operator>*</operator> <name><name>vector</name><index>[<expr><name>i</name> <operator>-</operator> <name>lag</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>autocorr_max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ccr_max</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>, <decl><type ref="prev"/><name>ccr</name></decl>, <decl><type ref="prev"/><name>lag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pitch_lag</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>PITCH_MAX</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>pitch_lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>FRAME_LEN</name> <operator>+</operator> <name>PITCH_MAX</name> <operator>-</operator> <name>offset</name> <operator>-</operator> <name>length</name></expr></argument>, <argument><expr><name>pitch_lag</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>pitch_lag</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pitch_lag</name> <operator>-</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>dir</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ccr</name> <operator>&gt;</operator> <operator>*</operator><name>ccr_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ccr_max</name> <operator>=</operator> <name>ccr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>lag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>comp_ppf_gains</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>, <parameter><decl><type><name>PPFParam</name> <modifier>*</modifier></type><name>ppf</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Rate</name></name></type> <name>cur_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tgt_eng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ccr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_eng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pf_residual</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>lag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>tgt_eng</name> <operator>*</operator> <name>res_eng</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name>ccr</name> <operator>*</operator> <name>ccr</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp2</name> <operator>&gt;</operator> <name>temp1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ccr</name> <operator>&gt;=</operator> <name>res_eng</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>=</operator> <name><name>ppf_gain_weight</name><index>[<expr><name>cur_rate</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>=</operator> <operator>(</operator><name>ccr</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <name>res_eng</name> <operator>*</operator>

<name><name>ppf_gain_weight</name><index>[<expr><name>cur_rate</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>tgt_eng</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ccr</name> <operator>*</operator> <name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>*</operator> <name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <name>res_eng</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_residual</name> <operator>=</operator> <call><name>av_sat_add32</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tgt_eng</name> <operator>&gt;=</operator> <name>pf_residual</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <literal type="number">0x7fff</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>tgt_eng</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <name>pf_residual</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>sc_gain</name></name> <operator>=</operator> <call><name>square_root</name><argument_list>(<argument><expr><name>temp1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>sc_gain</name></name> <operator>=</operator> <literal type="number">0x7fff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>*</operator> <name><name>ppf</name><operator>-&gt;</operator><name>sc_gain</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>comp_ppf_coeff</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>,

<parameter><decl><type><name>PPFParam</name> <modifier>*</modifier></type><name>ppf</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Rate</name></name></type> <name>cur_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>energy</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>LPC_ORDER</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fwd_lag</name> <init>= <expr><call><name>autocorr_max</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>energy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pitch_lag</name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>back_lag</name> <init>= <expr><call><name>autocorr_max</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>energy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pitch_lag</name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>opt_gain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppf</name><operator>-&gt;</operator><name>sc_gain</name></name> <operator>=</operator> <literal type="number">0x7fff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>back_lag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fwd_lag</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fwd_lag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>energy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>fwd_lag</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>fwd_lag</name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>back_lag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>energy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <name>back_lag</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>back_lag</name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>fwd_lag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>back_lag</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>comp_ppf_gains</name><argument_list>(<argument><expr><name>fwd_lag</name></expr></argument>, <argument><expr><name>ppf</name></expr></argument>, <argument><expr><name>cur_rate</name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>energy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>fwd_lag</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>comp_ppf_gains</name><argument_list>(<argument><expr><operator>-</operator><name>back_lag</name></expr></argument>, <argument><expr><name>ppf</name></expr></argument>, <argument><expr><name>cur_rate</name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>energy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>energy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>energy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>energy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>energy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>energy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>energy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp1</name> <operator>&gt;=</operator> <name>temp2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>comp_ppf_gains</name><argument_list>(<argument><expr><name>fwd_lag</name></expr></argument>, <argument><expr><name>ppf</name></expr></argument>, <argument><expr><name>cur_rate</name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>energy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>comp_ppf_gains</name><argument_list>(<argument><expr><operator>-</operator><name>back_lag</name></expr></argument>, <argument><expr><name>ppf</name></expr></argument>, <argument><expr><name>cur_rate</name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>energy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>energy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>comp_interp_index</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exc_eng</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>PITCH_MAX</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>LPC_ORDER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>ccr</name></decl>, <decl><type ref="prev"/><name>tgt_eng</name></decl>, <decl><type ref="prev"/><name>best_eng</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>scale</name> <operator>=</operator> <call><name>ff_g723_1_scale_vector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><name>FRAME_LEN</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>autocorr_max</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ccr</name></expr></argument>, <argument><expr><name>pitch_lag</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <call><name>av_sat_add32</name><argument_list>(<argument><expr><name>ccr</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tgt_eng</name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>exc_eng</name> <operator>=</operator> <call><name>av_sat_add32</name><argument_list>(<argument><expr><name>tgt_eng</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ccr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>best_eng</name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <name>index</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>index</name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>best_eng</name> <operator>=</operator> <call><name>av_sat_add32</name><argument_list>(<argument><expr><name>best_eng</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>best_eng</name> <operator>*</operator> <operator>*</operator><name>exc_eng</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;</operator> <name>ccr</name> <operator>*</operator> <name>ccr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>residual_interp</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rseed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lag</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vector_ptr</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>PITCH_MAX</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vector_ptr</name><index>[<expr><name>i</name> <operator>-</operator> <name>lag</name></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>out</name> <operator>+</operator> <name>lag</name><operator>)</operator></expr></argument>, <argument><expr><name>lag</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>FRAME_LEN</name> <operator>-</operator> <name>lag</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rseed</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>rseed</name> <operator>*</operator> <literal type="number">521</literal> <operator>+</operator> <literal type="number">259</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>*</operator> <operator>*</operator><name>rseed</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>FRAME_LEN</name> <operator>+</operator> <name>PITCH_MAX</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iir_filter</name><parameter_list>(<parameter><type><name>fir_coef</name></type></parameter>, <parameter><type><name>iir_coef</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>, <parameter><type><name>width</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{int m, n;int res_shift = 16 &amp; ~-(width);int in_shift = 16 - res_shift;for (m = 0; m &lt; SUBFRAME_LEN; m++) {int64_t filter = 0;for (n = 1; n &lt;= LPC_ORDER; n++) {filter -= (fir_coef)[n - 1] * (src)[m - n] -(iir_coef)[n - 1] * ((dest)[m - n] &gt;&gt; in_shift);}(dest)[m] = av_clipl_int32(((src)[m] * 65536) + (filter * 8) +(1 &lt;&lt; 15)) &gt;&gt; res_shift;}}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gain_scale</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>energy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>gain</name></decl>, <decl><type ref="prev"/><name>bits1</name></decl>, <decl><type ref="prev"/><name>bits2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>energy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>*=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>av_sat_dadd32</name><argument_list>(<argument><expr><name>denom</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&amp;&amp;</operator> <name>denom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits1</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits2</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>denom</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>&lt;&lt;</operator> <name>bits1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>&lt;&lt;=</operator> <name>bits2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits2</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>bits1</name> <operator>-</operator> <name>bits2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits2</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>bits2</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>denom</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>square_root</name><argument_list>(<argument><expr><name>gain</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>bits2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pf_gain</name></name> <operator>=</operator> <operator>(</operator><literal type="number">15</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>pf_gain</name></name> <operator>+</operator> <name>gain</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pf_gain</name></name> <operator>+</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pf_gain</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>formant_postfilter</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>filter_coef</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>filter_signal</name><index>[<expr><name>LPC_ORDER</name> <operator>+</operator> <name>FRAME_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>signal_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fir_mem</name></name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>filter_signal</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iir_mem</name></name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter_signal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LPC_ORDER</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>filter_coef</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>postfilter_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>postfilter_tbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>iir_filter</name><argument_list>(<argument><expr><name><name>filter_coef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>filter_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>filter_signal</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lpc</name> <operator>+=</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fir_mem</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iir_mem</name></name></expr></argument>, <argument><expr><name>filter_signal</name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>signal_ptr</name> <operator>=</operator> <name>filter_signal</name> <operator>+</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>auto_corr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>energy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>ff_g723_1_scale_vector</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>auto_corr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>auto_corr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>auto_corr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>auto_corr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reflection_coef</name></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>reflection_coef</name></name> <operator>+</operator> <name>temp</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>reflection_coef</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_sat_dadd32</name><argument_list>(<argument><expr><name><name>signal_ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>signal_ptr</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>temp</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>energy</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>auto_corr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>-</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>energy</name> <operator>=</operator> <name><name>auto_corr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gain_scale</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>energy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>signal_ptr</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sid_gain_to_lsp_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>gain</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>gain</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>gain</name> <operator>-</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>gain</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cng_rand</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>state</name> <operator>*</operator> <literal type="number">521</literal> <operator>+</operator> <literal type="number">259</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal><operator>)</operator> <operator>*</operator> <name>base</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_sid_gain</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>seg</name></decl>, <decl><type ref="prev"/><name>seg2</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>val_add</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">31</literal> <operator>||</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>INT32_MIN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>shift</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>&gt;&gt;</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>t</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>cng_filt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>cng_bseg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0x3F</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>cng_bseg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;=</operator> <name><name>cng_bseg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>seg2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val_add</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shift</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>seg</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <name>seg2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>*=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>val_add</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>val_add</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>val_add</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>seg</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <name>seg2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>t</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>seg</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>seg2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>t</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>seg2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>seg</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>val</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>seg2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>t</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>seg2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_noise</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>off</name><index>[<expr><name>SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>signs</name><index>[<expr><name>SUBFRAMES</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">11</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pos</name><index>[<expr><name>SUBFRAMES</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vector_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cng_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">123</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>cng_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">123</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ad_cb_gain</name> <operator>=</operator> <call><name>cng_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name> <operator>=</operator> <name><name>cng_adaptive_cb_lag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>cng_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>off</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>off</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>SUBFRAME_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>signs</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>SUBFRAME_LEN</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><call><name>cng_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>off</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><operator>--</operator><name>t</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>vector_ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector_ptr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>,

<argument><expr><name>PITCH_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_g723_1_gen_acb_excitation</name><argument_list>(<argument><expr><name>vector_ptr</name></expr></argument>, <argument><expr><name>vector_ptr</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_gen_acb_excitation</name><argument_list>(<argument><expr><name>vector_ptr</name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>,

<argument><expr><name>vector_ptr</name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>vector_ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0x7FFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>-</operator><literal type="number">10</literal> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>vector_ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>t</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>vector_ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>t</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name><name>tmp</name><index>[<expr><name><name>pos</name><index>[<expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name><name>signs</name><index>[<expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>b0</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2979LL</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name> <operator>*</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name> <operator>*</operator> <name>SUBFRAME_LEN</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <name>shift</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>&lt;&lt;=</operator> <operator>-</operator><operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>sum</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>c</name><operator>)</operator> <operator>*</operator> <literal type="number">2979LL</literal> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>b0</name> <operator>*</operator> <name>b0</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>b0</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>square_root</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>delta</name> <operator>-</operator> <name>b0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>delta</name> <operator>+</operator> <name>b0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vector_ptr</name><index>[<expr><name><name>pos</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>vector_ptr</name><index>[<expr><name><name>pos</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>x</name> <operator>*</operator> <name><name>signs</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector_ptr</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><name>vector_ptr</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vector_ptr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vector_ptr</name> <operator>+=</operator> <name>SUBFRAME_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>LPC_ORDER</name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>,

<argument><expr><name>PITCH_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g723_1_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G723_1_Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dec_mode</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PPFParam</name></type> <name><name>ppf</name><index>[<expr><name>SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cur_lsp</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lpc</name><index>[<expr><name>SUBFRAMES</name> <operator>*</operator> <name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>acb_vector</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bad_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>frame_size</name><index>[<expr><name>dec_mode</name></expr>]</index></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Expected %d bytes, got %d - skipping packet\n"</literal></expr></argument>,

<argument><expr><name><name>frame_size</name><index>[<expr><name>dec_mode</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>FRAME_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_bitstream</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>ch</name> <operator>*</operator> <operator>(</operator><name>buf_size</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>buf_size</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bad_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>past_frame_type</name></name> <operator>==</operator> <name>ACTIVE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>=</operator> <name>ACTIVE_FRAME</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>=</operator> <name>UNTRANSMITTED_FRAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>==</operator> <name>ACTIVE_FRAME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>erased_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>erased_frames</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>erased_frames</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_g723_1_inverse_quant</name><argument_list>(<argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name></name></expr></argument>, <argument><expr><name>bad_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_lsp_interpolate</name><argument_list>(<argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>,

<argument><expr><name>PITCH_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>erased_frames</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vector_ptr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <name>PITCH_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>interp_gain</name></name> <operator>=</operator> <name><name>fixed_cb_gain</name><index>[<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>amp_index</name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>amp_index</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>gen_fcb_excitation</name><argument_list>(<argument><expr><name>vector_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_gen_acb_excitation</name><argument_list>(<argument><expr><name>acb_vector</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>SUBFRAME_LEN</name> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>vector_ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vector_ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <name><name>acb_vector</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vector_ptr</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vector_ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <name>PITCH_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>interp_index</name></name> <operator>=</operator> <call><name>comp_interp_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>postfilter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>PITCH_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>comp_ppf_coeff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ppf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>LPC_ORDER</name> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><name>vector_ptr</name> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><name>vector_ptr</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name><name>ppf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>,

<argument><expr><name><name>ppf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sc_gain</name></expr></argument>,

<argument><expr><name><name>ppf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>opt_gain</name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>audio</name> <operator>=</operator> <name>vector_ptr</name> <operator>-</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>,

<argument><expr><name>PITCH_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>interp_gain</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>interp_gain</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>erased_frames</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>FRAME_LEN</name> <operator>+</operator> <name>PITCH_MAX</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>PITCH_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>FRAME_LEN</name> <operator>+</operator> <name>LPC_ORDER</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>LPC_ORDER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>residual_interp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp_index</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp_gain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>random_seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>FRAME_LEN</name> <operator>-</operator> <name>PITCH_MAX</name><operator>)</operator></expr></argument>,

<argument><expr><name>PITCH_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cng_random_seed</name></name> <operator>=</operator> <name>CNG_RANDOM_SEED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name> <operator>==</operator> <name>SID_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>=</operator> <call><name>sid_gain_to_lsp_index</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>amp_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_inverse_quant</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sid_lsp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>past_frame_type</name></name> <operator>==</operator> <name>ACTIVE_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name> <operator>=</operator> <call><name>estimate_sid_gain</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>past_frame_type</name></name> <operator>==</operator> <name>ACTIVE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>cur_gain</name></name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>sid_gain</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>generate_noise</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_lsp_interpolate</name><argument_list>(<argument><expr><name>lpc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sid_lsp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sid_lsp</name></name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>past_frame_type</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cur_frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>synth_mem</name></name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LPC_ORDER</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lpc</name><index>[<expr><name>j</name> <operator>*</operator> <name>LPC_ORDER</name></expr>]</index></name></expr></argument>,

<argument><expr><name>audio</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>synth_mem</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>postfilter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>formant_postfilter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>LPC_ORDER</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>frame_size</name><index>[<expr><name>dec_mode</name></expr>]</index></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(G723_1_Context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"postfilter"</literal></expr>, <expr><literal type="string">"enable postfilter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>postfilter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AD</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>g723_1dec_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"G.723.1 decoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_g723_1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g723_1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.723.1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_G723_1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G723_1_Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g723_1_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>g723_1_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>g723_1dec_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
