<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\eac3dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_ac3_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3dec_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eac3_data.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>EAC3_GAQ_NO</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>EAC3_GAQ_12</name></decl>,

<decl><name>EAC3_GAQ_14</name></decl>,

<decl><name>EAC3_GAQ_124</name></decl>

}</block></enum></type> <name>EAC3GaqMode</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAC3_SR_CODE_REDUCED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_eac3_apply_spectral_extension</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>wrapflag</name><index>[<expr><name>SPX_MAX_BANDS</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>, <decl><type ref="prev"/><name>num_copy_sections</name></decl>, <decl><type ref="prev"/><name><name>copy_sizes</name><index>[<expr><name>SPX_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>rms_energy</name><index>[<expr><name>SPX_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_copy_sections</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_spx_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copysize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bandsize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>spx_band_sizes</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>+</operator> <name>bandsize</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>copy_sizes</name><index>[<expr><name>num_copy_sections</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bin</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrapflag</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bandsize</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>copysize</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>copy_sizes</name><index>[<expr><name>num_copy_sections</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bin</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>copysize</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>bandsize</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name> <operator>-</operator> <name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>+=</operator> <name>copysize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>copy_sizes</name><index>[<expr><name>num_copy_sections</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bin</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_uses_spx</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_copy_sections</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>copy_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>+=</operator> <name><name>copy_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_spx_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bandsize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>spx_band_sizes</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>accum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bandsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>coeff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <name>coeff</name> <operator>*</operator> <name>coeff</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rms_energy</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>accum</name> <operator>/</operator> <name>bandsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spx_atten_code</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>atten_tab</name> <init>= <expr><name><name>ff_eac3_spx_atten_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>spx_atten_code</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_spx_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wrapflag</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>atten_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>atten_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name><name>atten_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*=</operator> <name><name>atten_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*=</operator> <name><name>atten_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_band_sizes</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_spx_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>nscale</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>spx_noise_blend</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>*</operator> <name><name>rms_energy</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <name>INT32_MIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sscale</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>spx_signal_blend</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>nscale</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sscale</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_band_sizes</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>noise</name> <init>= <expr><name>nscale</name> <operator>*</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dith_state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>*=</operator> <name>sscale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name><operator>++</operator></expr>]</index></name> <operator>+=</operator> <name>noise</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF_0</name></cpp:macro> <cpp:value>10273905LL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF_1</name></cpp:macro> <cpp:value>11863283LL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF_2</name></cpp:macro> <cpp:value>3070444LL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>pre_mant</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>even0</name></decl>, <decl><type ref="prev"/><name>even1</name></decl>, <decl><type ref="prev"/><name>even2</name></decl>, <decl><type ref="prev"/><name>odd0</name></decl>, <decl><type ref="prev"/><name>odd1</name></decl>, <decl><type ref="prev"/><name>odd2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>odd1</name> <operator>=</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>even2</name> <operator>=</operator> <operator>(</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>COEFF_0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>COEFF_1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>odd0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pre_mant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>COEFF_2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>even0</name> <operator>=</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>even1</name> <operator>=</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>even0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>even0</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>even2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>even2</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <name>even2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>odd0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>odd0</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>odd2</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>pre_mant</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pre_mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>even0</name> <operator>+</operator> <name>odd0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pre_mant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>even1</name> <operator>+</operator> <name>odd1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pre_mant</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>even2</name> <operator>+</operator> <name>odd2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pre_mant</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>even2</name> <operator>-</operator> <name>odd2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pre_mant</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>even1</name> <operator>-</operator> <name>odd1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pre_mant</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>even0</name> <operator>-</operator> <name>odd0</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_eac3_decode_transform_coeffs_aht_ch</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>, <decl><type ref="prev"/><name>gs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_bap</name></decl>, <decl><type ref="prev"/><name>gaq_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>gaq_gain</name><index>[<expr><name>AC3_MAX_COEFS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>gaq_mode</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_bap</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>gaq_mode</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">17</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>gs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gaq_mode</name> <operator>==</operator> <name>EAC3_GAQ_12</name> <operator>||</operator> <name>gaq_mode</name> <operator>==</operator> <name>EAC3_GAQ_14</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>&lt;</operator> <name>end_bap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gaq_gain</name><index>[<expr><name>gs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>gaq_mode</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gaq_mode</name> <operator>==</operator> <name>EAC3_GAQ_124</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>gc</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gc</name><operator>++</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>group_code</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>group_code</name> <operator>&gt;</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GAQ gain group code out-of-range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group_code</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gaq_gain</name><index>[<expr><name>gs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ff_ac3_ungroup_3_in_5_bits_tab</name><index>[<expr><name>group_code</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gaq_gain</name><index>[<expr><name>gs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ff_ac3_ungroup_3_in_5_bits_tab</name><index>[<expr><name>group_code</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gaq_gain</name><index>[<expr><name>gs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ff_ac3_ungroup_3_in_5_bits_tab</name><index>[<expr><name>group_code</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gs</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hebap</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>ff_eac3_bits_vs_hebap</name><index>[<expr><name>hebap</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hebap</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pre_mantissa</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dith_state</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x400000</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hebap</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pre_mantissa</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name><name>ff_eac3_mantissa_vq</name><index>[<expr><name>hebap</name></expr>]</index><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>gbits</name></decl>, <decl><type ref="prev"/><name>log_gain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gaq_mode</name> <operator>!=</operator> <name>EAC3_GAQ_NO</name> <operator>&amp;&amp;</operator> <name>hebap</name> <operator>&lt;</operator> <name>end_bap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>log_gain</name> <operator>=</operator> <name><name>gaq_gain</name><index>[<expr><name>gs</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>log_gain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>gbits</name> <operator>=</operator> <name>bits</name> <operator>-</operator> <name>log_gain</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mant</name> <init>= <expr><call><name>get_sbits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>gbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_gain</name> <operator>&amp;&amp;</operator> <name>mant</name> <operator>==</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>gbits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbits</name> <init>= <expr><name>bits</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>log_gain</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>mbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>mant</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">23</literal> <operator>-</operator> <operator>(</operator><name>mbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mant</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">23</literal> <operator>-</operator> <name>log_gain</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ff_eac3_gaq_remap_2_4_b</name><index>[<expr><name>hebap</name><operator>-</operator><literal type="number">8</literal></expr>]</index><index>[<expr><name>log_gain</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mant</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>ff_eac3_gaq_remap_2_4_a</name><index>[<expr><name>hebap</name><operator>-</operator><literal type="number">8</literal></expr>]</index><index>[<expr><name>log_gain</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>mant</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mant</name> <operator>*=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_gain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mant</name> <operator>+=</operator> <operator>(</operator><name><name>ff_eac3_gaq_remap_1</name><index>[<expr><name>hebap</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>mant</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pre_mantissa</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>mant</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>idct6</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pre_mantissa</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_eac3_parse_header</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ac3_exponent_strategy</name></decl>, <decl><type ref="prev"/><name>parse_aht_info</name></decl>, <decl><type ref="prev"/><name>parse_spx_atten_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parse_transient_proc_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_cpl_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_RESERVED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reserved frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>substreamid</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3_subsbtreamid_found</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eac3_subsbtreamid_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Additional substreams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>sr_code</name></name> <operator>==</operator> <name>EAC3_SR_CODE_REDUCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Reduced sampling rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>target_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>level_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>target_level</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">6.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compression_exists</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compression_exists</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>heavy_dynamic_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AC3_HEAVY_RANGE</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>channel_layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_map</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"channel_map: %0X\n"</literal></expr></argument>, <argument><expr><name>channel_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>channel_map</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>EAC3_MAX_CHANNELS</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel_layout</name> <operator>|=</operator> <name><name>ff_eac3_custom_channel_map_locations</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>av_popcount64</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EAC3_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name> <operator>=</operator> <name>channel_map</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>preferred_downmix</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level_ltrt</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level_ltrt</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lfe_mix_level_exists</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mix_level</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_INDEPENDENT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mix_data_size</name> <init>= <expr><operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>mix_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&lt;</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;=</operator> <name>AC3_CHMODE_2F2R</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>sr_code</name></name> <operator>!=</operator> <name>EAC3_SR_CODE_REDUCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_INDEPENDENT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_AC3_CONVERT</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>addbsil</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addbsil</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ac3_exponent_strategy</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_aht_info</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ac3_exponent_strategy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_aht_info</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>snr_offset_strategy</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_transient_proc_info</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_switch_syntax</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>block_switch_syntax</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_switch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_switch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_flag_syntax</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_flag_syntax</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_flag</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_flag</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dither_flag</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_allocation_syntax</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bit_allocation_syntax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>slow_decay</name></name> <operator>=</operator> <name><name>ff_ac3_slow_decay_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>fast_decay</name></name> <operator>=</operator> <name><name>ff_ac3_fast_decay_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>slow_gain</name></name> <operator>=</operator> <name><name>ff_ac3_slow_gain_tab</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>db_per_bit</name></name> <operator>=</operator> <name><name>ff_ac3_db_per_bit_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>floor</name></name> <operator>=</operator> <name><name>ff_ac3_floor_tab</name> <index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain_syntax</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_syntax</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_syntax</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_spx_atten_data</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_cpl_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_strategy_exists</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>blk</name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_strategy_exists</name><index>[<expr><name>blk</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_cpl_blocks</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ac3_exponent_strategy</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>num_cpl_blocks</name><operator>)</operator></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frmchexpstr</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>ff_eac3_frm_expstr</name><index>[<expr><name>frmchexpstr</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_INDEPENDENT</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_aht_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name><index>[<expr><name>CPL_CH</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>num_cpl_blocks</name> <operator>!=</operator> <literal type="number">6</literal><operator>)</operator></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>use_aht</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>ch</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_strategy_exists</name><index>[<expr><name>blk</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_aht</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>use_aht</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>snr_offset_strategy</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>csnroffst</name> <init>= <expr><operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>snroffst</name> <init>= <expr><operator>(</operator><name>csnroffst</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>snr_offset</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>snroffst</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_transient_proc_info</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parse_spx_atten_data</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_atten_code</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_atten_code</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block_start_bits</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>block_start_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Block start info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_spx_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_leak</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
