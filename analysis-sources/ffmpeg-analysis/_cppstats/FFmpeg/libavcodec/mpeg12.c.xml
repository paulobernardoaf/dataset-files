<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpeg12.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHECKED_BITSTREAM_READER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_resilience.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ff_mpeg12_static_rl_table_store</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>MAX_RUN</name> <operator>+</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>table_mb_ptype</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>table_mb_btype</name><index>[<expr><literal type="number">11</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_init_2d_vlc_rl</name><parameter_list>(<parameter><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>static_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_TYPE</name></type> <name><name>table</name><index>[<expr><literal type="number">680</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name> <init>= <expr><block>{ <expr><operator>.</operator><name>table</name> <operator>=</operator> <name>table</name></expr>, <expr><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name>static_size</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>static_size</name> <operator>&lt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>, <argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><name><name>rl</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rl</name><operator>-&gt;</operator><name>table_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rl</name><operator>-&gt;</operator><name>table_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name> <operator>|</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlc</name><operator>.</operator><name>table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name><name>vlc</name><operator>.</operator><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>vlc</name><operator>.</operator><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">65</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>MAX_LEVEL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>rl</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">65</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>rl</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>run</name> <operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>table_run</name> <index>[<expr><name>code</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>table_level</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name>run</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpeg12_common_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name> <operator>=</operator> <name><name>ff_mpeg2_dc_scale_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpeg1_clean_buffers</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_mv_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_dc_lum_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_dc_chroma_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_mbincr_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_mb_ptype_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_mb_btype_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>ff_mb_pat_vlc</name></decl>;</decl_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpeg12_init_vlcs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_dc_lum_vlc</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_lum_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_lum_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_dc_chroma_vlc</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_chroma_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_chroma_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">514</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_mv_vlc</name></expr></argument>, <argument><expr><name>MV_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mpeg12_mbMotionVectorTable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mpeg12_mbMotionVectorTable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">518</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_mbincr_vlc</name></expr></argument>, <argument><expr><name>MBINCR_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mpeg12_mbAddrIncrTable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mpeg12_mbAddrIncrTable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">538</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_mb_pat_vlc</name></expr></argument>, <argument><expr><name>MB_PAT_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mpeg12_mbPatTable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mpeg12_mbPatTable</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_mb_ptype_vlc</name></expr></argument>, <argument><expr><name>MB_PTYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>table_mb_ptype</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>table_mb_ptype</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_mb_btype_vlc</name></expr></argument>, <argument><expr><name>MB_BTYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>table_mb_btype</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>table_mb_btype</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_rl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_rl_mpeg1</name></expr></argument>, <argument><expr><name><name>ff_mpeg12_static_rl_table_store</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_rl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_rl_mpeg2</name></expr></argument>, <argument><expr><name><name>ff_mpeg12_static_rl_table_store</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_2D_VLC_RL</name><argument_list>(<argument><expr><name>ff_rl_mpeg1</name></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_2D_VLC_RL</name><argument_list>(<argument><expr><name>ff_rl_mpeg2</name></expr></argument>, <argument><expr><literal type="number">674</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpeg1_find_frame_end</name><parameter_list>(<parameter><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>EXT_START_CODE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>EXT_START_CODE</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>buf</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>&gt;=</operator> <name>SLICE_MIN_START_CODE</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>&lt;=</operator> <name>SLICE_MAX_START_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>SEQ_END_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>SEQ_START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>EXT_START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name> <argument_list type="generic">&lt; <argument><expr><name>SLICE_MIN_START_CODE</name> <operator>||</operator> <name>state</name></expr></argument> &gt;</argument_list></name> <name>SLICE_MAX_START_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>PICTURE_START_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_fetch_timestamp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<return>return <expr><name>END_NOT_FOUND</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INDEX</name></cpp:macro> <cpp:value>(64 - 1)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>ff_mpeg1_decode_block_intra</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>scantable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>component</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name> <init>= <expr><operator>&amp;</operator><name>ff_rl_mpeg1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>component</name> <operator>=</operator> <ternary><condition><expr><name>index</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>index</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>decode_dc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">0xBFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>MAX_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator>

<call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>MAX_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">0xBFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>MAX_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

</unit>
