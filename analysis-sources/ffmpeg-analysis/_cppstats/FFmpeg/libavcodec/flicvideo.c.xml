<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\flicvideo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_256_COLOR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_DELTA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_COLOR</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_LC</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_BLACK</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_BRUN</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_COPY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_MINI</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_DTA_BRUN</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_DTA_COPY</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_DTA_LC</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLI_TYPE_CODE</name></cpp:macro> <cpp:value>(0xAF11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLC_FLX_TYPE_CODE</name></cpp:macro> <cpp:value>(0xAF12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLC_DTA_TYPE_CODE</name></cpp:macro> <cpp:value>(0xAF44)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLC_MAGIC_CARPET_SYNTHETIC_TYPE_CODE</name></cpp:macro> <cpp:value>(0xAF13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PIXEL_PTR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (pixel_ptr + n &gt; pixel_limit) { av_log (s-&gt;avctx, AV_LOG_ERROR, "Invalid pixel_ptr = %d &gt; pixel_limit = %d\n", pixel_ptr + n, pixel_limit); return AVERROR_INVALIDDATA; }</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>FlicDecodeContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fli_type</name></decl>;</decl_stmt> 

}</block></struct></type> <name>FlicDecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flic_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlicDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fli_header</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">904</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected extradata size %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fli_type</name></name> <operator>=</operator> <name>FLC_MAGIC_CARPET_SYNTHETIC_TYPE_CODE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">256</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">904</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fli_type</name></name> <operator>=</operator> <name>FLI_TYPE_CODE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fli_type</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fli_header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fli_header</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fli_type</name></name> <operator>==</operator> <name>FLC_FLX_TYPE_CODE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>depth</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">15</literal></expr> :</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB555</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16</literal></expr> :</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB565</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">24</literal></expr> :</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt> <break>break;</break>

<default>default :</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown FLC/FLX depth of %d Bpp is unsupported.\n"</literal></expr></argument>,<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>new_palette</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flic_decode_frame_8BPP</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlicDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>g2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>palette_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>palette_idx1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>palette_idx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_chunks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_changes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compressed_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>starting_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byte_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_countdown</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pixel_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_limit</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>buf_size</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_chunks</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>frame_size</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_ptr_after_chunk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>frame_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_ptr_after_chunk</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>chunk_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FLI_256_COLOR</name></expr>:</case>

<case>case <expr><name>FLI_COLOR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chunk_type</name> <operator>==</operator> <name>FLI_256_COLOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fli_type</name></name> <operator>!=</operator> <name>FLC_MAGIC_CARPET_SYNTHETIC_TYPE_CODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>color_shift</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>color_packets</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>palette_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>color_packets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>palette_ptr</name> <operator>+=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color_changes</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_changes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color_changes</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>color_changes</name> <operator>*</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>color_changes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>palette_ptr</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>palette_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>color_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>color_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>color_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_shift</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>entry</name> <operator>|=</operator> <name>entry</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">0x30303</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>palette_ptr</name></expr>]</index></name> <operator>!=</operator> <name>entry</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>new_palette</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>palette_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>FLI_DELTA</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_lines</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>compressed_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_ptr</name> <operator>&gt;</operator> <name>pixel_limit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>line_packets</name> <operator>&amp;</operator> <literal type="number">0xC000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <operator>-</operator><name>line_packets</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_packets</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name>line_packets</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>line_packets</name> <operator>&amp;</operator> <literal type="number">0xC000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x4000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Undefined opcode (%x) in DELTA_FLI\n"</literal></expr></argument>, <argument><expr><name>line_packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>line_packets</name> <operator>&amp;</operator> <literal type="number">0xC000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name><operator>=</operator> <name>y_ptr</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name> <operator>=</operator> <name>line_packets</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>compressed_lines</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_packets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixel_skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <name>pixel_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>-=</operator> <name>pixel_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>palette_idx2</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byte_run</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>FLI_LC</name></expr>:</case>

<expr_stmt><expr><name>starting_line</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>starting_line</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name>starting_line</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_lines</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>compressed_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_packets</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_packets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixel_skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <name>pixel_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>-=</operator> <name>pixel_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>byte_run</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_lines</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>FLI_BLACK</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_BRUN</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lines</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>lines</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byte_run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid byte run value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>FLI_COPY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>!=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

<literal type="string">"has incorrect size, skipping chunk\n"</literal></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y_ptr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition>

<incr><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>y_ptr</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>FLI_MINI</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>stream_ptr_after_chunk</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>stream_ptr_after_chunk</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>-=</operator> <name>chunk_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Processed FLI chunk where chunk size = %d "</literal> \

<literal type="string">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>,

<argument><expr><name>buf_size</name> <operator>-</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>new_palette</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>new_palette</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flic_decode_frame_15_16BPP</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlicDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>g2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>palette_idx1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_chunks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compressed_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byte_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_countdown</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pixel_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_limit</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_chunks</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>frame_size</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_ptr_after_chunk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>frame_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_ptr_after_chunk</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>chunk_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FLI_256_COLOR</name></expr>:</case>

<case>case <expr><name>FLI_COLOR</name></expr>:</case>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"Unexpected Palette chunk %d in non-palettized FLC\n"</literal></expr></argument>,

<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_DELTA</name></expr>:</case>

<case>case <expr><name>FLI_DTA_LC</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_lines</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>compressed_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_ptr</name> <operator>&gt;</operator> <name>pixel_limit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_packets</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <operator>-</operator><name>line_packets</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_packets</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name>line_packets</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>compressed_lines</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_packets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixel_skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <operator>(</operator><name>pixel_skip</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>pixel_countdown</name> <operator>-=</operator> <name>pixel_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>FLI_LC</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected FLI_LC chunk in non-palettized FLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_BLACK</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_BRUN</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lines</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>lines</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d) (linea%d)\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>FLI_DTA_BRUN</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lines</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>lines</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>FLI_COPY</name></expr>:</case>

<case>case <expr><name>FLI_DTA_COPY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

<literal type="string">"bigger than image, skipping chunk\n"</literal></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y_ptr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition>

<incr><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>y_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>FLI_MINI</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>stream_ptr_after_chunk</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>stream_ptr_after_chunk</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>-=</operator> <name>chunk_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Processed FLI chunk where chunk size = %d "</literal> \

<literal type="string">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flic_decode_frame_24BPP</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlicDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>g2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>palette_idx1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_chunks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compressed_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byte_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_countdown</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pixel_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_limit</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_chunks</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>frame_size</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_ptr_after_chunk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>frame_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_ptr_after_chunk</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>chunk_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FLI_256_COLOR</name></expr>:</case>

<case>case <expr><name>FLI_COLOR</name></expr>:</case>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"Unexpected Palette chunk %d in non-palettized FLC\n"</literal></expr></argument>,

<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_DELTA</name></expr>:</case>

<case>case <expr><name>FLI_DTA_LC</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_lines</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>compressed_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_ptr</name> <operator>&gt;</operator> <name>pixel_limit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_packets</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_packets</name> <operator>=</operator> <operator>-</operator><name>line_packets</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_packets</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name>line_packets</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>compressed_lines</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_packets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixel_skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <operator>(</operator><name>pixel_skip</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>pixel_countdown</name> <operator>-=</operator> <name>pixel_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name> <operator>-=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WL24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixel_countdown</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pixels</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>FLI_LC</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected FLI_LC chunk in non-palettized FLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_BLACK</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FLI_BRUN</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lines</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>lines</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d) (linea%d)\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>palette_idx1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>palette_idx1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>FLI_DTA_BRUN</name></expr>:</case>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lines</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>lines</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>y_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>pixel_countdown</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_run</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WL24</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <name>pixel_ptr</name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>byte_run</name> <operator>=</operator> <operator>-</operator><name>byte_run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>byte_run</name> <operator>&gt;</operator> <name>stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_PIXEL_PTR</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>byte_run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL24</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <name>pixel_ptr</name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_countdown</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_countdown</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

<argument><expr><name>pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>FLI_COPY</name></expr>:</case>

<case>case <expr><name>FLI_DTA_COPY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

<literal type="string">"bigger than image, skipping chunk\n"</literal></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y_ptr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition>

<incr><expr><name>y_ptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>y_ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>FLI_MINI</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>stream_ptr_after_chunk</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><name>stream_ptr_after_chunk</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>-=</operator> <name>chunk_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Processed FLI chunk where chunk size = %d "</literal> \

<literal type="string">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flic_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>flic_decode_frame_8BPP</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB555</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB565</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>flic_decode_frame_15_16BPP</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>flic_decode_frame_24BPP</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown FLC format, my science cannot explain how this happened.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flic_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlicDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_flic_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"flic"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Autodesk Animator Flic video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FLIC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FlicDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>flic_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>flic_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>flic_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
