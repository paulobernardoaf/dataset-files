<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cos_tablegen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOATFMT</name></cpp:macro> <cpp:value>"%.18e"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXEDFMT</name></cpp:macro> <cpp:value>"%6d"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clip_f15</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>v</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">32767</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">32767</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>v</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr> ?</condition><then> <expr><literal type="number">32767</literal></expr> </then><else>:

<expr><name>v</name></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printval</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fixed</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>new_val</name> <init>= <expr><name>val</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_val</name> <operator>=</operator> <ternary><condition><expr><name>new_val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>new_val</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>new_val</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal><name>FIXEDFMT</name><literal type="string">","</literal></expr></argument>, <argument><expr><call><name>clip_f15</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>new_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal><name>FLOATFMT</name><literal type="string">","</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_sin</name> <init>= <expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"sin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fixed</name> <init>= <expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"fixed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>do_sin</name></expr> ?</condition><then> <expr><name>sin</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>cos</name></expr></init>;</function_decl>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* This file was automatically generated. */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#define FFT_FLOAT %d\n"</literal></expr></argument>, <argument><expr><operator>!</operator><name>fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#include \"libavcodec/%s\"\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>do_sin</name></expr> ?</condition><then> <expr><literal type="string">"rdft.h"</literal></expr> </then><else>: <expr><literal type="string">"fft.h"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BITS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>freq</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>/</operator><name>m</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%i) = {\n "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>do_sin</name></expr> ?</condition><then> <expr><literal type="string">"SINTABLE"</literal></expr> </then><else>: <expr><literal type="string">"COSTABLE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><name>j</name> <operator>&gt;</operator> <name>m</name><operator>/</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><name>m</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>j</name></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>do_sin</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <name>m</name><operator>/</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>m</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printval</name><argument_list>(<argument><expr><call><name>func</name><argument_list>(<argument><expr><name>idx</name><operator>*</operator><name>freq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printval</name><argument_list>(<argument><expr><call><name>func</name><argument_list>(<argument><expr><ternary><condition><expr><name>do_sin</name></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>m</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>freq</name></expr> </then><else>: <expr><name>freq</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
