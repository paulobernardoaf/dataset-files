<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\celp_filters_mips.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/celp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_celp_lp_synthesis_filterf_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer_length</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>old_out0</name></decl>, <decl><type ref="prev"/><name>old_out1</name></decl>, <decl><type ref="prev"/><name>old_out2</name></decl>, <decl><type ref="prev"/><name>old_out3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_filter_coeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out0</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out1</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out2</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out3</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>buffer_length</name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p_filter_coeffs</name> <operator>=</operator> <name>filter_coeffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lwc1 $f2, 8(%[filter_coeffs]) \n\t"

"lwc1 $f1, 4(%[filter_coeffs]) \n\t"

"lwc1 $f0, 0(%[filter_coeffs]) \n\t"

"nmsub.s %[out0], %[out0], $f2, %[old_out1] \n\t"

"nmsub.s %[out1], %[out1], $f2, %[old_out2] \n\t"

"nmsub.s %[out2], %[out2], $f2, %[old_out3] \n\t"

"lwc1 $f3, 12(%[filter_coeffs]) \n\t"

"nmsub.s %[out0], %[out0], $f1, %[old_out2] \n\t"

"nmsub.s %[out1], %[out1], $f1, %[old_out3] \n\t"

"nmsub.s %[out2], %[out2], $f3, %[old_out2] \n\t"

"nmsub.s %[out0], %[out0], $f0, %[old_out3] \n\t"

"nmsub.s %[out3], %[out3], $f3, %[old_out3] \n\t"

"nmsub.s %[out1], %[out1], $f3, %[old_out1] \n\t"

"nmsub.s %[out0], %[out0], $f3, %[old_out0] \n\t"

: [out0]"+f"(out0), [out1]"+f"(out1),

[out2]"+f"(out2), [out3]"+f"(out3)

: [old_out0]"f"(old_out0), [old_out1]"f"(old_out1),

[old_out2]"f"(old_out2), [old_out3]"f"(old_out3),

[filter_coeffs]"r"(filter_coeffs)

: "$f0", "$f1", "$f2", "$f3", "$f4", "memory"

);</asm>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>filter_length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"lwc1 %[old_out3], -20(%[p_out]) \n\t"

"lwc1 $f5, 16(%[p_filter_coeffs]) \n\t"

PTR_ADDIU "%[p_out], -8 \n\t"

PTR_ADDIU "%[p_filter_coeffs], 8 \n\t"

"nmsub.s %[out1], %[out1], $f5, %[old_out0] \n\t"

"nmsub.s %[out3], %[out3], $f5, %[old_out2] \n\t"

"lwc1 $f4, 12(%[p_filter_coeffs]) \n\t"

"lwc1 %[old_out2], -16(%[p_out]) \n\t"

"nmsub.s %[out0], %[out0], $f5, %[old_out3] \n\t"

"nmsub.s %[out2], %[out2], $f5, %[old_out1] \n\t"

"nmsub.s %[out1], %[out1], $f4, %[old_out3] \n\t"

"nmsub.s %[out3], %[out3], $f4, %[old_out1] \n\t"

"mov.s %[old_out1], %[old_out3] \n\t"

"nmsub.s %[out0], %[out0], $f4, %[old_out2] \n\t"

"nmsub.s %[out2], %[out2], $f4, %[old_out0] \n\t"

: [out0]"+f"(out0), [out1]"+f"(out1),

[out2]"+f"(out2), [out3]"+f"(out3), [old_out0]"+f"(old_out0),

[old_out1]"+f"(old_out1), [old_out2]"+f"(old_out2),

[old_out3]"+f"(old_out3),[p_filter_coeffs]"+r"(p_filter_coeffs),

[p_out]"+r"(p_out)

:

: "$f4", "$f5", "memory"

);</asm>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>old_out0</name></expr></argument>, <argument><expr><name>old_out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<asm>__asm__ <specifier>volatile</specifier>(

"nmsub.s %[out3], %[out3], %[a], %[out2] \n\t"

"nmsub.s %[out2], %[out2], %[a], %[out1] \n\t"

"nmsub.s %[out3], %[out3], %[b], %[out1] \n\t"

"nmsub.s %[out1], %[out1], %[a], %[out0] \n\t"

"nmsub.s %[out2], %[out2], %[b], %[out0] \n\t"

"nmsub.s %[out3], %[out3], %[c], %[out0] \n\t"

: [out0]"+f"(out0), [out1]"+f"(out1),

[out2]"+f"(out2), [out3]"+f"(out3)

: [a]"f"(a), [b]"f"(b), [c]"f"(c)

);</asm>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>out0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>out1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>out2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out0</name> <operator>=</operator> <name>out0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out1</name> <operator>=</operator> <name>out1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out2</name> <operator>=</operator> <name>out2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out3</name> <operator>=</operator> <name>out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>buffer_length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>out_val</name></decl>, <decl><type ref="prev"/><name>out_val_i</name></decl>, <decl><type ref="prev"/><name>fc_val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_filter_coeffs</name> <operator>=</operator> <name>filter_coeffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_val</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>filter_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"lwc1 %[fc_val], 0(%[p_filter_coeffs]) \n\t"

"lwc1 %[out_val_i], -4(%[p_out]) \n\t"

PTR_ADDIU "%[p_filter_coeffs], 4 \n\t"

PTR_ADDIU "%[p_out], -4 \n\t"

"nmsub.s %[out_val], %[out_val], %[fc_val], %[out_val_i] \n\t"

: [fc_val]"=&amp;f"(fc_val), [out_val]"+f"(out_val),

[out_val_i]"=&amp;f"(out_val_i), [p_out]"+r"(p_out),

[p_filter_coeffs]"+r"(p_filter_coeffs)

:

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>out_val</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_celp_lp_zero_synthesis_filterf_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer_length</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum_out8</name></decl>, <decl><type ref="prev"/><name>sum_out7</name></decl>, <decl><type ref="prev"/><name>sum_out6</name></decl>, <decl><type ref="prev"/><name>sum_out5</name></decl>, <decl><type ref="prev"/><name>sum_out4</name></decl>, <decl><type ref="prev"/><name>fc_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum_out3</name></decl>, <decl><type ref="prev"/><name>sum_out2</name></decl>, <decl><type ref="prev"/><name>sum_out1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_filter_coeffs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>buffer_length</name></expr>;</condition> <incr><expr><name>n</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>&amp;</operator><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_filter_coeffs</name> <operator>=</operator> <name>filter_coeffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out8</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out7</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out6</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out5</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out4</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out3</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out2</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_out1</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>filter_length</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"filt_lp_inner%=: \n\t"

"lwc1 %[fc_val], 0(%[p_filter_coeffs]) \n\t"

"lwc1 $f7, 6*4(%[p_in]) \n\t"

"lwc1 $f6, 5*4(%[p_in]) \n\t"

"lwc1 $f5, 4*4(%[p_in]) \n\t"

"lwc1 $f4, 3*4(%[p_in]) \n\t"

"lwc1 $f3, 2*4(%[p_in]) \n\t"

"lwc1 $f2, 4(%[p_in]) \n\t"

"lwc1 $f1, 0(%[p_in]) \n\t"

"lwc1 $f0, -4(%[p_in]) \n\t"

"addiu %[i], -2 \n\t"

"madd.s %[sum_out8], %[sum_out8], %[fc_val], $f7 \n\t"

"madd.s %[sum_out7], %[sum_out7], %[fc_val], $f6 \n\t"

"madd.s %[sum_out6], %[sum_out6], %[fc_val], $f5 \n\t"

"madd.s %[sum_out5], %[sum_out5], %[fc_val], $f4 \n\t"

"madd.s %[sum_out4], %[sum_out4], %[fc_val], $f3 \n\t"

"madd.s %[sum_out3], %[sum_out3], %[fc_val], $f2 \n\t"

"madd.s %[sum_out2], %[sum_out2], %[fc_val], $f1 \n\t"

"madd.s %[sum_out1], %[sum_out1], %[fc_val], $f0 \n\t"

"lwc1 %[fc_val], 4(%[p_filter_coeffs]) \n\t"

"lwc1 $f7, -8(%[p_in]) \n\t"

PTR_ADDIU "%[p_filter_coeffs], 8 \n\t"

PTR_ADDIU "%[p_in], -8 \n\t"

"madd.s %[sum_out8], %[sum_out8], %[fc_val], $f6 \n\t"

"madd.s %[sum_out7], %[sum_out7], %[fc_val], $f5 \n\t"

"madd.s %[sum_out6], %[sum_out6], %[fc_val], $f4 \n\t"

"madd.s %[sum_out5], %[sum_out5], %[fc_val], $f3 \n\t"

"madd.s %[sum_out4], %[sum_out4], %[fc_val], $f2 \n\t"

"madd.s %[sum_out3], %[sum_out3], %[fc_val], $f1 \n\t"

"madd.s %[sum_out2], %[sum_out2], %[fc_val], $f0 \n\t"

"madd.s %[sum_out1], %[sum_out1], %[fc_val], $f7 \n\t"

"bgtz %[i], filt_lp_inner%= \n\t"

: [sum_out8]"+f"(sum_out8), [sum_out7]"+f"(sum_out7),

[sum_out6]"+f"(sum_out6), [sum_out5]"+f"(sum_out5),

[sum_out4]"+f"(sum_out4), [sum_out3]"+f"(sum_out3),

[sum_out2]"+f"(sum_out2), [sum_out1]"+f"(sum_out1),

[fc_val]"=&amp;f"(fc_val), [p_filter_coeffs]"+r"(p_filter_coeffs),

[p_in]"+r"(p_in), [i]"+r"(i)

:

: "$f0", "$f1", "$f2", "$f3", "$f4", "$f5", "$f6", "$f7", "memory"

);</asm>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>sum_out8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>sum_out7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>sum_out6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>sum_out5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>sum_out4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sum_out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum_out2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>sum_out1</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_celp_filter_init_mips</name><parameter_list>(<parameter><decl><type><name>CELPFContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>celp_lp_synthesis_filterf</name></name> <operator>=</operator> <name>ff_celp_lp_synthesis_filterf_mips</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>celp_lp_zero_synthesis_filterf</name></name> <operator>=</operator> <name>ff_celp_lp_zero_synthesis_filterf_mips</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
