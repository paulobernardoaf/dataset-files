<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\acelp_filters_mips.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/acelp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_acelp_interpolatef_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>frac_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prec</name> <init>= <expr><name>precision</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fc_offset</name> <init>= <expr><name>precision</name> <operator>-</operator> <name>frac_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in_val_p</name></decl>, <decl><type ref="prev"/><name>in_val_m</name></decl>, <decl><type ref="prev"/><name>fc_val_p</name></decl>, <decl><type ref="prev"/><name>fc_val_m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_in_p</name> <init>= <expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_in_m</name> <init>= <expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_filter_coeffs_p</name> <init>= <expr><operator>&amp;</operator><name><name>filter_coeffs</name><index>[<expr><name>frac_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_filter_coeffs_m</name> <init>= <expr><name>filter_coeffs</name> <operator>+</operator> <name>fc_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_length</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> (

"lwc1 %[in_val_p], 0(%[p_in_p]) \n\t"

"lwc1 %[fc_val_p], 0(%[p_filter_coeffs_p]) \n\t"

"lwc1 %[in_val_m], 0(%[p_in_m]) \n\t"

"lwc1 %[fc_val_m], 0(%[p_filter_coeffs_m]) \n\t"

PTR_ADDIU "%[p_in_p], %[p_in_p], 4 \n\t"

"madd.s %[v],%[v], %[in_val_p],%[fc_val_p] \n\t"

PTR_ADDIU "%[p_in_m], %[p_in_m], -4 \n\t"

PTR_ADDU "%[p_filter_coeffs_p],%[p_filter_coeffs_p], %[prec] \n\t"

PTR_ADDU "%[p_filter_coeffs_m],%[p_filter_coeffs_m], %[prec] \n\t"

"madd.s %[v],%[v],%[in_val_m], %[fc_val_m] \n\t"

: [v] "+&amp;f" (v),[p_in_p] "+r" (p_in_p), [p_in_m] "+r" (p_in_m),

[p_filter_coeffs_p] "+r" (p_filter_coeffs_p),

[in_val_p] "=&amp;f" (in_val_p), [in_val_m] "=&amp;f" (in_val_m),

[fc_val_p] "=&amp;f" (fc_val_p), [fc_val_m] "=&amp;f" (fc_val_m),

[p_filter_coeffs_m] "+r" (p_filter_coeffs_m)

: [prec] "r" (prec)

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_acelp_apply_order_2_transfer_function_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>zero_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>pole_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> (

"lwc1 $f0, 0(%[mem]) \n\t"

"blez %[n], ff_acelp_apply_order_2_transfer_function_end%= \n\t"

"lwc1 $f1, 4(%[mem]) \n\t"

"lwc1 $f2, 0(%[pole_coeffs]) \n\t"

"lwc1 $f3, 4(%[pole_coeffs]) \n\t"

"lwc1 $f4, 0(%[zero_coeffs]) \n\t"

"lwc1 $f5, 4(%[zero_coeffs]) \n\t"

"ff_acelp_apply_order_2_transfer_function_madd%=: \n\t"

"lwc1 $f6, 0(%[in]) \n\t"

"mul.s $f9, $f3, $f1 \n\t"

"mul.s $f7, $f2, $f0 \n\t"

"msub.s $f7, $f7, %[gain], $f6 \n\t"

"sub.s $f7, $f7, $f9 \n\t"

"madd.s $f8, $f7, $f4, $f0 \n\t"

"madd.s $f8, $f8, $f5, $f1 \n\t"

"lwc1 $f11, 4(%[in]) \n\t"

"mul.s $f12, $f3, $f0 \n\t"

"mul.s $f13, $f2, $f7 \n\t"

"msub.s $f13, $f13, %[gain], $f11 \n\t"

"sub.s $f13, $f13, $f12 \n\t"

"madd.s $f14, $f13, $f4, $f7 \n\t"

"madd.s $f14, $f14, $f5, $f0 \n\t"

"swc1 $f8, 0(%[out]) \n\t"

"lwc1 $f6, 8(%[in]) \n\t"

"mul.s $f9, $f3, $f7 \n\t"

"mul.s $f15, $f2, $f13 \n\t"

"msub.s $f15, $f15, %[gain], $f6 \n\t"

"sub.s $f15, $f15, $f9 \n\t"

"madd.s $f8, $f15, $f4, $f13 \n\t"

"madd.s $f8, $f8, $f5, $f7 \n\t"

"swc1 $f14, 4(%[out]) \n\t"

"lwc1 $f11, 12(%[in]) \n\t"

"mul.s $f12, $f3, $f13 \n\t"

"mul.s $f16, $f2, $f15 \n\t"

"msub.s $f16, $f16, %[gain], $f11 \n\t"

"sub.s $f16, $f16, $f12 \n\t"

"madd.s $f14, $f16, $f4, $f15 \n\t"

"madd.s $f14, $f14, $f5, $f13 \n\t"

"swc1 $f8, 8(%[out]) \n\t"

"lwc1 $f6, 16(%[in]) \n\t"

"mul.s $f9, $f3, $f15 \n\t"

"mul.s $f7, $f2, $f16 \n\t"

"msub.s $f7, $f7, %[gain], $f6 \n\t"

"sub.s $f7, $f7, $f9 \n\t"

"madd.s $f8, $f7, $f4, $f16 \n\t"

"madd.s $f8, $f8, $f5, $f15 \n\t"

"swc1 $f14, 12(%[out]) \n\t"

"lwc1 $f11, 20(%[in]) \n\t"

"mul.s $f12, $f3, $f16 \n\t"

"mul.s $f13, $f2, $f7 \n\t"

"msub.s $f13, $f13, %[gain], $f11 \n\t"

"sub.s $f13, $f13, $f12 \n\t"

"madd.s $f14, $f13, $f4, $f7 \n\t"

"madd.s $f14, $f14, $f5, $f16 \n\t"

"swc1 $f8, 16(%[out]) \n\t"

"lwc1 $f6, 24(%[in]) \n\t"

"mul.s $f9, $f3, $f7 \n\t"

"mul.s $f15, $f2, $f13 \n\t"

"msub.s $f15, $f15, %[gain], $f6 \n\t"

"sub.s $f1, $f15, $f9 \n\t"

"madd.s $f8, $f1, $f4, $f13 \n\t"

"madd.s $f8, $f8, $f5, $f7 \n\t"

"swc1 $f14, 20(%[out]) \n\t"

"lwc1 $f11, 28(%[in]) \n\t"

"mul.s $f12, $f3, $f13 \n\t"

"mul.s $f16, $f2, $f1 \n\t"

"msub.s $f16, $f16, %[gain], $f11 \n\t"

"sub.s $f0, $f16, $f12 \n\t"

"madd.s $f14, $f0, $f4, $f1 \n\t"

"madd.s $f14, $f14, $f5, $f13 \n\t"

"swc1 $f8, 24(%[out]) \n\t"

PTR_ADDIU "%[out], 32 \n\t"

PTR_ADDIU "%[in], 32 \n\t"

"addiu %[n], -8 \n\t"

"swc1 $f14, -4(%[out]) \n\t"

"bnez %[n], ff_acelp_apply_order_2_transfer_function_madd%= \n\t"

"swc1 $f1, 4(%[mem]) \n\t"

"swc1 $f0, 0(%[mem]) \n\t"

"ff_acelp_apply_order_2_transfer_function_end%=: \n\t"

: [out] "+r" (out),

[in] "+r" (in), [gain] "+f" (gain),

[n] "+r" (n), [mem] "+r" (mem)

: [zero_coeffs] "r" (zero_coeffs),

[pole_coeffs] "r" (pole_coeffs)

: "$f0", "$f1", "$f2", "$f3", "$f4", "$f5",

"$f6", "$f7", "$f8", "$f9", "$f10", "$f11",

"$f12", "$f13", "$f14", "$f15", "$f16", "memory"

);</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_acelp_filter_init_mips</name><parameter_list>(<parameter><decl><type><name>ACELPFContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acelp_interpolatef</name></name> <operator>=</operator> <name>ff_acelp_interpolatef_mips</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acelp_apply_order_2_transfer_function</name></name> <operator>=</operator> <name>ff_acelp_apply_order_2_transfer_function_mips</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
