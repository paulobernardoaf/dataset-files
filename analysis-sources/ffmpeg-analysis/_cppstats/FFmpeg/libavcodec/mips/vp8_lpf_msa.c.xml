<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\vp8_lpf_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp8dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8dsp_mips.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_SIMPLE_MASK</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>q0</name></type></parameter>, <parameter><type><name>q1</name></type></parameter>, <parameter><type><name>b_limit</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16u8 p1_a_sub_q1, p0_a_sub_q0; p0_a_sub_q0 = __msa_asub_u_b(p0, q0); p1_a_sub_q1 = __msa_asub_u_b(p1, q1); p1_a_sub_q1 = (v16u8) __msa_srli_b((v16i8) p1_a_sub_q1, 1); p0_a_sub_q0 = __msa_adds_u_b(p0_a_sub_q0, p0_a_sub_q0); mask = __msa_adds_u_b(p0_a_sub_q0, p1_a_sub_q1); mask = ((v16u8) mask &lt;= b_limit); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_LPF_FILTER4_4W</name><parameter_list>(<parameter><type><name>p1_in_out</name></type></parameter>, <parameter><type><name>p0_in_out</name></type></parameter>, <parameter><type><name>q0_in_out</name></type></parameter>, <parameter><type><name>q1_in_out</name></type></parameter>, <parameter><type><name>mask_in</name></type></parameter>, <parameter><type><name>hev_in</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16i8 p1_m, p0_m, q0_m, q1_m, q0_sub_p0, filt_sign; v16i8 filt, filt1, filt2, cnst4b, cnst3b; v8i16 q0_sub_p0_r, q0_sub_p0_l, filt_l, filt_r, cnst3h; p1_m = (v16i8) __msa_xori_b(p1_in_out, 0x80); p0_m = (v16i8) __msa_xori_b(p0_in_out, 0x80); q0_m = (v16i8) __msa_xori_b(q0_in_out, 0x80); q1_m = (v16i8) __msa_xori_b(q1_in_out, 0x80); filt = __msa_subs_s_b(p1_m, q1_m); filt = filt &amp; (v16i8) hev_in; q0_sub_p0 = q0_m - p0_m; filt_sign = __msa_clti_s_b(filt, 0); cnst3h = __msa_ldi_h(3); q0_sub_p0_r = (v8i16) __msa_ilvr_b(q0_sub_p0, q0_sub_p0); q0_sub_p0_r = __msa_dotp_s_h((v16i8) q0_sub_p0_r, (v16i8) cnst3h); filt_r = (v8i16) __msa_ilvr_b(filt_sign, filt); filt_r += q0_sub_p0_r; filt_r = __msa_sat_s_h(filt_r, 7); q0_sub_p0_l = (v8i16) __msa_ilvl_b(q0_sub_p0, q0_sub_p0); q0_sub_p0_l = __msa_dotp_s_h((v16i8) q0_sub_p0_l, (v16i8) cnst3h); filt_l = (v8i16) __msa_ilvl_b(filt_sign, filt); filt_l += q0_sub_p0_l; filt_l = __msa_sat_s_h(filt_l, 7); filt = __msa_pckev_b((v16i8) filt_l, (v16i8) filt_r); filt = filt &amp; (v16i8) mask_in; cnst4b = __msa_ldi_b(4); filt1 = __msa_adds_s_b(filt, cnst4b); filt1 &gt;&gt;= 3; cnst3b = __msa_ldi_b(3); filt2 = __msa_adds_s_b(filt, cnst3b); filt2 &gt;&gt;= 3; q0_m = __msa_subs_s_b(q0_m, filt1); q0_in_out = __msa_xori_b((v16u8) q0_m, 0x80); p0_m = __msa_adds_s_b(p0_m, filt2); p0_in_out = __msa_xori_b((v16u8) p0_m, 0x80); filt = __msa_srari_b(filt1, 1); hev_in = __msa_xori_b((v16u8) hev_in, 0xff); filt = filt &amp; (v16i8) hev_in; q1_m = __msa_subs_s_b(q1_m, filt); q1_in_out = __msa_xori_b((v16u8) q1_m, 0x80); p1_m = __msa_adds_s_b(p1_m, filt); p1_in_out = __msa_xori_b((v16u8) p1_m, 0x80); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_SIMPLE_FILT</name><parameter_list>(<parameter><type><name>p1_in</name></type></parameter>, <parameter><type><name>p0_in</name></type></parameter>, <parameter><type><name>q0_in</name></type></parameter>, <parameter><type><name>q1_in</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16i8 p1_m, p0_m, q0_m, q1_m, q0_sub_p0, q0_sub_p0_sign; v16i8 filt, filt1, filt2, cnst4b, cnst3b, filt_sign; v8i16 q0_sub_p0_r, q0_sub_p0_l, filt_l, filt_r, cnst3h; p1_m = (v16i8) __msa_xori_b(p1_in, 0x80); p0_m = (v16i8) __msa_xori_b(p0_in, 0x80); q0_m = (v16i8) __msa_xori_b(q0_in, 0x80); q1_m = (v16i8) __msa_xori_b(q1_in, 0x80); filt = __msa_subs_s_b(p1_m, q1_m); q0_sub_p0 = q0_m - p0_m; filt_sign = __msa_clti_s_b(filt, 0); cnst3h = __msa_ldi_h(3); q0_sub_p0_sign = __msa_clti_s_b(q0_sub_p0, 0); q0_sub_p0_r = (v8i16) __msa_ilvr_b(q0_sub_p0_sign, q0_sub_p0); q0_sub_p0_r *= cnst3h; filt_r = (v8i16) __msa_ilvr_b(filt_sign, filt); filt_r += q0_sub_p0_r; filt_r = __msa_sat_s_h(filt_r, 7); q0_sub_p0_l = (v8i16) __msa_ilvl_b(q0_sub_p0_sign, q0_sub_p0); q0_sub_p0_l *= cnst3h; filt_l = (v8i16) __msa_ilvl_b(filt_sign, filt); filt_l += q0_sub_p0_l; filt_l = __msa_sat_s_h(filt_l, 7); filt = __msa_pckev_b((v16i8) filt_l, (v16i8) filt_r); filt = filt &amp; (v16i8) (mask); cnst4b = __msa_ldi_b(4); filt1 = __msa_adds_s_b(filt, cnst4b); filt1 &gt;&gt;= 3; cnst3b = __msa_ldi_b(3); filt2 = __msa_adds_s_b(filt, cnst3b); filt2 &gt;&gt;= 3; q0_m = __msa_subs_s_b(q0_m, filt1); p0_m = __msa_adds_s_b(p0_m, filt2); q0_in = __msa_xori_b((v16u8) q0_m, 0x80); p0_in = __msa_xori_b((v16u8) p0_m, 0x80); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_MBFILTER</name><parameter_list>(<parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>q0</name></type></parameter>, <parameter><type><name>q1</name></type></parameter>, <parameter><type><name>q2</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>hev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16i8 p2_m, p1_m, p0_m, q2_m, q1_m, q0_m; v16i8 filt, q0_sub_p0, cnst4b, cnst3b; v16i8 u, filt1, filt2, filt_sign, q0_sub_p0_sign; v8i16 q0_sub_p0_r, q0_sub_p0_l, filt_r, u_r, u_l, filt_l; v8i16 cnst3h, cnst27h, cnst18h, cnst63h; cnst3h = __msa_ldi_h(3); p2_m = (v16i8) __msa_xori_b(p2, 0x80); p1_m = (v16i8) __msa_xori_b(p1, 0x80); p0_m = (v16i8) __msa_xori_b(p0, 0x80); q0_m = (v16i8) __msa_xori_b(q0, 0x80); q1_m = (v16i8) __msa_xori_b(q1, 0x80); q2_m = (v16i8) __msa_xori_b(q2, 0x80); filt = __msa_subs_s_b(p1_m, q1_m); q0_sub_p0 = q0_m - p0_m; q0_sub_p0_sign = __msa_clti_s_b(q0_sub_p0, 0); filt_sign = __msa_clti_s_b(filt, 0); q0_sub_p0_r = (v8i16) __msa_ilvr_b(q0_sub_p0_sign, q0_sub_p0); q0_sub_p0_r *= cnst3h; filt_r = (v8i16) __msa_ilvr_b(filt_sign, filt); filt_r = filt_r + q0_sub_p0_r; filt_r = __msa_sat_s_h(filt_r, 7); q0_sub_p0_l = (v8i16) __msa_ilvl_b(q0_sub_p0_sign, q0_sub_p0); q0_sub_p0_l *= cnst3h; filt_l = (v8i16) __msa_ilvl_b(filt_sign, filt); filt_l = filt_l + q0_sub_p0_l; filt_l = __msa_sat_s_h(filt_l, 7); filt = __msa_pckev_b((v16i8) filt_l, (v16i8) filt_r); filt = filt &amp; (v16i8) mask; filt2 = filt &amp; (v16i8) hev; hev = __msa_xori_b(hev, 0xff); filt = filt &amp; (v16i8) hev; cnst4b = __msa_ldi_b(4); filt1 = __msa_adds_s_b(filt2, cnst4b); filt1 &gt;&gt;= 3; cnst3b = __msa_ldi_b(3); filt2 = __msa_adds_s_b(filt2, cnst3b); filt2 &gt;&gt;= 3; q0_m = __msa_subs_s_b(q0_m, filt1); p0_m = __msa_adds_s_b(p0_m, filt2); filt_sign = __msa_clti_s_b(filt, 0); ILVRL_B2_SH(filt_sign, filt, filt_r, filt_l); cnst27h = __msa_ldi_h(27); cnst63h = __msa_ldi_h(63); u_r = filt_r * cnst27h; u_r += cnst63h; u_r &gt;&gt;= 7; u_r = __msa_sat_s_h(u_r, 7); u_l = filt_l * cnst27h; u_l += cnst63h; u_l &gt;&gt;= 7; u_l = __msa_sat_s_h(u_l, 7); u = __msa_pckev_b((v16i8) u_l, (v16i8) u_r); q0_m = __msa_subs_s_b(q0_m, u); q0 = __msa_xori_b((v16u8) q0_m, 0x80); p0_m = __msa_adds_s_b(p0_m, u); p0 = __msa_xori_b((v16u8) p0_m, 0x80); cnst18h = __msa_ldi_h(18); u_r = filt_r * cnst18h; u_r += cnst63h; u_r &gt;&gt;= 7; u_r = __msa_sat_s_h(u_r, 7); u_l = filt_l * cnst18h; u_l += cnst63h; u_l &gt;&gt;= 7; u_l = __msa_sat_s_h(u_l, 7); u = __msa_pckev_b((v16i8) u_l, (v16i8) u_r); q1_m = __msa_subs_s_b(q1_m, u); q1 = __msa_xori_b((v16u8) q1_m, 0x80); p1_m = __msa_adds_s_b(p1_m, u); p1 = __msa_xori_b((v16u8) p1_m, 0x80); u_r = filt_r &lt;&lt; 3; u_r += filt_r + cnst63h; u_r &gt;&gt;= 7; u_r = __msa_sat_s_h(u_r, 7); u_l = filt_l &lt;&lt; 3; u_l += filt_l + cnst63h; u_l &gt;&gt;= 7; u_l = __msa_sat_s_h(u_l, 7); u = __msa_pckev_b((v16i8) u_l, (v16i8) u_r); q2_m = __msa_subs_s_b(q2_m, u); q2 = __msa_xori_b((v16u8) q2_m, 0x80); p2_m = __msa_adds_s_b(p2_m, u); p2 = __msa_xori_b((v16u8) p2_m, 0x80); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPF_MASK_HEV</name><parameter_list>(<parameter><type><name>p3_in</name></type></parameter>, <parameter><type><name>p2_in</name></type></parameter>, <parameter><type><name>p1_in</name></type></parameter>, <parameter><type><name>p0_in</name></type></parameter>, <parameter><type><name>q0_in</name></type></parameter>, <parameter><type><name>q1_in</name></type></parameter>, <parameter><type><name>q2_in</name></type></parameter>, <parameter><type><name>q3_in</name></type></parameter>, <parameter><type><name>limit_in</name></type></parameter>, <parameter><type><name>b_limit_in</name></type></parameter>, <parameter><type><name>thresh_in</name></type></parameter>, <parameter><type><name>hev_out</name></type></parameter>, <parameter><type><name>mask_out</name></type></parameter>, <parameter><type><name>flat_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16u8 p3_asub_p2_m, p2_asub_p1_m, p1_asub_p0_m, q1_asub_q0_m; v16u8 p1_asub_q1_m, p0_asub_q0_m, q3_asub_q2_m, q2_asub_q1_m; p3_asub_p2_m = __msa_asub_u_b((p3_in), (p2_in)); p2_asub_p1_m = __msa_asub_u_b((p2_in), (p1_in)); p1_asub_p0_m = __msa_asub_u_b((p1_in), (p0_in)); q1_asub_q0_m = __msa_asub_u_b((q1_in), (q0_in)); q2_asub_q1_m = __msa_asub_u_b((q2_in), (q1_in)); q3_asub_q2_m = __msa_asub_u_b((q3_in), (q2_in)); p0_asub_q0_m = __msa_asub_u_b((p0_in), (q0_in)); p1_asub_q1_m = __msa_asub_u_b((p1_in), (q1_in)); flat_out = __msa_max_u_b(p1_asub_p0_m, q1_asub_q0_m); hev_out = (thresh_in) &lt; (v16u8) flat_out; p0_asub_q0_m = __msa_adds_u_b(p0_asub_q0_m, p0_asub_q0_m); p1_asub_q1_m &gt;&gt;= 1; p0_asub_q0_m = __msa_adds_u_b(p0_asub_q0_m, p1_asub_q1_m); mask_out = (b_limit_in) &lt; p0_asub_q0_m; mask_out = __msa_max_u_b(flat_out, mask_out); p3_asub_p2_m = __msa_max_u_b(p3_asub_p2_m, p2_asub_p1_m); mask_out = __msa_max_u_b(p3_asub_p2_m, mask_out); q2_asub_q1_m = __msa_max_u_b(q2_asub_q1_m, q3_asub_q2_m); mask_out = __msa_max_u_b(q2_asub_q1_m, mask_out); mask_out = (limit_in) &lt; (v16u8) mask_out; mask_out = __msa_xori_b(mask_out, 0xff); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_ST6x1_UB</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in0_idx</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in1_idx</name></type></parameter>, <parameter><type><name>pdst</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint16_t tmp0_h; uint32_t tmp0_w; tmp0_w = __msa_copy_u_w((v4i32) in0, in0_idx); tmp0_h = __msa_copy_u_h((v8i16) in1, in1_idx); SW(tmp0_w, pdst); SH(tmp0_h, pdst + stride); }</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_limit_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>limit_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>, <decl><type ref="prev"/><name>thresh</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src</name> <operator>-</operator> <operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_MBFILTER</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter8uv_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_v</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_limit_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>thresh_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p2_d</name></decl>, <decl><type ref="prev"/><name>p1_d</name></decl>, <decl><type ref="prev"/><name>p0_d</name></decl>, <decl><type ref="prev"/><name>q0_d</name></decl>, <decl><type ref="prev"/><name>q1_d</name></decl>, <decl><type ref="prev"/><name>q2_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>, <decl><type ref="prev"/><name>thresh</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_u</name></decl>, <decl><type ref="prev"/><name>p2_u</name></decl>, <decl><type ref="prev"/><name>p1_u</name></decl>, <decl><type ref="prev"/><name>p0_u</name></decl>, <decl><type ref="prev"/><name>q3_u</name></decl>, <decl><type ref="prev"/><name>q2_u</name></decl>, <decl><type ref="prev"/><name>q1_u</name></decl>, <decl><type ref="prev"/><name>q0_u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_v</name></decl>, <decl><type ref="prev"/><name>p2_v</name></decl>, <decl><type ref="prev"/><name>p1_v</name></decl>, <decl><type ref="prev"/><name>p0_v</name></decl>, <decl><type ref="prev"/><name>q3_v</name></decl>, <decl><type ref="prev"/><name>q2_v</name></decl>, <decl><type ref="prev"/><name>q1_v</name></decl>, <decl><type ref="prev"/><name>q0_v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src_u</name> <operator>-</operator> <operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p3_u</name></expr></argument>, <argument><expr><name>p2_u</name></expr></argument>, <argument><expr><name>p1_u</name></expr></argument>, <argument><expr><name>p0_u</name></expr></argument>, <argument><expr><name>q0_u</name></expr></argument>, <argument><expr><name>q1_u</name></expr></argument>, <argument><expr><name>q2_u</name></expr></argument>, <argument><expr><name>q3_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src_v</name> <operator>-</operator> <operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p3_v</name></expr></argument>, <argument><expr><name>p2_v</name></expr></argument>, <argument><expr><name>p1_v</name></expr></argument>, <argument><expr><name>p0_v</name></expr></argument>, <argument><expr><name>q0_v</name></expr></argument>, <argument><expr><name>q1_v</name></expr></argument>, <argument><expr><name>q2_v</name></expr></argument>, <argument><expr><name>q3_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D4_UB</name><argument_list>(<argument><expr><name>p3_v</name></expr></argument>, <argument><expr><name>p3_u</name></expr></argument>, <argument><expr><name>p2_v</name></expr></argument>, <argument><expr><name>p2_u</name></expr></argument>, <argument><expr><name>p1_v</name></expr></argument>, <argument><expr><name>p1_u</name></expr></argument>, <argument><expr><name>p0_v</name></expr></argument>, <argument><expr><name>p0_u</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D4_UB</name><argument_list>(<argument><expr><name>q0_v</name></expr></argument>, <argument><expr><name>q0_u</name></expr></argument>, <argument><expr><name>q1_v</name></expr></argument>, <argument><expr><name>q1_u</name></expr></argument>, <argument><expr><name>q2_v</name></expr></argument>, <argument><expr><name>q2_u</name></expr></argument>, <argument><expr><name>q3_v</name></expr></argument>, <argument><expr><name>q3_u</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_MBFILTER</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>-=</operator> <operator>(</operator><name>pitch</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>p2_d</name></expr></argument>, <argument><expr><name>p1_d</name></expr></argument>, <argument><expr><name>p0_d</name></expr></argument>, <argument><expr><name>q0_d</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>q1_d</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>q2_d</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>-=</operator> <operator>(</operator><name>pitch</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>p2_d</name></expr></argument>, <argument><expr><name>p1_d</name></expr></argument>, <argument><expr><name>p0_d</name></expr></argument>, <argument><expr><name>q0_d</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>q1_d</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>q2_d</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_limit_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>limit_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>, <decl><type ref="prev"/><name>thresh</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>, <decl><type ref="prev"/><name>row8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x8_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_MBFILTER</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>temp_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter8uv_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_v</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_limit_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>thresh_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>, <decl><type ref="prev"/><name>thresh</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>, <decl><type ref="prev"/><name>row8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_u</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_v</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x8_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_MBFILTER</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_ST6x1_UB</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter_simple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>b_limit_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_SIMPLE_MASK</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_SIMPLE_FILT</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <name>pitch</name><operator>)</operator></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter_simple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>b_limit_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>, <decl><type ref="prev"/><name>row8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>temp_src</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x4_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_SIMPLE_MASK</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_SIMPLE_FILT</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>q0</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<macro><name>ST_H8</name><argument_list>(<argument>tmp1</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>src</argument>, <argument>pitch</argument>)</argument_list></macro>

<macro><name>ST_H8</name><argument_list>(<argument>tmp0</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>src + <literal type="number">8</literal> * pitch</argument>, <argument>pitch</argument>)</argument_list></macro>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter8uv_inner_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_v</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_limit_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>limit_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_d</name></decl>, <decl><type ref="prev"/><name>p0_d</name></decl>, <decl><type ref="prev"/><name>q0_d</name></decl>, <decl><type ref="prev"/><name>q1_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>, <decl><type ref="prev"/><name>thresh</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_u</name></decl>, <decl><type ref="prev"/><name>p2_u</name></decl>, <decl><type ref="prev"/><name>p1_u</name></decl>, <decl><type ref="prev"/><name>p0_u</name></decl>, <decl><type ref="prev"/><name>q3_u</name></decl>, <decl><type ref="prev"/><name>q2_u</name></decl>, <decl><type ref="prev"/><name>q1_u</name></decl>, <decl><type ref="prev"/><name>q0_u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_v</name></decl>, <decl><type ref="prev"/><name>p2_v</name></decl>, <decl><type ref="prev"/><name>p1_v</name></decl>, <decl><type ref="prev"/><name>p0_v</name></decl>, <decl><type ref="prev"/><name>q3_v</name></decl>, <decl><type ref="prev"/><name>q2_v</name></decl>, <decl><type ref="prev"/><name>q1_v</name></decl>, <decl><type ref="prev"/><name>q0_v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>=</operator> <name>src_u</name> <operator>-</operator> <operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_u</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p3_u</name></expr></argument>, <argument><expr><name>p2_u</name></expr></argument>, <argument><expr><name>p1_u</name></expr></argument>, <argument><expr><name>p0_u</name></expr></argument>, <argument><expr><name>q0_u</name></expr></argument>, <argument><expr><name>q1_u</name></expr></argument>, <argument><expr><name>q2_u</name></expr></argument>, <argument><expr><name>q3_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_u</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>=</operator> <name>src_v</name> <operator>-</operator> <operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_v</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p3_v</name></expr></argument>, <argument><expr><name>p2_v</name></expr></argument>, <argument><expr><name>p1_v</name></expr></argument>, <argument><expr><name>p0_v</name></expr></argument>, <argument><expr><name>q0_v</name></expr></argument>, <argument><expr><name>q1_v</name></expr></argument>, <argument><expr><name>q2_v</name></expr></argument>, <argument><expr><name>q3_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D4_UB</name><argument_list>(<argument><expr><name>p3_v</name></expr></argument>, <argument><expr><name>p3_u</name></expr></argument>, <argument><expr><name>p2_v</name></expr></argument>, <argument><expr><name>p2_u</name></expr></argument>, <argument><expr><name>p1_v</name></expr></argument>, <argument><expr><name>p1_u</name></expr></argument>, <argument><expr><name>p0_v</name></expr></argument>, <argument><expr><name>p0_u</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D4_UB</name><argument_list>(<argument><expr><name>q0_v</name></expr></argument>, <argument><expr><name>q0_u</name></expr></argument>, <argument><expr><name>q1_v</name></expr></argument>, <argument><expr><name>q1_u</name></expr></argument>, <argument><expr><name>q2_v</name></expr></argument>, <argument><expr><name>q2_u</name></expr></argument>, <argument><expr><name>q3_v</name></expr></argument>, <argument><expr><name>q3_u</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_LPF_FILTER4_4W</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>q1_d</name></expr></argument>, <argument><expr><name>q0_d</name></expr></argument>, <argument><expr><name>p0_d</name></expr></argument>, <argument><expr><name>p1_d</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator> <name>pitch</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>q1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>q1_d</name></expr></argument>, <argument><expr><name>q0_d</name></expr></argument>, <argument><expr><name>p0_d</name></expr></argument>, <argument><expr><name>p1_d</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator> <name>pitch</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter8uv_inner_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_v</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_limit_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>limit_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>, <decl><type ref="prev"/><name>thresh</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>, <decl><type ref="prev"/><name>row8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>;</decl_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>b_limit_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_u</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_v</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x8_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_LPF_FILTER4_4W</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SW</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src_u</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src_v</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter16_inner_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>thresh</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_LPF_FILTER4_4W</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter16_inner_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>hev</name></decl>, <decl><type ref="prev"/><name>flat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>thresh</name></decl>, <decl><type ref="prev"/><name>b_limit</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row8</name></decl>, <decl><type ref="prev"/><name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>pitch</name><operator>)</operator></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x8_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LPF_MASK_HEV</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q3</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>b_limit</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>,

<argument><expr><name>hev</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP8_LPF_FILTER4_4W</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<macro><name>ST_W8</name><argument_list>(<argument>tmp2</argument>, <argument>tmp3</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>src</argument>, <argument>pitch</argument>)</argument_list></macro>

<macro><name>ST_W8</name><argument_list>(<argument>tmp4</argument>, <argument>tmp5</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>src + <literal type="number">8</literal> * pitch</argument>, <argument>pitch</argument>)</argument_list></macro>

</block_content>}</block></function>

</unit>
