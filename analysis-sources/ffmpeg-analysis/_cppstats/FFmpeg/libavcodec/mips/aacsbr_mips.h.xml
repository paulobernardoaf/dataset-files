<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\aacsbr_mips.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/sbr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_analysis_mips</name><parameter_list>(<parameter><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>, <parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>mdct</name></decl></parameter>,

<parameter><decl><type><name>SBRDSPContext</name> <modifier>*</modifier></type><name>sbrdsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name><name>z</name><index>[<expr><literal type="number">320</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>W</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>w0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>w1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w1</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"lw %[temp0], 0(%[w1]) \n\t"

"lw %[temp1], 4(%[w1]) \n\t"

"lw %[temp2], 8(%[w1]) \n\t"

"lw %[temp3], 12(%[w1]) \n\t"

"lw %[temp4], 16(%[w1]) \n\t"

"lw %[temp5], 20(%[w1]) \n\t"

"lw %[temp6], 24(%[w1]) \n\t"

"lw %[temp7], 28(%[w1]) \n\t"

"sw %[temp0], 0(%[w0]) \n\t"

"sw %[temp1], 4(%[w0]) \n\t"

"sw %[temp2], 8(%[w0]) \n\t"

"sw %[temp3], 12(%[w0]) \n\t"

"sw %[temp4], 16(%[w0]) \n\t"

"sw %[temp5], 20(%[w0]) \n\t"

"sw %[temp6], 24(%[w0]) \n\t"

"sw %[temp7], 28(%[w0]) \n\t"

PTR_ADDIU " %[w0], %[w0], 32 \n\t"

PTR_ADDIU " %[w1], %[w1], 32 \n\t"

: [w0]"+r"(w0), [w1]"+r"(w1),

[temp0]"=&amp;r"(temp0), [temp1]"=&amp;r"(temp1),

[temp2]"=&amp;r"(temp2), [temp3]"=&amp;r"(temp3),

[temp4]"=&amp;r"(temp4), [temp5]"=&amp;r"(temp5),

[temp6]"=&amp;r"(temp6), [temp7]"=&amp;r"(temp7)

:

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">288</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>in</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"lw %[temp0], 0(%[w1]) \n\t"

"lw %[temp1], 4(%[w1]) \n\t"

"lw %[temp2], 8(%[w1]) \n\t"

"lw %[temp3], 12(%[w1]) \n\t"

"lw %[temp4], 16(%[w1]) \n\t"

"lw %[temp5], 20(%[w1]) \n\t"

"lw %[temp6], 24(%[w1]) \n\t"

"lw %[temp7], 28(%[w1]) \n\t"

"sw %[temp0], 0(%[w0]) \n\t"

"sw %[temp1], 4(%[w0]) \n\t"

"sw %[temp2], 8(%[w0]) \n\t"

"sw %[temp3], 12(%[w0]) \n\t"

"sw %[temp4], 16(%[w0]) \n\t"

"sw %[temp5], 20(%[w0]) \n\t"

"sw %[temp6], 24(%[w0]) \n\t"

"sw %[temp7], 28(%[w0]) \n\t"

PTR_ADDIU " %[w0], %[w0], 32 \n\t"

PTR_ADDIU " %[w1], %[w1], 32 \n\t"

: [w0]"+r"(w0), [w1]"+r"(w1),

[temp0]"=&amp;r"(temp0), [temp1]"=&amp;r"(temp1),

[temp2]"=&amp;r"(temp2), [temp3]"=&amp;r"(temp3),

[temp4]"=&amp;r"(temp4), [temp5]"=&amp;r"(temp5),

[temp6]"=&amp;r"(temp6), [temp7]"=&amp;r"(temp7)

:

: "memory"

);</asm>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>sbr_qmf_window_ds</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>sum64x5</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_pre_shuffle</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>z</name><operator>+</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_post_shuffle</name></name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>buf_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_synthesis_mips</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>mdct</name></decl></parameter>,

<parameter><decl><type><name>SBRDSPContext</name> <modifier>*</modifier></type><name>sbrdsp</name></decl></parameter>, <parameter><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name><name>mdct_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>v0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v_off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>div</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>sbr_qmf_window</name> <init>= <expr><ternary><condition><expr><name>div</name></expr> ?</condition><then> <expr><name>sbr_qmf_window_ds</name></expr> </then><else>: <expr><name>sbr_qmf_window_us</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><literal type="number">128</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>, <decl><type ref="prev"/><name>temp8</name></decl>, <decl><type ref="prev"/><name>temp9</name></decl>, <decl><type ref="prev"/><name>temp10</name></decl>, <decl><type ref="prev"/><name>temp11</name></decl>, <decl><type ref="prev"/><name>temp12</name></decl>, <decl><type ref="prev"/><name>temp13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>temp14</name></decl>, <decl><type ref="prev"/><name>temp15</name></decl>, <decl><type ref="prev"/><name>temp16</name></decl>, <decl><type ref="prev"/><name>temp17</name></decl>, <decl><type ref="prev"/><name>temp18</name></decl>, <decl><type ref="prev"/><name>temp19</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vv0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>v_off</name> <operator>&lt;</operator> <name>step</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_samples</name> <init>= <expr><operator>(</operator><literal type="number">1280</literal> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>div</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v0</name><index>[<expr><name>SBR_SYNTHESIS_BUF_SIZE</name> <operator>-</operator> <name>saved_samples</name></expr>]</index></name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>saved_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v_off</name> <operator>=</operator> <name>SBR_SYNTHESIS_BUF_SIZE</name> <operator>-</operator> <name>saved_samples</name> <operator>-</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v_off</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v0</name> <operator>+</operator> <operator>*</operator><name>v_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>div</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[ <expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">32</literal><operator>+</operator><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">31</literal><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_deint_neg</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>neg_odd_64</name></name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_deint_bfly</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>div</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>v0_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vv0</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v0_end</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>sbr_qmf_window</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

".set push \n\t"

".set noreorder \n\t"

"lwc1 %[temp4], 0(%[v0]) \n\t"

"lwc1 %[temp5], 0(%[s0]) \n\t"

"lwc1 %[temp6], 4(%[v0]) \n\t"

"lwc1 %[temp7], 4(%[s0]) \n\t"

"lwc1 %[temp8], 8(%[v0]) \n\t"

"lwc1 %[temp9], 8(%[s0]) \n\t"

"lwc1 %[temp10], 12(%[v0]) \n\t"

"lwc1 %[temp11], 12(%[s0]) \n\t"

"lwc1 %[temp12], 768(%[v0]) \n\t"

"lwc1 %[temp13], 256(%[s0]) \n\t"

"lwc1 %[temp14], 772(%[v0]) \n\t"

"lwc1 %[temp15], 260(%[s0]) \n\t"

"lwc1 %[temp16], 776(%[v0]) \n\t"

"lwc1 %[temp17], 264(%[s0]) \n\t"

"lwc1 %[temp18], 780(%[v0]) \n\t"

"lwc1 %[temp19], 268(%[s0]) \n\t"

"1: \n\t"

"mul.s %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 1024(%[v0]) \n\t"

"mul.s %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 512(%[s0]) \n\t"

"mul.s %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 1028(%[v0]) \n\t"

"mul.s %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 516(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 1032(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 520(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 1036(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 524(%[s0]) \n\t"

"lwc1 %[temp12], 1792(%[v0]) \n\t"

"lwc1 %[temp13], 768(%[s0]) \n\t"

"lwc1 %[temp14], 1796(%[v0]) \n\t"

"lwc1 %[temp15], 772(%[s0]) \n\t"

"lwc1 %[temp16], 1800(%[v0]) \n\t"

"lwc1 %[temp17], 776(%[s0]) \n\t"

"lwc1 %[temp18], 1804(%[v0]) \n\t"

"lwc1 %[temp19], 780(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 2048(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 1024(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 2052(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 1028(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 2056(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 1032(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 2060(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 1036(%[s0]) \n\t"

"lwc1 %[temp12], 2816(%[v0]) \n\t"

"lwc1 %[temp13], 1280(%[s0]) \n\t"

"lwc1 %[temp14], 2820(%[v0]) \n\t"

"lwc1 %[temp15], 1284(%[s0]) \n\t"

"lwc1 %[temp16], 2824(%[v0]) \n\t"

"lwc1 %[temp17], 1288(%[s0]) \n\t"

"lwc1 %[temp18], 2828(%[v0]) \n\t"

"lwc1 %[temp19], 1292(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 3072(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 1536(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 3076(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 1540(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 3080(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 1544(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 3084(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 1548(%[s0]) \n\t"

"lwc1 %[temp12], 3840(%[v0]) \n\t"

"lwc1 %[temp13], 1792(%[s0]) \n\t"

"lwc1 %[temp14], 3844(%[v0]) \n\t"

"lwc1 %[temp15], 1796(%[s0]) \n\t"

"lwc1 %[temp16], 3848(%[v0]) \n\t"

"lwc1 %[temp17], 1800(%[s0]) \n\t"

"lwc1 %[temp18], 3852(%[v0]) \n\t"

"lwc1 %[temp19], 1804(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 4096(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 2048(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 4100(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 2052(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 4104(%[v0]) \n\t"

PTR_ADDIU "%[dst], %[dst], 16 \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 2056(%[s0]) \n\t"

PTR_ADDIU " %[s0], %[s0], 16 \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 4108(%[v0]) \n\t"

PTR_ADDIU " %[v0], %[v0], 16 \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 2044(%[s0]) \n\t"

"lwc1 %[temp12], 4848(%[v0]) \n\t"

"lwc1 %[temp13], 2288(%[s0]) \n\t"

"lwc1 %[temp14], 4852(%[v0]) \n\t"

"lwc1 %[temp15], 2292(%[s0]) \n\t"

"lwc1 %[temp16], 4856(%[v0]) \n\t"

"lwc1 %[temp17], 2296(%[s0]) \n\t"

"lwc1 %[temp18], 4860(%[v0]) \n\t"

"lwc1 %[temp19], 2300(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 0(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 0(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 4(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 4(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 8(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 8(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 12(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 12(%[s0]) \n\t"

"lwc1 %[temp12], 768(%[v0]) \n\t"

"lwc1 %[temp13], 256(%[s0]) \n\t"

"lwc1 %[temp14], 772(%[v0]) \n\t"

"lwc1 %[temp15], 260(%[s0]) \n\t"

"lwc1 %[temp16], 776(%[v0]) \n\t"

"lwc1 %[temp17], 264(%[s0]) \n\t"

"lwc1 %[temp18], 780(%[v0]) \n\t"

"lwc1 %[temp19], 268(%[s0]) \n\t"

"swc1 %[temp0], -16(%[dst]) \n\t"

"swc1 %[temp1], -12(%[dst]) \n\t"

"swc1 %[temp2], -8(%[dst]) \n\t"

"bne %[v0], %[v0_end], 1b \n\t"

" swc1 %[temp3], -4(%[dst]) \n\t"

"mul.s %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 1024(%[v0]) \n\t"

"mul.s %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 512(%[s0]) \n\t"

"mul.s %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 1028(%[v0]) \n\t"

"mul.s %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 516(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 1032(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 520(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 1036(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 524(%[s0]) \n\t"

"lwc1 %[temp12], 1792(%[v0]) \n\t"

"lwc1 %[temp13], 768(%[s0]) \n\t"

"lwc1 %[temp14], 1796(%[v0]) \n\t"

"lwc1 %[temp15], 772(%[s0]) \n\t"

"lwc1 %[temp16], 1800(%[v0]) \n\t"

"lwc1 %[temp17], 776(%[s0]) \n\t"

"lwc1 %[temp18], 1804(%[v0]) \n\t"

"lwc1 %[temp19], 780(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 2048(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 1024(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 2052(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 1028(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 2056(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 1032(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 2060(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 1036(%[s0]) \n\t"

"lwc1 %[temp12], 2816(%[v0]) \n\t"

"lwc1 %[temp13], 1280(%[s0]) \n\t"

"lwc1 %[temp14], 2820(%[v0]) \n\t"

"lwc1 %[temp15], 1284(%[s0]) \n\t"

"lwc1 %[temp16], 2824(%[v0]) \n\t"

"lwc1 %[temp17], 1288(%[s0]) \n\t"

"lwc1 %[temp18], 2828(%[v0]) \n\t"

"lwc1 %[temp19], 1292(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 3072(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 1536(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 3076(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 1540(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 3080(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 1544(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 3084(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 1548(%[s0]) \n\t"

"lwc1 %[temp12], 3840(%[v0]) \n\t"

"lwc1 %[temp13], 1792(%[s0]) \n\t"

"lwc1 %[temp14], 3844(%[v0]) \n\t"

"lwc1 %[temp15], 1796(%[s0]) \n\t"

"lwc1 %[temp16], 3848(%[v0]) \n\t"

"lwc1 %[temp17], 1800(%[s0]) \n\t"

"lwc1 %[temp18], 3852(%[v0]) \n\t"

"lwc1 %[temp19], 1804(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp4], 4096(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp5], 2048(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp6], 4100(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp7], 2052(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

"lwc1 %[temp8], 4104(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"lwc1 %[temp9], 2056(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"lwc1 %[temp10], 4108(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"lwc1 %[temp11], 2060(%[s0]) \n\t"

"lwc1 %[temp12], 4864(%[v0]) \n\t"

"lwc1 %[temp13], 2304(%[s0]) \n\t"

"lwc1 %[temp14], 4868(%[v0]) \n\t"

"lwc1 %[temp15], 2308(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp4], %[temp5] \n\t"

"lwc1 %[temp16], 4872(%[v0]) \n\t"

"madd.s %[temp1], %[temp1], %[temp6], %[temp7] \n\t"

"lwc1 %[temp17], 2312(%[s0]) \n\t"

"madd.s %[temp2], %[temp2], %[temp8], %[temp9] \n\t"

"lwc1 %[temp18], 4876(%[v0]) \n\t"

"madd.s %[temp3], %[temp3], %[temp10], %[temp11] \n\t"

"lwc1 %[temp19], 2316(%[s0]) \n\t"

"madd.s %[temp0], %[temp0], %[temp12], %[temp13] \n\t"

PTR_ADDIU "%[dst], %[dst], 16 \n\t"

"madd.s %[temp1], %[temp1], %[temp14], %[temp15] \n\t"

"madd.s %[temp2], %[temp2], %[temp16], %[temp17] \n\t"

"madd.s %[temp3], %[temp3], %[temp18], %[temp19] \n\t"

"swc1 %[temp0], -16(%[dst]) \n\t"

"swc1 %[temp1], -12(%[dst]) \n\t"

"swc1 %[temp2], -8(%[dst]) \n\t"

"swc1 %[temp3], -4(%[dst]) \n\t"

".set pop \n\t"

: [dst]"+r"(dst), [v0]"+r"(vv0), [s0]"+r"(s0),

[temp0]"=&amp;f"(temp0), [temp1]"=&amp;f"(temp1), [temp2]"=&amp;f"(temp2),

[temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4), [temp5]"=&amp;f"(temp5),

[temp6]"=&amp;f"(temp6), [temp7]"=&amp;f"(temp7), [temp8]"=&amp;f"(temp8),

[temp9]"=&amp;f"(temp9), [temp10]"=&amp;f"(temp10), [temp11]"=&amp;f"(temp11),

[temp12]"=&amp;f"(temp12), [temp13]"=&amp;f"(temp13), [temp14]"=&amp;f"(temp14),

[temp15]"=&amp;f"(temp15), [temp16]"=&amp;f"(temp16), [temp17]"=&amp;f"(temp17),

[temp18]"=&amp;f"(temp18), [temp19]"=&amp;f"(temp19)

: [v0_end]"r"(v0_end)

: "memory"

);</asm>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>sbr_qmf_window</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">192</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">256</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">128</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">448</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">192</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">512</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">704</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">320</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">768</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">384</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">960</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">448</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator><literal type="number">1024</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">512</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator><literal type="number">1216</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">576</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sbr_qmf_analysis</name></cpp:macro> <cpp:value>sbr_qmf_analysis_mips</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sbr_qmf_synthesis</name></cpp:macro> <cpp:value>sbr_qmf_synthesis_mips</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
