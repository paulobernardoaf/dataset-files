<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\vp9_intra_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp9dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dsp_mips.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPRED_SUBS_UH2_UH</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ out0 = __msa_subs_u_h(out0, in0); out1 = __msa_subs_u_h(out1, in1); }</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_vert_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_32x32_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hor_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>inp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>inp</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hor_32x32_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>inp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>inp</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dc_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>store</name></decl>, <decl><type ref="prev"/><name>src</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4u32</name></type> <name>sum_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2u64</name></type> <name>sum_d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W2_SB</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_h</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum_h</name></expr></argument>, <argument><expr><name>sum_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>__msa_splati_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_DC_TL_4x4</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dc_##dir##_4x4_msa(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *left, const uint8_t *top) { uint32_t val0; v16i8 store, data = { 0 }; v8u16 sum_h; v4u32 sum_w; val0 = LW(dir); data = (v16i8) __msa_insert_w((v4i32) data, 0, val0); sum_h = __msa_hadd_u_h((v16u8) data, (v16u8) data); sum_w = __msa_hadd_u_w(sum_h, sum_h); sum_w = (v4u32) __msa_srari_w((v4i32) sum_w, 2); store = __msa_splati_b((v16i8) sum_w, 0); val0 = __msa_copy_u_w((v4i32) store, 0); SW4(val0, val0, val0, val0, dst, dst_stride); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INTRA_DC_TL_4x4</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_DC_TL_4x4</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>ff_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>store</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4u32</name></type> <name>sum_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2u64</name></type> <name>sum_d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_h</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum_h</name></expr></argument>, <argument><expr><name>sum_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>__msa_splati_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_DC_TL_8x8</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dc_##dir##_8x8_msa(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *left, const uint8_t *top) { uint64_t val0; v16i8 store; v16u8 data = { 0 }; v8u16 sum_h; v4u32 sum_w; v2u64 sum_d; val0 = LD(dir); data = (v16u8) __msa_insert_d((v2i64) data, 0, val0); sum_h = __msa_hadd_u_h(data, data); sum_w = __msa_hadd_u_w(sum_h, sum_h); sum_d = __msa_hadd_u_d(sum_w, sum_w); sum_w = (v4u32) __msa_srari_w((v4i32) sum_d, 3); store = __msa_splati_b((v16i8) sum_w, 0); val0 = __msa_copy_u_d((v2i64) store, 0); SD4(val0, val0, val0, val0, dst, dst_stride); dst += (4 * dst_stride); SD4(val0, val0, val0, val0, dst, dst_stride); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INTRA_DC_TL_8x8</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_DC_TL_8x8</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>ff_dc_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_h</name></decl>, <decl><type ref="prev"/><name>sum_top</name></decl>, <decl><type ref="prev"/><name>sum_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4u32</name></type> <name>sum_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2u64</name></type> <name>sum_d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>sum_top</name></expr></argument>, <argument><expr><name>sum_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_h</name> <operator>=</operator> <name>sum_top</name> <operator>+</operator> <name>sum_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum_h</name></expr></argument>, <argument><expr><name>sum_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_DC_TL_16x16</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dc_##dir##_16x16_msa(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *left, const uint8_t *top) { v16u8 data, out; v8u16 sum_h; v4u32 sum_w; v2u64 sum_d; data = LD_UB(dir); sum_h = __msa_hadd_u_h(data, data); sum_w = __msa_hadd_u_w(sum_h, sum_h); sum_d = __msa_hadd_u_d(sum_w, sum_w); sum_w = (v4u32) __msa_pckev_w((v4i32) sum_d, (v4i32) sum_d); sum_d = __msa_hadd_u_d(sum_w, sum_w); sum_w = (v4u32) __msa_srari_w((v4i32) sum_d, 4); out = (v16u8) __msa_splati_b((v16i8) sum_w, 0); ST_UB8(out, out, out, out, out, out, out, out, dst, dst_stride); dst += (8 * dst_stride); ST_UB8(out, out, out, out, out, out, out, out, dst, dst_stride); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INTRA_DC_TL_16x16</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_DC_TL_16x16</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>ff_dc_32x32_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>left0</name></decl>, <decl><type ref="prev"/><name>left1</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_h</name></decl>, <decl><type ref="prev"/><name>sum_top0</name></decl>, <decl><type ref="prev"/><name>sum_top1</name></decl>, <decl><type ref="prev"/><name>sum_left0</name></decl>, <decl><type ref="prev"/><name>sum_left1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4u32</name></type> <name>sum_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2u64</name></type> <name>sum_d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>left0</name></expr></argument>, <argument><expr><name>left1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>, <argument><expr><name>sum_top0</name></expr></argument>, <argument><expr><name>sum_top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>left0</name></expr></argument>, <argument><expr><name>left1</name></expr></argument>, <argument><expr><name>sum_left0</name></expr></argument>, <argument><expr><name>sum_left1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_h</name> <operator>=</operator> <name>sum_top0</name> <operator>+</operator> <name>sum_top1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_h</name> <operator>+=</operator> <name>sum_left0</name> <operator>+</operator> <name>sum_left1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum_h</name></expr></argument>, <argument><expr><name>sum_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_d</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_w</name></expr></argument>, <argument><expr><name>sum_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_w</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum_d</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_DC_TL_32x32</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dc_##dir##_32x32_msa(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *left, const uint8_t *top) { uint32_t row; v16u8 data0, data1, out; v8u16 sum_h, sum_data0, sum_data1; v4u32 sum_w; v2u64 sum_d; LD_UB2(dir, 16, data0, data1); HADD_UB2_UH(data0, data1, sum_data0, sum_data1); sum_h = sum_data0 + sum_data1; sum_w = __msa_hadd_u_w(sum_h, sum_h); sum_d = __msa_hadd_u_d(sum_w, sum_w); sum_w = (v4u32) __msa_pckev_w((v4i32) sum_d, (v4i32) sum_d); sum_d = __msa_hadd_u_d(sum_w, sum_w); sum_w = (v4u32) __msa_srari_w((v4i32) sum_d, 5); out = (v16u8) __msa_splati_b((v16i8) sum_w, 0); for (row = 16; row--;) { ST_UB2(out, out, dst, 16); dst += dst_stride; ST_UB2(out, out, dst, 16); dst += dst_stride; } }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INTRA_DC_TL_32x32</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_DC_TL_32x32</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_PREDICT_VALDC_16X16_MSA</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dc_##val##_16x16_msa(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *left, const uint8_t *top) { v16u8 out = (v16u8) __msa_ldi_b(val); ST_UB8(out, out, out, out, out, out, out, out, dst, dst_stride); dst += (8 * dst_stride); ST_UB8(out, out, out, out, out, out, out, out, dst, dst_stride); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_16X16_MSA</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_16X16_MSA</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_16X16_MSA</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_PREDICT_VALDC_32X32_MSA</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dc_##val##_32x32_msa(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *left, const uint8_t *top) { uint32_t row; v16u8 out = (v16u8) __msa_ldi_b(val); for (row = 16; row--;) { ST_UB2(out, out, dst, 16); dst += dst_stride; ST_UB2(out, out, dst, 16); dst += dst_stride; } }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_32X32_MSA</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_32X32_MSA</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_32X32_MSA</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>ff_tm_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_left</name> <init>= <expr><name><name>src_top_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_top</name></decl>, <decl><type ref="prev"/><name>src_left0</name></decl>, <decl><type ref="prev"/><name>src_left1</name></decl>, <decl><type ref="prev"/><name>src_left2</name></decl>, <decl><type ref="prev"/><name>src_left3</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>src_top_left</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top_left</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>top_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left0</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left1</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left2</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left3</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>,

<argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_tm_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_left</name> <init>= <expr><name><name>src_top_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>loop_cnt</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_top</name></decl>, <decl><type ref="prev"/><name>src_left0</name></decl>, <decl><type ref="prev"/><name>src_left1</name></decl>, <decl><type ref="prev"/><name>src_left2</name></decl>, <decl><type ref="prev"/><name>src_left3</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>src_top_left</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_top_left</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>top_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left0</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left1</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left2</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left3</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>,

<argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_tm_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_left</name> <init>= <expr><name><name>src_top_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>loop_cnt</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_top</name></decl>, <decl><type ref="prev"/><name>src_left0</name></decl>, <decl><type ref="prev"/><name>src_left1</name></decl>, <decl><type ref="prev"/><name>src_left2</name></decl>, <decl><type ref="prev"/><name>src_left3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>src_top_left</name></decl>, <decl><type ref="prev"/><name>res_r</name></decl>, <decl><type ref="prev"/><name>res_l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_top_left</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>top_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left0</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left1</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left2</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left3</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><name>res_l</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_tm_32x32_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_left</name> <init>= <expr><name><name>src_top_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>loop_cnt</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_top0</name></decl>, <decl><type ref="prev"/><name>src_top1</name></decl>, <decl><type ref="prev"/><name>src_left0</name></decl>, <decl><type ref="prev"/><name>src_left1</name></decl>, <decl><type ref="prev"/><name>src_left2</name></decl>, <decl><type ref="prev"/><name>src_left3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>src_top_left</name></decl>, <decl><type ref="prev"/><name>res_r0</name></decl>, <decl><type ref="prev"/><name>res_r1</name></decl>, <decl><type ref="prev"/><name>res_l0</name></decl>, <decl><type ref="prev"/><name>res_l1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_top1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top_ptr</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_top_left</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>top_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left0</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left1</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left2</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left3</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_left</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_UH</name><argument_list>(<argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left0</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>,

<argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_UH</name><argument_list>(<argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>,

<argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_UH</name><argument_list>(<argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>,

<argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_UH</name><argument_list>(<argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top0</name></expr></argument>, <argument><expr><name>src_left3</name></expr></argument>, <argument><expr><name>src_top1</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>,

<argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IPRED_SUBS_UH2_UH</name><argument_list>(<argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>src_top_left</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r0</name></expr></argument>, <argument><expr><name>res_l0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB</name><argument_list>(<argument><expr><name>res_r1</name></expr></argument>, <argument><expr><name>res_l1</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
