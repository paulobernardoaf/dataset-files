<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\vp8dsp_mmi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8dsp_mips.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_DOUBLE_1</name></cpp:macro> <cpp:value>double db_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_DOUBLE_2</name></cpp:macro> <cpp:value>double db_2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_UINT32_T</name></cpp:macro> <cpp:value>uint32_t it_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_DOUBLE_1</name></cpp:macro> <cpp:value>[db_1]"=&amp;f"(db_1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_DOUBLE_2</name></cpp:macro> <cpp:value>[db_2]"=&amp;f"(db_2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_UINT32_T</name></cpp:macro> <cpp:value>[it_1]"=&amp;r"(it_1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_PCMPGTUB</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pcmpeqb %[db_1], "#src1", "#src2" \n\t" "pmaxub %[db_2], "#src1", "#src2" \n\t" "pcmpeqb %[db_2], %[db_2], "#src1" \n\t" "xor "#dst", %[db_2], %[db_1] \n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_BTOH</name><parameter_list>(<parameter><type><name>dst_l</name></type></parameter>, <parameter><type><name>dst_r</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"xor %[db_1], %[db_1], %[db_1] \n\t" "pcmpgtb %[db_2], %[db_1], "#src" \n\t" "punpcklbh "#dst_r", "#src", %[db_2] \n\t" "punpckhbh "#dst_l", "#src", %[db_2] \n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_VP8_LOOP_FILTER</name></cpp:macro> <cpp:value>"dmtc1 %[thresh], %[ftmp3] \n\t" "punpcklbh %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "punpcklhw %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "punpcklwd %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "pasubub %[ftmp0], %[p1], %[p0] \n\t" "pasubub %[ftmp1], %[q1], %[q0] \n\t" "pmaxub %[ftmp0], %[ftmp0], %[ftmp1] \n\t" MMI_PCMPGTUB(%[hev], %[ftmp0], %[ftmp3]) "pasubub %[ftmp1], %[p0], %[q0] \n\t" "paddusb %[ftmp1], %[ftmp1], %[ftmp1] \n\t" "pasubub %[ftmp2], %[p1], %[q1] \n\t" "li %[tmp0], 0x09 \n\t" "dmtc1 %[tmp0], %[ftmp3] \n\t" PSRLB_MMI(%[ftmp2], %[ftmp3], %[ftmp4], %[ftmp5], %[ftmp2]) "paddusb %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "dmtc1 %[e], %[ftmp3] \n\t" "punpcklbh %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "punpcklhw %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "punpcklwd %[ftmp3], %[ftmp3], %[ftmp3] \n\t" MMI_PCMPGTUB(%[mask], %[ftmp1], %[ftmp3]) "pmaxub %[mask], %[mask], %[ftmp0] \n\t" "pasubub %[ftmp1], %[p3], %[p2] \n\t" "pasubub %[ftmp2], %[p2], %[p1] \n\t" "pmaxub %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "pmaxub %[mask], %[mask], %[ftmp1] \n\t" "pasubub %[ftmp1], %[q3], %[q2] \n\t" "pasubub %[ftmp2], %[q2], %[q1] \n\t" "pmaxub %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "pmaxub %[mask], %[mask], %[ftmp1] \n\t" "dmtc1 %[i], %[ftmp3] \n\t" "punpcklbh %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "punpcklhw %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "punpcklwd %[ftmp3], %[ftmp3], %[ftmp3] \n\t" MMI_PCMPGTUB(%[mask], %[mask], %[ftmp3]) "pcmpeqw %[ftmp3], %[ftmp3], %[ftmp3] \n\t" "xor %[mask], %[mask], %[ftmp3] \n\t" "li %[tmp0], 0x80808080 \n\t" "dmtc1 %[tmp0], %[ftmp7] \n\t" "punpcklwd %[ftmp7], %[ftmp7], %[ftmp7] \n\t" "xor %[p2], %[p2], %[ftmp7] \n\t" "xor %[p1], %[p1], %[ftmp7] \n\t" "xor %[p0], %[p0], %[ftmp7] \n\t" "xor %[q0], %[q0], %[ftmp7] \n\t" "xor %[q1], %[q1], %[ftmp7] \n\t" "xor %[q2], %[q2], %[ftmp7] \n\t" "psubsb %[ftmp4], %[p1], %[q1] \n\t" "psubb %[ftmp5], %[q0], %[p0] \n\t" MMI_BTOH(%[ftmp1], %[ftmp0], %[ftmp5]) MMI_BTOH(%[ftmp3], %[ftmp2], %[ftmp4]) "paddh %[ftmp5], %[ftmp0], %[ftmp0] \n\t" "paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t" "paddh %[ftmp0], %[ftmp2], %[ftmp0] \n\t" "paddh %[ftmp5], %[ftmp1], %[ftmp1] \n\t" "paddh %[ftmp1], %[ftmp1], %[ftmp5] \n\t" "paddh %[ftmp1], %[ftmp3], %[ftmp1] \n\t" "packsshb %[ftmp1], %[ftmp0], %[ftmp1] \n\t" "and %[ftmp1], %[ftmp1], %[mask] \n\t" "and %[ftmp2], %[ftmp1], %[hev] \n\t" "li %[tmp0], 0x04040404 \n\t" "dmtc1 %[tmp0], %[ftmp0] \n\t" "punpcklwd %[ftmp0], %[ftmp0], %[ftmp0] \n\t" "paddsb %[ftmp3], %[ftmp2], %[ftmp0] \n\t" "li %[tmp0], 0x0B \n\t" "dmtc1 %[tmp0], %[ftmp4] \n\t" PSRAB_MMI(%[ftmp3], %[ftmp4], %[ftmp5], %[ftmp6], %[ftmp3]) "li %[tmp0], 0x03030303 \n\t" "dmtc1 %[tmp0], %[ftmp0] \n\t" "punpcklwd %[ftmp0], %[ftmp0], %[ftmp0] \n\t" "paddsb %[ftmp4], %[ftmp2], %[ftmp0] \n\t" "li %[tmp0], 0x0B \n\t" "dmtc1 %[tmp0], %[ftmp2] \n\t" PSRAB_MMI(%[ftmp4], %[ftmp2], %[ftmp5], %[ftmp6], %[ftmp4]) "psubsb %[q0], %[q0], %[ftmp3] \n\t" "paddsb %[p0], %[p0], %[ftmp4] \n\t" "pcmpeqw %[ftmp0], %[ftmp0], %[ftmp0] \n\t" "xor %[hev], %[hev], %[ftmp0] \n\t" "and %[ftmp1], %[ftmp1], %[hev] \n\t" MMI_BTOH(%[ftmp5], %[ftmp6], %[ftmp1]) "li %[tmp0], 0x07 \n\t" "dmtc1 %[tmp0], %[ftmp2] \n\t" "li %[tmp0], 0x001b001b \n\t" "dmtc1 %[tmp0], %[ftmp1] \n\t" "punpcklwd %[ftmp1], %[ftmp1], %[ftmp1] \n\t" "li %[tmp0], 0x003f003f \n\t" "dmtc1 %[tmp0], %[ftmp0] \n\t" "punpcklwd %[ftmp0], %[ftmp0], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp6], %[ftmp1] \n\t" "paddh %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "pmullh %[ftmp4], %[ftmp5], %[ftmp1] \n\t" "paddh %[ftmp4], %[ftmp4], %[ftmp0] \n\t" "psrah %[ftmp4], %[ftmp4], %[ftmp2] \n\t" "packsshb %[ftmp4], %[ftmp3], %[ftmp4] \n\t" "psubsb %[q0], %[q0], %[ftmp4] \n\t" "xor %[q0], %[q0], %[ftmp7] \n\t" "paddsb %[p0], %[p0], %[ftmp4] \n\t" "xor %[p0], %[p0], %[ftmp7] \n\t" "li %[tmp0], 0x00120012 \n\t" "dmtc1 %[tmp0], %[ftmp1] \n\t" "punpcklwd %[ftmp1], %[ftmp1], %[ftmp1] \n\t" "pmullh %[ftmp3], %[ftmp6], %[ftmp1] \n\t" "paddh %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "pmullh %[ftmp4], %[ftmp5], %[ftmp1] \n\t" "paddh %[ftmp4], %[ftmp4], %[ftmp0] \n\t" "psrah %[ftmp4], %[ftmp4], %[ftmp2] \n\t" "packsshb %[ftmp4], %[ftmp3], %[ftmp4] \n\t" "psubsb %[q1], %[q1], %[ftmp4] \n\t" "xor %[q1], %[q1], %[ftmp7] \n\t" "paddsb %[p1], %[p1], %[ftmp4] \n\t" "xor %[p1], %[p1], %[ftmp7] \n\t" "li %[tmp0], 0x03 \n\t" "dmtc1 %[tmp0], %[ftmp1] \n\t" "psllh %[ftmp3], %[ftmp6], %[ftmp1] \n\t" "paddh %[ftmp3], %[ftmp3], %[ftmp6] \n\t" "paddh %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "psllh %[ftmp4], %[ftmp5], %[ftmp1] \n\t" "paddh %[ftmp4], %[ftmp4], %[ftmp5] \n\t" "paddh %[ftmp4], %[ftmp4], %[ftmp0] \n\t" "psrah %[ftmp4], %[ftmp4], %[ftmp2] \n\t" "packsshb %[ftmp4], %[ftmp3], %[ftmp4] \n\t" "psubsb %[q2], %[q2], %[ftmp4] \n\t" "xor %[q2], %[q2], %[ftmp7] \n\t" "paddsb %[p2], %[p2], %[ftmp4] \n\t" "xor %[p2], %[p2], %[ftmp7] \n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL4_H6_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULWC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter2] \n\t" MMI_ULWC1(%[ftmp1], src, -0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" MMI_ULWC1(%[ftmp1], src, -0x02) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter0] \n\t" "paddsh %[ftmp5], %[ftmp3], %[ftmp2] \n\t" MMI_ULWC1(%[ftmp1], src, 0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter3] \n\t" MMI_ULWC1(%[ftmp1], src, 0x02) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" MMI_ULWC1(%[ftmp1], src, 0x03) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter5] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp5] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ff_pw_64] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp3], %[ftmp0] \n\t" MMI_SWC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL4_H4_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULWC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter2] \n\t" MMI_ULWC1(%[ftmp1], src, -0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "psubsh %[ftmp5], %[ftmp3], %[ftmp2] \n\t" MMI_ULWC1(%[ftmp1], src, 0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter3] \n\t" MMI_ULWC1(%[ftmp1], src, 0x02) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "psubh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp5] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ff_pw_64] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp3], %[ftmp0] \n\t" MMI_SWC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL4_V6_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>srcstride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULWC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter2] \n\t" PTR_SUBU ""#src1", "#src", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" PTR_SUBU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter0] \n\t" "paddsh %[ftmp5], %[ftmp3], %[ftmp2] \n\t" PTR_ADDU ""#src1", "#src", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter3] \n\t" PTR_ADDU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" PTR_ADDU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter5] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp5] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ff_pw_64] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp3], %[ftmp0] \n\t" MMI_SWC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL4_V4_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>srcstride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULWC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter2] \n\t" PTR_SUBU ""#src1", "#src", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "psubsh %[ftmp5], %[ftmp3], %[ftmp2] \n\t" PTR_ADDU ""#src1", "#src", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[filter3] \n\t" PTR_ADDU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp5] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ff_pw_64] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp3], %[ftmp0] \n\t" MMI_SWC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL8_H6_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULDC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter2] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter2] \n\t" MMI_ULDC1(%[ftmp1], src, -0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter1] \n\t" "psubsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" MMI_ULDC1(%[ftmp1], src, -0x02) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter0] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter0] \n\t" "paddsh %[ftmp7], %[ftmp5], %[ftmp2] \n\t" "paddsh %[ftmp8], %[ftmp6], %[ftmp3] \n\t" MMI_ULDC1(%[ftmp1], src, 0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter3] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter3] \n\t" MMI_ULDC1(%[ftmp1], src, 0x02) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter4] \n\t" "psubsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" MMI_ULDC1(%[ftmp1], src, 0x03) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter5] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter5] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp7] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp8] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ff_pw_64] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ff_pw_64] \n\t" "psrah %[ftmp5], %[ftmp5], %[ftmp4] \n\t" "psrah %[ftmp6], %[ftmp6], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp5], %[ftmp6] \n\t" MMI_SDC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL8_H4_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULDC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter2] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter2] \n\t" MMI_ULDC1(%[ftmp1], src, -0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter1] \n\t" "psubsh %[ftmp7], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp8], %[ftmp6], %[ftmp3] \n\t" MMI_ULDC1(%[ftmp1], src, 0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter3] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter3] \n\t" MMI_ULDC1(%[ftmp1], src, 0x02) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter4] \n\t" "psubsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp7] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp8] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ff_pw_64] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ff_pw_64] \n\t" "psrah %[ftmp5], %[ftmp5], %[ftmp4] \n\t" "psrah %[ftmp6], %[ftmp6], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp5], %[ftmp6] \n\t" MMI_SDC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL8_V6_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>srcstride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULDC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter2] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter2] \n\t" PTR_SUBU ""#src1", "#src", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter1] \n\t" "psubsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" PTR_SUBU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter0] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter0] \n\t" "paddsh %[ftmp7], %[ftmp5], %[ftmp2] \n\t" "paddsh %[ftmp8], %[ftmp6], %[ftmp3] \n\t" PTR_ADDU ""#src1", "#src", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter3] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter3] \n\t" PTR_ADDU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter4] \n\t" "psubsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" PTR_ADDU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter5] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter5] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp7] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp8] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ff_pw_64] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ff_pw_64] \n\t" "psrah %[ftmp5], %[ftmp5], %[ftmp4] \n\t" "psrah %[ftmp6], %[ftmp6], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp5], %[ftmp6] \n\t" MMI_SDC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_EPEL8_V4_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>srcstride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULDC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter2] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter2] \n\t" PTR_SUBU ""#src1", "#src", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter1] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter1] \n\t" "psubsh %[ftmp7], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp8], %[ftmp6], %[ftmp3] \n\t" PTR_ADDU ""#src1", "#src", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[filter3] \n\t" "pmullh %[ftmp6], %[ftmp3], %[filter3] \n\t" PTR_ADDU ""#src1", "#src1", "#srcstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[filter4] \n\t" "pmullh %[ftmp3], %[ftmp3], %[filter4] \n\t" "psubsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "psubsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp7] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp8] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ff_pw_64] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ff_pw_64] \n\t" "psrah %[ftmp5], %[ftmp5], %[ftmp4] \n\t" "psrah %[ftmp6], %[ftmp6], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp5], %[ftmp6] \n\t" MMI_SDC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_BILINEAR8_H_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULDC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[a] \n\t" "pmullh %[ftmp6], %[ftmp3], %[a] \n\t" MMI_ULDC1(%[ftmp1], src, 0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[b] \n\t" "pmullh %[ftmp3], %[ftmp3], %[b] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ff_pw_4] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ff_pw_4] \n\t" "psrah %[ftmp5], %[ftmp5], %[ftmp4] \n\t" "psrah %[ftmp6], %[ftmp6], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp5], %[ftmp6] \n\t" MMI_SDC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_BILINEAR4_H_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULWC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[a] \n\t" MMI_ULWC1(%[ftmp1], src, 0x01) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[b] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ff_pw_4] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp3], %[ftmp0] \n\t" MMI_SWC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_BILINEAR8_V_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>sstride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULDC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp5], %[ftmp2], %[c] \n\t" "pmullh %[ftmp6], %[ftmp3], %[c] \n\t" PTR_ADDU ""#src1", "#src", "#sstride" \n\t" MMI_ULDC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[d] \n\t" "pmullh %[ftmp3], %[ftmp3], %[d] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ftmp2] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ftmp3] \n\t" "paddsh %[ftmp5], %[ftmp5], %[ff_pw_4] \n\t" "paddsh %[ftmp6], %[ftmp6], %[ff_pw_4] \n\t" "psrah %[ftmp5], %[ftmp5], %[ftmp4] \n\t" "psrah %[ftmp6], %[ftmp6], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp5], %[ftmp6] \n\t" MMI_SDC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VP8_BILINEAR4_V_MMI</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>sstride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MMI_ULWC1(%[ftmp1], src, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp3], %[ftmp2], %[c] \n\t" PTR_ADDU ""#src1", "#src", "#sstride" \n\t" MMI_ULWC1(%[ftmp1], src1, 0x00) "punpcklbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t" "pmullh %[ftmp2], %[ftmp2], %[d] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t" "paddsh %[ftmp3], %[ftmp3], %[ff_pw_4] \n\t" "psrah %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "packushb %[ftmp1], %[ftmp3], %[ftmp0] \n\t" MMI_SWC1(%[ftmp1], dst, 0x00)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name><name>fourtap_subpel_filters</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><block>{<expr><literal type="number">0x0000000000000000</literal></expr>, <expr><literal type="number">0x0006000600060006</literal></expr>, <expr><literal type="number">0x007b007b007b007b</literal></expr>,

<expr><literal type="number">0x000c000c000c000c</literal></expr>, <expr><literal type="number">0x0001000100010001</literal></expr>, <expr><literal type="number">0x0000000000000000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0002000200020002</literal></expr>, <expr><literal type="number">0x000b000b000b000b</literal></expr>, <expr><literal type="number">0x006c006c006c006c</literal></expr>,

<expr><literal type="number">0x0024002400240024</literal></expr>, <expr><literal type="number">0x0008000800080008</literal></expr>, <expr><literal type="number">0x0001000100010001</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0000000000000000</literal></expr>, <expr><literal type="number">0x0009000900090009</literal></expr>, <expr><literal type="number">0x005d005d005d005d</literal></expr>,

<expr><literal type="number">0x0032003200320032</literal></expr>, <expr><literal type="number">0x0006000600060006</literal></expr>, <expr><literal type="number">0x0000000000000000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0003000300030003</literal></expr>, <expr><literal type="number">0x0010001000100010</literal></expr>, <expr><literal type="number">0x004d004d004d004d</literal></expr>,

<expr><literal type="number">0x004d004d004d004d</literal></expr>, <expr><literal type="number">0x0010001000100010</literal></expr>, <expr><literal type="number">0x0003000300030003</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0000000000000000</literal></expr>, <expr><literal type="number">0x0006000600060006</literal></expr>, <expr><literal type="number">0x0032003200320032</literal></expr>,

<expr><literal type="number">0x005d005d005d005d</literal></expr>, <expr><literal type="number">0x0009000900090009</literal></expr>, <expr><literal type="number">0x0000000000000000</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0001000100010001</literal></expr>, <expr><literal type="number">0x0008000800080008</literal></expr>, <expr><literal type="number">0x0024002400240024</literal></expr>,

<expr><literal type="number">0x006c006c006c006c</literal></expr>, <expr><literal type="number">0x000b000b000b000b</literal></expr>, <expr><literal type="number">0x0002000200020002</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0000000000000000</literal></expr>, <expr><literal type="number">0x0001000100010001</literal></expr>, <expr><literal type="number">0x000c000c000c000c</literal></expr>,

<expr><literal type="number">0x007b007b007b007b</literal></expr>, <expr><literal type="number">0x0006000600060006</literal></expr>, <expr><literal type="number">0x0000000000000000</literal></expr>}</block></expr>

}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_6TAP</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cm[(F[2] * src[x + 0 * stride] - F[1] * src[x - 1 * stride] + F[0] * src[x - 2 * stride] + F[3] * src[x + 1 * stride] - F[4] * src[x + 2 * stride] + F[5] * src[x + 3 * stride] + 64) &gt;&gt; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_4TAP</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cm[(F[2] * src[x + 0 * stride] - F[1] * src[x - 1 * stride] + F[3] * src[x + 1 * stride] - F[4] * src[x + 2 * stride] + 64) &gt;&gt; 7]</cpp:value></cpp:define>

static const uint8_t subpel_filters[7][6] = {

{ 0, 6, 123, 12, 1, 0 },

{ 2, 11, 108, 36, 8, 1 },

{ 0, 9, 93, 50, 6, 0 },

{ 3, 16, 77, 77, 16, 3 },

{ 0, 6, 50, 93, 9, 0 },

{ 1, 8, 36, 108, 11, 2 },

{ 0, 1, 12, 123, 6, 0 },

};

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_20091</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((a) * 20091) &gt;&gt; 16) + (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_35468</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) * 35468) &gt;&gt; 16)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clip_int8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cm[(n) + 0x80] - 0x80)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_filter_common_is4tap</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q0</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q1</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p0</name> <operator>+</operator> <name>f2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q0</name> <operator>-</operator> <name>f1</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_filter_common_isnot4tap</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q0</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q1</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p0</name> <operator>+</operator> <name>f2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q0</name> <operator>-</operator> <name>f1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p1</name> <operator>+</operator> <name>a</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q1</name> <operator>-</operator> <name>a</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp8_simple_limit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q0</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q1</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">2</literal> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>flim</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>hev</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q0</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q1</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mbedge</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p2</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q0</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q1</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q2</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>w</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><literal type="number">27</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><literal type="number">18</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><literal type="number">9</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p2</name> <operator>+</operator> <name>a2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p1</name> <operator>+</operator> <name>a1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p0</name> <operator>+</operator> <name>a0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q0</name> <operator>-</operator> <name>a0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q1</name> <operator>-</operator> <name>a1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q2</name> <operator>-</operator> <name>a2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp8_normal_limit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>I</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p3</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p2</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q0</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q1</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q2</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>q3</name> <init>= <expr><name><name>p</name><index>[ <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vp8_simple_limit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name>p3</name> <operator>-</operator> <name>p2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p2</name> <operator>-</operator> <name>p1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q3</name> <operator>-</operator> <name>q2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name>q2</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_v_loop_filter8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_DOUBLE_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_DOUBLE_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_UINT32_T</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"gsldlc1 %[q0], 0x07(%[dst]) \n\t"

"gsldrc1 %[q0], 0x00(%[dst]) \n\t"

PTR_SUBU "%[tmp0], %[dst], %[stride] \n\t"

"gsldlc1 %[p0], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[p0], 0x00(%[tmp0]) \n\t"

PTR_SUBU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[p1], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[p1], 0x00(%[tmp0]) \n\t"

PTR_SUBU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[p2], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[p2], 0x00(%[tmp0]) \n\t"

PTR_SUBU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[p3], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[p3], 0x00(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[dst], %[stride] \n\t"

"gsldlc1 %[q1], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[q1], 0x00(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[q2], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[q2], 0x00(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[q3], 0x07(%[tmp0]) \n\t"

"gsldrc1 %[q3], 0x00(%[tmp0]) \n\t"

MMI_VP8_LOOP_FILTER

"gssdlc1 %[q0], 0x07(%[dst]) \n\t"

"gssdrc1 %[q0], 0x00(%[dst]) \n\t"

PTR_SUBU "%[tmp0], %[dst], %[stride] \n\t"

"gssdlc1 %[p0], 0x07(%[tmp0]) \n\t"

"gssdrc1 %[p0], 0x00(%[tmp0]) \n\t"

PTR_SUBU "%[tmp0], %[tmp0], %[stride] \n\t"

"gssdlc1 %[p1], 0x07(%[tmp0]) \n\t"

"gssdrc1 %[p1], 0x00(%[tmp0]) \n\t"

PTR_SUBU "%[tmp0], %[tmp0], %[stride] \n\t"

"gssdlc1 %[p2], 0x07(%[tmp0]) \n\t"

"gssdrc1 %[p2], 0x00(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[dst], %[stride] \n\t"

"gssdlc1 %[q1], 0x07(%[tmp0]) \n\t"

"gssdrc1 %[q1], 0x00(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gssdlc1 %[q2], 0x07(%[tmp0]) \n\t"

"gssdrc1 %[q2], 0x00(%[tmp0]) \n\t"

: [p3]"=&amp;f"(ftmp[0]), [p2]"=&amp;f"(ftmp[1]),

[p1]"=&amp;f"(ftmp[2]), [p0]"=&amp;f"(ftmp[3]),

[q0]"=&amp;f"(ftmp[4]), [q1]"=&amp;f"(ftmp[5]),

[q2]"=&amp;f"(ftmp[6]), [q3]"=&amp;f"(ftmp[7]),

[ftmp0]"=&amp;f"(ftmp[8]), [ftmp1]"=&amp;f"(ftmp[9]),

[ftmp2]"=&amp;f"(ftmp[10]), [ftmp3]"=&amp;f"(ftmp[11]),

[hev]"=&amp;f"(ftmp[12]), [mask]"=&amp;f"(ftmp[13]),

[ftmp4]"=&amp;f"(ftmp[14]), [ftmp5]"=&amp;f"(ftmp[15]),

[ftmp6]"=&amp;f"(ftmp[16]), [ftmp7]"=&amp;f"(ftmp[17]),

[dst]"+&amp;r"(dst), [tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_DOUBLE_1, RESTRICT_ASM_DOUBLE_2,

RESTRICT_ASM_UINT32_T

: [e]"r"((mips_reg)flim_E), [thresh]"r"((mips_reg)hev_thresh),

[i]"r"((mips_reg)flim_I), [stride]"r"((mips_reg)stride)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_v_loop_filter8_inner_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp8_normal_limit</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hv</name> <init>= <expr><call><name>hev</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_is4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_isnot4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_h_loop_filter8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_DOUBLE_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_DOUBLE_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_UINT32_T</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"gsldlc1 %[p3], 0x03(%[dst]) \n\t"

"gsldrc1 %[p3], -0x04(%[dst]) \n\t"

PTR_ADDU "%[tmp0], %[dst], %[stride] \n\t"

"gsldlc1 %[p2], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[p2], -0x04(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[p1], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[p1], -0x04(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[p0], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[p0], -0x04(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[q0], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[q0], -0x04(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[q1], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[q1], -0x04(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[q2], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[q2], -0x04(%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[stride] \n\t"

"gsldlc1 %[q3], 0x03(%[tmp0]) \n\t"

"gsldrc1 %[q3], -0x04(%[tmp0]) \n\t"

TRANSPOSE_8B(%[p3], %[p2], %[p1], %[p0],

%[q0], %[q1], %[q2], %[q3],

%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4])

MMI_VP8_LOOP_FILTER

TRANSPOSE_8B(%[p3], %[p2], %[p1], %[p0],

%[q0], %[q1], %[q2], %[q3],

%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4])

"gssdlc1 %[p3], 0x03(%[dst]) \n\t"

"gssdrc1 %[p3], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[p2], 0x03(%[dst]) \n\t"

"gssdrc1 %[p2], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[p1], 0x03(%[dst]) \n\t"

"gssdrc1 %[p1], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[p0], 0x03(%[dst]) \n\t"

"gssdrc1 %[p0], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[q0], 0x03(%[dst]) \n\t"

"gssdrc1 %[q0], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[q1], 0x03(%[dst]) \n\t"

"gssdrc1 %[q1], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[q2], 0x03(%[dst]) \n\t"

"gssdrc1 %[q2], -0x04(%[dst]) \n\t"

PTR_ADDU "%[dst], %[dst], %[stride] \n\t"

"gssdlc1 %[q3], 0x03(%[dst]) \n\t"

"gssdrc1 %[q3], -0x04(%[dst]) \n\t"

: [p3]"=&amp;f"(ftmp[0]), [p2]"=&amp;f"(ftmp[1]),

[p1]"=&amp;f"(ftmp[2]), [p0]"=&amp;f"(ftmp[3]),

[q0]"=&amp;f"(ftmp[4]), [q1]"=&amp;f"(ftmp[5]),

[q2]"=&amp;f"(ftmp[6]), [q3]"=&amp;f"(ftmp[7]),

[ftmp0]"=&amp;f"(ftmp[8]), [ftmp1]"=&amp;f"(ftmp[9]),

[ftmp2]"=&amp;f"(ftmp[10]), [ftmp3]"=&amp;f"(ftmp[11]),

[hev]"=&amp;f"(ftmp[12]), [mask]"=&amp;f"(ftmp[13]),

[ftmp4]"=&amp;f"(ftmp[14]), [ftmp5]"=&amp;f"(ftmp[15]),

[ftmp6]"=&amp;f"(ftmp[16]), [ftmp7]"=&amp;f"(ftmp[17]),

[dst]"+&amp;r"(dst), [tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_DOUBLE_1, RESTRICT_ASM_DOUBLE_2,

RESTRICT_ASM_UINT32_T

: [e]"r"((mips_reg)flim_E), [thresh]"r"((mips_reg)hev_thresh),

[i]"r"((mips_reg)flim_I), [stride]"r"((mips_reg)stride)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_h_loop_filter8_inner_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp8_normal_limit</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hv</name> <init>= <expr><call><name>hev</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_is4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_isnot4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_luma_dc_wht_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

MMI_LDC1(%[ftmp0], %[dc], 0x00)

MMI_LDC1(%[ftmp1], %[dc], 0x08)

MMI_LDC1(%[ftmp2], %[dc], 0x10)

MMI_LDC1(%[ftmp3], %[dc], 0x18)

"paddsh %[ftmp4], %[ftmp0], %[ftmp3] \n\t"

"psubsh %[ftmp5], %[ftmp0], %[ftmp3] \n\t"

"paddsh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"

"psubsh %[ftmp7], %[ftmp1], %[ftmp2] \n\t"

"paddsh %[ftmp0], %[ftmp4], %[ftmp6] \n\t"

"paddsh %[ftmp1], %[ftmp5], %[ftmp7] \n\t"

"psubsh %[ftmp2], %[ftmp4], %[ftmp6] \n\t"

"psubsh %[ftmp3], %[ftmp5], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[dc], 0x00)

MMI_SDC1(%[ftmp1], %[dc], 0x08)

MMI_SDC1(%[ftmp2], %[dc], 0x10)

MMI_SDC1(%[ftmp3], %[dc], 0x18)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]),

RESTRICT_ASM_ALL64

[ftmp7]"=&amp;f"(ftmp[7])

: [dc]"r"((uint8_t*)dc)

: "memory"

);</asm>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

MMI_SDC1(%[ftmp0], %[dc], 0x00)

MMI_SDC1(%[ftmp0], %[dc], 0x08)

MMI_SDC1(%[ftmp0], %[dc], 0x10)

MMI_SDC1(%[ftmp0], %[dc], 0x18)

: RESTRICT_ASM_ALL64

[ftmp0]"=&amp;f"(ftmp[0])

: [dc]"r"((uint8_t *)dc)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>t00</name></decl>, <decl><type ref="prev"/><name>t01</name></decl>, <decl><type ref="prev"/><name>t02</name></decl>, <decl><type ref="prev"/><name>t03</name></decl>, <decl><type ref="prev"/><name>t10</name></decl>, <decl><type ref="prev"/><name>t11</name></decl>, <decl><type ref="prev"/><name>t12</name></decl>, <decl><type ref="prev"/><name>t13</name></decl>, <decl><type ref="prev"/><name>t20</name></decl>, <decl><type ref="prev"/><name>t21</name></decl>, <decl><type ref="prev"/><name>t22</name></decl>, <decl><type ref="prev"/><name>t23</name></decl>, <decl><type ref="prev"/><name>t30</name></decl>, <decl><type ref="prev"/><name>t31</name></decl>, <decl><type ref="prev"/><name>t32</name></decl>, <decl><type ref="prev"/><name>t33</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t00</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t10</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t20</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t30</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t03</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t13</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t23</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t33</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t01</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t11</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t21</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t31</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t02</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t12</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t22</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t32</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t00</name> <operator>+</operator> <name>t01</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t10</name> <operator>+</operator> <name>t11</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t20</name> <operator>+</operator> <name>t21</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t30</name> <operator>+</operator> <name>t31</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t03</name> <operator>+</operator> <name>t02</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t13</name> <operator>+</operator> <name>t12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t23</name> <operator>+</operator> <name>t22</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t33</name> <operator>+</operator> <name>t32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t00</name> <operator>-</operator> <name>t01</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>t10</name> <operator>-</operator> <name>t11</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>t20</name> <operator>-</operator> <name>t21</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>t30</name> <operator>-</operator> <name>t31</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>t03</name> <operator>-</operator> <name>t02</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>t13</name> <operator>-</operator> <name>t12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>t23</name> <operator>-</operator> <name>t22</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>t33</name> <operator>-</operator> <name>t32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>dc</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>dc</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>dc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>dc</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_luma_dc_wht_dc_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_add_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_ph_4e7b</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x4e7b4e7b4e7b4e7bULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_ph_22a3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x22a322a322a322a3ULL</literal></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp1], %[block], 0x00)

MMI_LDC1(%[ftmp2], %[block], 0x08)

MMI_LDC1(%[ftmp3], %[block], 0x10)

MMI_LDC1(%[ftmp4], %[block], 0x18)

"li %[tmp0], 0x02 \n\t"

"mtc1 %[tmp0], %[ftmp11] \n\t"

"paddh %[ftmp5], %[ftmp1], %[ftmp3] \n\t"

"psubh %[ftmp6], %[ftmp1], %[ftmp3] \n\t"

"psllh %[ftmp9], %[ftmp4], %[ftmp11] \n\t"

"pmulhh %[ftmp7], %[ftmp9], %[ff_ph_22a3] \n\t"

"psllh %[ftmp9], %[ftmp2], %[ftmp11] \n\t"

"pmulhh %[ftmp8], %[ftmp9], %[ff_ph_22a3] \n\t"

"pmulhh %[ftmp9], %[ftmp2], %[ff_ph_4e7b] \n\t"

"paddh %[ftmp9], %[ftmp9], %[ftmp2] \n\t"

"pmulhh %[ftmp10], %[ftmp4], %[ff_ph_4e7b] \n\t"

"paddh %[ftmp10], %[ftmp10], %[ftmp4] \n\t"

"paddh %[ftmp1], %[ftmp5], %[ftmp7] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ftmp9] \n\t"

"paddh %[ftmp2], %[ftmp6], %[ftmp8] \n\t"

"psubh %[ftmp2], %[ftmp2], %[ftmp10] \n\t"

"psubh %[ftmp3], %[ftmp6], %[ftmp8] \n\t"

"paddh %[ftmp3], %[ftmp3], %[ftmp10] \n\t"

"psubh %[ftmp4], %[ftmp5], %[ftmp7] \n\t"

"psubh %[ftmp4], %[ftmp4], %[ftmp9] \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

MMI_SDC1(%[ftmp0], %[block], 0x08)

MMI_SDC1(%[ftmp0], %[block], 0x10)

MMI_SDC1(%[ftmp0], %[block], 0x18)

TRANSPOSE_4H(%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4],

%[ftmp5], %[ftmp6], %[ftmp7], %[ftmp8])

"paddh %[ftmp5], %[ftmp1], %[ftmp3] \n\t"

"psubh %[ftmp6], %[ftmp1], %[ftmp3] \n\t"

"psllh %[ftmp9], %[ftmp2], %[ftmp11] \n\t"

"pmulhh %[ftmp9], %[ftmp9], %[ff_ph_22a3] \n\t"

"psubh %[ftmp7], %[ftmp9], %[ftmp4] \n\t"

"pmulhh %[ftmp10], %[ftmp4], %[ff_ph_4e7b] \n\t"

"psubh %[ftmp7], %[ftmp7], %[ftmp10] \n\t"

"psllh %[ftmp9], %[ftmp4], %[ftmp11] \n\t"

"pmulhh %[ftmp9], %[ftmp9], %[ff_ph_22a3] \n\t"

"paddh %[ftmp8], %[ftmp9], %[ftmp2] \n\t"

"pmulhh %[ftmp10], %[ftmp2], %[ff_ph_4e7b] \n\t"

"paddh %[ftmp8], %[ftmp8], %[ftmp10] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp11] \n\t"

"paddh %[ftmp1], %[ftmp5], %[ftmp8] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ff_pw_4] \n\t"

"psrah %[ftmp1], %[ftmp1], %[ftmp11] \n\t"

"paddh %[ftmp2], %[ftmp6], %[ftmp7] \n\t"

"paddh %[ftmp2], %[ftmp2], %[ff_pw_4] \n\t"

"psrah %[ftmp2], %[ftmp2], %[ftmp11] \n\t"

"psubh %[ftmp3], %[ftmp6], %[ftmp7] \n\t"

"paddh %[ftmp3], %[ftmp3], %[ff_pw_4] \n\t"

"psrah %[ftmp3], %[ftmp3], %[ftmp11] \n\t"

"psubh %[ftmp4], %[ftmp5], %[ftmp8] \n\t"

"paddh %[ftmp4], %[ftmp4], %[ff_pw_4] \n\t"

"psrah %[ftmp4], %[ftmp4], %[ftmp11] \n\t"

TRANSPOSE_4H(%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4],

%[ftmp5], %[ftmp6], %[ftmp7], %[ftmp8])

MMI_LWC1(%[ftmp5], %[dst0], 0x00)

MMI_LWC1(%[ftmp6], %[dst1], 0x00)

MMI_LWC1(%[ftmp7], %[dst2], 0x00)

MMI_LWC1(%[ftmp8], %[dst3], 0x00)

"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"

"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"

"punpcklbh %[ftmp7], %[ftmp7], %[ftmp0] \n\t"

"punpcklbh %[ftmp8], %[ftmp8], %[ftmp0] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

"paddh %[ftmp2], %[ftmp2], %[ftmp6] \n\t"

"paddh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"

"paddh %[ftmp4], %[ftmp4], %[ftmp8] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"

"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"

"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"

"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

MMI_SWC1(%[ftmp1], %[dst0], 0x00)

MMI_SWC1(%[ftmp2], %[dst1], 0x00)

MMI_SWC1(%[ftmp3], %[dst2], 0x00)

MMI_SWC1(%[ftmp4], %[dst3], 0x00)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),

[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),

RESTRICT_ASM_LOW32

RESTRICT_ASM_ALL64

[tmp0]"=&amp;r"(tmp[0])

: [dst0]"r"(dst), [dst1]"r"(dst+stride),

[dst2]"r"(dst+2*stride), [dst3]"r"(dst+3*stride),

[block]"r"(block), [ff_pw_4]"f"(ff_pw_4),

[ff_ph_4e7b]"f"(ff_ph_4e7b), [ff_ph_22a3]"f"(ff_ph_22a3)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[ <expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[ <expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[ <expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>tmp</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>-</operator> <name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_dc_add_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"mtc1 %[dc], %[ftmp5] \n\t"

MMI_LWC1(%[ftmp1], %[dst0], 0x00)

MMI_LWC1(%[ftmp2], %[dst1], 0x00)

MMI_LWC1(%[ftmp3], %[dst2], 0x00)

MMI_LWC1(%[ftmp4], %[dst3], 0x00)

"pshufh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"

"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"

"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"

"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"

"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddsh %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

"paddsh %[ftmp2], %[ftmp2], %[ftmp5] \n\t"

"paddsh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"

"paddsh %[ftmp4], %[ftmp4], %[ftmp5] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"

"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"

"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"

"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

MMI_SWC1(%[ftmp1], %[dst0], 0x00)

MMI_SWC1(%[ftmp2], %[dst1], 0x00)

MMI_SWC1(%[ftmp3], %[dst2], 0x00)

MMI_SWC1(%[ftmp4], %[dst3], 0x00)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]),

RESTRICT_ASM_LOW32

[ftmp5]"=&amp;f"(ftmp[5])

: [dst0]"r"(dst), [dst1]"r"(dst+stride),

[dst2]"r"(dst+2*stride), [dst3]"r"(dst+3*stride),

[dc]"r"(dc)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_dc_add4y_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_dc_add4uv_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp8_v_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp8_v_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp8_h_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp8_h_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>,

<argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter8uv_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp8_v_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp8_v_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter8uv_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp8_h_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp8_h_loop_filter8_mmi</name><argument_list>(<argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter16_inner_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp8_normal_limit</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hv</name> <init>= <expr><call><name>hev</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_is4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_isnot4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter16_inner_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp8_normal_limit</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hv</name> <init>= <expr><call><name>hev</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_is4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_isnot4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter8uv_inner_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp8_v_loop_filter8_inner_mmi</name><argument_list>(<argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp8_v_loop_filter8_inner_mmi</name><argument_list>(<argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter8uv_inner_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp8_h_loop_filter8_inner_mmi</name><argument_list>(<argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp8_h_loop_filter8_inner_mmi</name><argument_list>(<argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_v_loop_filter_simple_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp8_simple_limit</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>flim</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_is4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_h_loop_filter_simple_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp8_simple_limit</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flim</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp8_filter_common_is4tap</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_pixels16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDU "%[addr0], %[src], %[srcstride] \n\t"

MMI_ULDC1(%[ftmp0], %[src], 0x00)

"ldl %[tmp0], 0x0f(%[src]) \n\t"

"ldr %[tmp0], 0x08(%[src]) \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

"ldl %[tmp1], 0x0f(%[addr0]) \n\t"

"ldr %[tmp1], 0x08(%[addr0]) \n\t"

PTR_ADDU "%[addr1], %[dst], %[dststride] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

"sdl %[tmp0], 0x0f(%[dst]) \n\t"

"sdr %[tmp0], 0x08(%[dst]) \n\t"

"addiu %[h], %[h], -0x02 \n\t"

MMI_SDC1(%[ftmp1], %[addr1], 0x00)

PTR_ADDU "%[src], %[addr0], %[srcstride] \n\t"

"sdl %[tmp1], 0x0f(%[addr1]) \n\t"

"sdr %[tmp1], 0x08(%[addr1]) \n\t"

PTR_ADDU "%[dst], %[addr1], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[tmp0]"=&amp;r"(tmp[0]), [tmp1]"=&amp;r"(tmp[1]),

RESTRICT_ASM_ALL64

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[h]"+&amp;r"(h)

: [dststride]"r"((mips_reg)dststride),

[srcstride]"r"((mips_reg)srcstride)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_pixels8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDU "%[addr0], %[src], %[srcstride] \n\t"

MMI_ULDC1(%[ftmp0], %[src], 0x00)

"ldl %[tmp0], 0x07(%[addr0]) \n\t"

"ldr %[tmp0], 0x00(%[addr0]) \n\t"

PTR_ADDU "%[addr1], %[dst], %[dststride] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

"addiu %[h], %[h], -0x02 \n\t"

"sdl %[tmp0], 0x07(%[addr1]) \n\t"

"sdr %[tmp0], 0x00(%[addr1]) \n\t"

PTR_ADDU "%[src], %[addr0], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[addr1], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[h]"+&amp;r"(h)

: [dststride]"r"((mips_reg)dststride),

[srcstride]"r"((mips_reg)srcstride)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_pixels4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDU "%[addr0], %[src], %[srcstride] \n\t"

MMI_LWC1(%[ftmp0], %[src], 0x00)

"lwl %[tmp0], 0x03(%[addr0]) \n\t"

"lwr %[tmp0], 0x00(%[addr0]) \n\t"

PTR_ADDU "%[addr1], %[dst], %[dststride] \n\t"

MMI_SWC1(%[ftmp0], %[dst], 0x00)

"addiu %[h], %[h], -0x02 \n\t"

"swl %[tmp0], 0x03(%[addr1]) \n\t"

"swr %[tmp0], 0x00(%[addr1]) \n\t"

PTR_ADDU "%[src], %[addr0], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[addr1], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[h]"+&amp;r"(h)

: [dststride]"r"((mips_reg)dststride),

[srcstride]"r"((mips_reg)srcstride)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_h4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_H4_MMI(%[src], %[dst])

PTR_ADDIU "%[src1], %[src], 0x08 \n\t"

PTR_ADDIU "%[dst1], %[dst], 0x08 \n\t"

PUT_VP8_EPEL8_H4_MMI(%[src1], %[dst1])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[dst1]"=&amp;r"(dst1), [src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter1]"f"(filter[1]), [filter2]"f"(filter[2]),

[filter3]"f"(filter[3]), [filter4]"f"(filter[4])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_h4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_H4_MMI(%[src], %[dst])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter1]"f"(filter[1]), [filter2]"f"(filter[2]),

[filter3]"f"(filter[3]), [filter4]"f"(filter[4])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_h4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL4_H4_MMI(%[src], %[dst])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter1]"f"(filter[1]), [filter2]"f"(filter[2]),

[filter3]"f"(filter[3]), [filter4]"f"(filter[4])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_h6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_H6_MMI(%[src], %[dst])

PTR_ADDIU "%[src1], %[src], 0x08 \n\t"

PTR_ADDIU "%[dst1], %[dst], 0x08 \n\t"

PUT_VP8_EPEL8_H6_MMI(%[src1], %[dst1])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[dst1]"=&amp;r"(dst1), [src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter0]"f"(filter[0]), [filter1]"f"(filter[1]),

[filter2]"f"(filter[2]), [filter3]"f"(filter[3]),

[filter4]"f"(filter[4]), [filter5]"f"(filter[5])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_h6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_H6_MMI(%[src], %[dst])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter0]"f"(filter[0]), [filter1]"f"(filter[1]),

[filter2]"f"(filter[2]), [filter3]"f"(filter[3]),

[filter4]"f"(filter[4]), [filter5]"f"(filter[5])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_h6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL4_H6_MMI(%[src], %[dst])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter0]"f"(filter[0]), [filter1]"f"(filter[1]),

[filter2]"f"(filter[2]), [filter3]"f"(filter[3]),

[filter4]"f"(filter[4]), [filter5]"f"(filter[5])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_V4_MMI(%[src], %[src1], %[dst], %[srcstride])

PTR_ADDIU "%[src0], %[src], 0x08 \n\t"

PTR_ADDIU "%[dst0], %[dst], 0x08 \n\t"

PUT_VP8_EPEL8_V4_MMI(%[src0], %[src1], %[dst], %[srcstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[src0]"=&amp;r"(src0), [dst0]"=&amp;r"(dst0),

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter1]"f"(filter[1]), [filter2]"f"(filter[2]),

[filter3]"f"(filter[3]), [filter4]"f"(filter[4])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_V4_MMI(%[src], %[src1], %[dst], %[srcstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter1]"f"(filter[1]), [filter2]"f"(filter[2]),

[filter3]"f"(filter[3]), [filter4]"f"(filter[4])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL4_V4_MMI(%[src], %[src1], %[dst], %[srcstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter1]"f"(filter[1]), [filter2]"f"(filter[2]),

[filter3]"f"(filter[3]), [filter4]"f"(filter[4])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_V6_MMI(%[src], %[src1], %[dst], %[srcstride])

PTR_ADDIU "%[src0], %[src], 0x08 \n\t"

PTR_ADDIU "%[dst0], %[dst], 0x08 \n\t"

PUT_VP8_EPEL8_V6_MMI(%[src0], %[src1], %[dst0], %[srcstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[src0]"=&amp;r"(src0), [dst0]"=&amp;r"(dst0),

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter0]"f"(filter[0]), [filter1]"f"(filter[1]),

[filter2]"f"(filter[2]), [filter3]"f"(filter[3]),

[filter4]"f"(filter[4]), [filter5]"f"(filter[5])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL8_V6_MMI(%[src], %[src1], %[dst], %[srcstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter0]"f"(filter[0]), [filter1]"f"(filter[1]),

[filter2]"f"(filter[2]), [filter3]"f"(filter[3]),

[filter4]"f"(filter[4]), [filter5]"f"(filter[5])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>fourtap_subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x07 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"1: \n\t"

PUT_VP8_EPEL4_V6_MMI(%[src], %[src1], %[dst], %[srcstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[srcstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dststride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)

: [ff_pw_64]"f"(ff_pw_64),

[srcstride]"r"((mips_reg)srcstride),

[dststride]"r"((mips_reg)dststride),

[filter0]"f"(filter[0]), [filter1]"f"(filter[1]),

[filter2]"f"(filter[2]), [filter3]"f"(filter[3]),

[filter4]"f"(filter[4]), [filter5]"f"(filter[5])

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_h4v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">560</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_h4_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_v4_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">560</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_h4v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">152</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_h4_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_v4_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">152</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_h4v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_h4_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_v4_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_h4v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">592</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_h4_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_v6_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">592</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_h4v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">168</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_h4_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_v6_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">168</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_h4v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_h4_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_v6_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_h6v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">560</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_h6_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_v4_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">560</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_h6v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">152</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_h6_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_v4_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">152</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_h6v4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_h6_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_v4_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_4TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel16_h6v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">592</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_h6_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel16_v6_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">592</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel8_h6v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">168</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_h6_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel8_v6_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">168</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_epel4_h6v6_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_h6_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_epel4_v6_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dststride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>subpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>subpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_6TAP</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear16_h_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>src0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"pshufh %[a], %[a], %[ftmp0] \n\t"

"pshufh %[b], %[b], %[ftmp0] \n\t"

"1: \n\t"

PUT_VP8_BILINEAR8_H_MMI(%[src], %[dst])

PTR_ADDIU "%[src0], %[src], 0x08 \n\t"

PTR_ADDIU "%[dst0], %[dst], 0x08 \n\t"

PUT_VP8_BILINEAR8_H_MMI(%[src0], %[dst0])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[sstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dstride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[dst0]"=&amp;r"(dst0), [src0]"=&amp;r"(src0),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[a]"+&amp;f"(a), [b]"+&amp;f"(b)

: [sstride]"r"((mips_reg)sstride),

[dstride]"r"((mips_reg)dstride),

[ff_pw_4]"f"(ff_pw_4)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear16_v_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"pshufh %[c], %[c], %[ftmp0] \n\t"

"pshufh %[d], %[d], %[ftmp0] \n\t"

"1: \n\t"

PUT_VP8_BILINEAR8_V_MMI(%[src], %[src1], %[dst], %[sstride])

PTR_ADDIU "%[src0], %[src], 0x08 \n\t"

PTR_ADDIU "%[dst0], %[dst], 0x08 \n\t"

PUT_VP8_BILINEAR8_V_MMI(%[src0], %[src1], %[dst0], %[sstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[sstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dstride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[src0]"=&amp;r"(src0), [dst0]"=&amp;r"(dst0),

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[c]"+&amp;f"(c), [d]"+&amp;f"(d)

: [sstride]"r"((mips_reg)sstride),

[dstride]"r"((mips_reg)dstride),

[ff_pw_4]"f"(ff_pw_4)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>sstride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear16_hv_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">528</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_bilinear16_h_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_bilinear16_v_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">528</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear8_h_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"pshufh %[a], %[a], %[ftmp0] \n\t"

"pshufh %[b], %[b], %[ftmp0] \n\t"

"1: \n\t"

PUT_VP8_BILINEAR8_H_MMI(%[src], %[dst])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[sstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dstride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[a]"+&amp;f"(a), [b]"+&amp;f"(b)

: [sstride]"r"((mips_reg)sstride),

[dstride]"r"((mips_reg)dstride),

[ff_pw_4]"f"(ff_pw_4)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear8_v_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"pshufh %[c], %[c], %[ftmp0] \n\t"

"pshufh %[d], %[d], %[ftmp0] \n\t"

"1: \n\t"

PUT_VP8_BILINEAR8_V_MMI(%[src], %[src1], %[dst], %[sstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[sstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dstride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_ALL64

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[c]"+&amp;f"(c), [d]"+&amp;f"(d)

: [sstride]"r"((mips_reg)sstride),

[dstride]"r"((mips_reg)dstride),

[ff_pw_4]"f"(ff_pw_4)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>sstride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear8_hv_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">136</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_bilinear8_h_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_bilinear8_v_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">136</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear4_h_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"pshufh %[a], %[a], %[ftmp0] \n\t"

"pshufh %[b], %[b], %[ftmp0] \n\t"

"1: \n\t"

PUT_VP8_BILINEAR4_H_MMI(%[src], %[dst])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[sstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dstride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

RESTRICT_ASM_ALL64

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[a]"+&amp;f"(a), [b]"+&amp;f"(b)

: [sstride]"r"((mips_reg)sstride),

[dstride]"r"((mips_reg)dstride),

[ff_pw_4]"f"(ff_pw_4)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear4_v_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>src1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"li %[tmp0], 0x03 \n\t"

"mtc1 %[tmp0], %[ftmp4] \n\t"

"pshufh %[c], %[c], %[ftmp0] \n\t"

"pshufh %[d], %[d], %[ftmp0] \n\t"

"1: \n\t"

PUT_VP8_BILINEAR4_V_MMI(%[src], %[src1], %[dst], %[sstride])

"addiu %[h], %[h], -0x01 \n\t"

PTR_ADDU "%[src], %[src], %[sstride] \n\t"

PTR_ADDU "%[dst], %[dst], %[dstride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]),

[tmp0]"=&amp;r"(tmp[0]),

RESTRICT_ASM_LOW32

RESTRICT_ASM_ALL64

[src1]"=&amp;r"(src1),

[h]"+&amp;r"(h),

[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),

[c]"+&amp;f"(c), [d]"+&amp;f"(d)

: [sstride]"r"((mips_reg)sstride),

[dstride]"r"((mips_reg)dstride),

[ff_pw_4]"f"(ff_pw_4)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>sstride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vp8_bilinear4_hv_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp_array</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_bilinear4_h_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_vp8_bilinear4_v_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstride</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>my</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>my</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_array</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
