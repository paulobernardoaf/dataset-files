<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\acelp_vectors_mips.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_weighted_vector_sumf_mips</name><parameter_list>(

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in_b</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>weight_coeff_a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>weight_coeff_b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a_end</name> <init>= <expr><name>in_a</name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"blez %[length], ff_weighted_vector_sumf_end%= \n\t"

"ff_weighted_vector_sumf_madd%=: \n\t"

"lwc1 $f0, 0(%[in_a]) \n\t"

"lwc1 $f3, 4(%[in_a]) \n\t"

"lwc1 $f1, 0(%[in_b]) \n\t"

"lwc1 $f4, 4(%[in_b]) \n\t"

"mul.s $f2, %[weight_coeff_a], $f0 \n\t"

"mul.s $f5, %[weight_coeff_a], $f3 \n\t"

"madd.s $f2, $f2, %[weight_coeff_b], $f1 \n\t"

"madd.s $f5, $f5, %[weight_coeff_b], $f4 \n\t"

PTR_ADDIU "%[in_a],8 \n\t"

PTR_ADDIU "%[in_b],8 \n\t"

"swc1 $f2, 0(%[out]) \n\t"

"swc1 $f5, 4(%[out]) \n\t"

PTR_ADDIU "%[out], 8 \n\t"

"bne %[in_a], %[a_end], ff_weighted_vector_sumf_madd%= \n\t"

"ff_weighted_vector_sumf_end%=: \n\t"

: [out] "+r" (out), [in_a] "+r" (in_a), [in_b] "+r" (in_b)

: [weight_coeff_a] "f" (weight_coeff_a),

[weight_coeff_b] "f" (weight_coeff_b),

[length] "r" (length), [a_end]"r"(a_end)

: "$f0", "$f1", "$f2", "$f3", "$f4", "$f5", "memory"

);</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_acelp_vectors_init_mips</name><parameter_list>(<parameter><decl><type><name>ACELPVContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weighted_vector_sumf</name></name> <operator>=</operator> <name>ff_weighted_vector_sumf_mips</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
