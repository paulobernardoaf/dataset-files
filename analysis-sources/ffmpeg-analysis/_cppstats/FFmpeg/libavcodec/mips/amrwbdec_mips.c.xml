<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\amrwbdec_mips.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/amrwbdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amrwbdec_mips.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<function><type><name>void</name></type> <name>ff_hb_fir_filter_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>fir_coef</name><index>[<expr><name>HB_FIR_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name><name>mem</name><index>[<expr><name>HB_FIR_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>data</name><index>[<expr><name>AMRWB_SFR_SIZE_16k</name> <operator>+</operator> <name>HB_FIR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>HB_FIR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>HB_FIR_SIZE</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_data</name> <init>= <expr><operator>(</operator><name>data</name><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"mtc1 $zero, %[output] \n\t"

"lwc1 $f0, 0(%[p_data]) \n\t"

"lwc1 $f1, 0(%[fir_coef]) \n\t"

"lwc1 $f2, 4(%[p_data]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f3, 4(%[fir_coef]) \n\t"

"lwc1 $f4, 8(%[p_data]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f5, 8(%[fir_coef]) \n\t"

"lwc1 $f0, 12(%[p_data]) \n\t"

"lwc1 $f1, 12(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f2, 16(%[p_data]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f3, 16(%[fir_coef]) \n\t"

"lwc1 $f4, 20(%[p_data]) \n\t"

"lwc1 $f5, 20(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f0, 24(%[p_data]) \n\t"

"lwc1 $f1, 24(%[fir_coef]) \n\t"

"lwc1 $f2, 28(%[p_data]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f3, 28(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f4, 32(%[p_data]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f5, 32(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f0, 36(%[p_data]) \n\t"

"lwc1 $f1, 36(%[fir_coef]) \n\t"

"lwc1 $f2, 40(%[p_data]) \n\t"

"lwc1 $f3, 40(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f4, 44(%[p_data]) \n\t"

"lwc1 $f5, 44(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f0, 48(%[p_data]) \n\t"

"lwc1 $f1, 48(%[fir_coef]) \n\t"

"lwc1 $f2, 52(%[p_data]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f3, 52(%[fir_coef]) \n\t"

"lwc1 $f4, 56(%[p_data]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f5, 56(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f0, 60(%[p_data]) \n\t"

"lwc1 $f1, 60(%[fir_coef]) \n\t"

"lwc1 $f2, 64(%[p_data]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f3, 64(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f4, 68(%[p_data]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f5, 68(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f0, 72(%[p_data]) \n\t"

"lwc1 $f1, 72(%[fir_coef]) \n\t"

"lwc1 $f2, 76(%[p_data]) \n\t"

"lwc1 $f3, 76(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f4, 80(%[p_data]) \n\t"

"lwc1 $f5, 80(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f0, 84(%[p_data]) \n\t"

"lwc1 $f1, 84(%[fir_coef]) \n\t"

"lwc1 $f2, 88(%[p_data]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f3, 88(%[fir_coef]) \n\t"

"lwc1 $f4, 92(%[p_data]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f5, 92(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f0, 96(%[p_data]) \n\t"

"lwc1 $f1, 96(%[fir_coef]) \n\t"

"lwc1 $f2, 100(%[p_data]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f3, 100(%[fir_coef]) \n\t"

"lwc1 $f4, 104(%[p_data]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f5, 104(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f0, 108(%[p_data]) \n\t"

"lwc1 $f1, 108(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"lwc1 $f2, 112(%[p_data]) \n\t"

"lwc1 $f3, 112(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

"lwc1 $f4, 116(%[p_data]) \n\t"

"lwc1 $f5, 116(%[fir_coef]) \n\t"

"lwc1 $f0, 120(%[p_data]) \n\t"

"madd.s %[output], %[output], $f2, $f3 \n\t"

"lwc1 $f1, 120(%[fir_coef]) \n\t"

"madd.s %[output], %[output], $f4, $f5 \n\t"

"madd.s %[output], %[output], $f0, $f1 \n\t"

: [output]"=&amp;f"(output)

: [fir_coef]"r"(fir_coef), [p_data]"r"(p_data)

: "$f0", "$f1", "$f2", "$f3", "$f4", "$f5", "memory"

);</asm>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>AMRWB_SFR_SIZE_16k</name></expr></argument>, <argument><expr><name>HB_FIR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
