<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\constants.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0001000100010001ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_2</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0002000200020002ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0003000300030003ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_4</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0004000400040004ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_5</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0005000500050005ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_6</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0006000600060006ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_8</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0008000800080008ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_9</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0009000900090009ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_10</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x000A000A000A000AULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_12</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x000C000C000C000CULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_15</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x000F000F000F000FULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_16</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0010001000100010ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_17</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0011001100110011ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_18</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0012001200120012ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_20</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0014001400140014ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_22</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0016001600160016ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_28</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x001C001C001C001CULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_32</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0020002000200020ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_53</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0035003500350035ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_64</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0040004000400040ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_128</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0080008000800080ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_512</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0200020002000200ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_m8tom5</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0xFFFBFFFAFFF9FFF8ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_m4tom1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0xFFFFFFFEFFFDFFFCULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_1to4</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0004000300020001ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_5to8</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0008000700060005ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_0to3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0003000200010000ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_4to7</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0007000600050004ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_8tob</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x000b000a00090008ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_ctof</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x000f000e000d000cULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pb_1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0101010101010101ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pb_3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0303030303030303ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pb_80</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x8080808080808080ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pb_A1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0xA1A1A1A1A1A1A1A1ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pb_FE</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0xFEFEFEFEFEFEFEFEULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_rnd</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0004000400040004ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_rnd2</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0040004000400040ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_rnd3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0020002000200020ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_wm1010</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0xFFFF0000FFFF0000ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_d40000</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000000040000ULL</literal></expr>}</block></expr>;</expr_stmt>

</unit>
