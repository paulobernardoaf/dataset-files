<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\me_cmp_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp_mips.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>,

<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_horiz_bilinear_filter_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>comp0</name></decl>, <decl><type ref="prev"/><name>comp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>, <decl><type ref="prev"/><name>ref4</name></decl>, <decl><type ref="prev"/><name>ref5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref5</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref5</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_horiz_bilinear_filter_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>comp0</name></decl>, <decl><type ref="prev"/><name>comp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref00</name></decl>, <decl><type ref="prev"/><name>ref10</name></decl>, <decl><type ref="prev"/><name>ref20</name></decl>, <decl><type ref="prev"/><name>ref30</name></decl>, <decl><type ref="prev"/><name>ref01</name></decl>, <decl><type ref="prev"/><name>ref11</name></decl>, <decl><type ref="prev"/><name>ref21</name></decl>, <decl><type ref="prev"/><name>ref31</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>ref20</name></expr></argument>, <argument><expr><name>ref30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref21</name></expr></argument>, <argument><expr><name>ref31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref21</name></expr></argument>, <argument><expr><name>ref20</name></expr></argument>, <argument><expr><name>ref31</name></expr></argument>, <argument><expr><name>ref30</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>ref20</name></expr></argument>, <argument><expr><name>ref30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref21</name></expr></argument>, <argument><expr><name>ref31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref21</name></expr></argument>, <argument><expr><name>ref20</name></expr></argument>, <argument><expr><name>ref31</name></expr></argument>, <argument><expr><name>ref30</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_vert_bilinear_filter_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>comp0</name></decl>, <decl><type ref="prev"/><name>comp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>, <decl><type ref="prev"/><name>ref4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_vert_bilinear_filter_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>comp0</name></decl>, <decl><type ref="prev"/><name>comp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>, <decl><type ref="prev"/><name>ref4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref4</name> <operator>=</operator> <name>ref3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>SAD_UB2_UH</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_hv_bilinear_filter_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>, <decl><type ref="prev"/><name>ref4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>comp0</name></decl>, <decl><type ref="prev"/><name>comp1</name></decl>, <decl><type ref="prev"/><name>comp2</name></decl>, <decl><type ref="prev"/><name>comp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>+=</operator> <name>comp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>comp0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>ref1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>+=</operator> <name>comp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>comp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>ref2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>ref2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>+=</operator> <name>comp3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>comp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>ref3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>+=</operator> <name>comp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>comp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>comp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sad_hv_bilinear_filter_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref00</name></decl>, <decl><type ref="prev"/><name>ref01</name></decl>, <decl><type ref="prev"/><name>ref02</name></decl>, <decl><type ref="prev"/><name>ref03</name></decl>, <decl><type ref="prev"/><name>ref04</name></decl>, <decl><type ref="prev"/><name>ref10</name></decl>, <decl><type ref="prev"/><name>ref11</name></decl>, <decl><type ref="prev"/><name>ref12</name></decl>, <decl><type ref="prev"/><name>ref13</name></decl>, <decl><type ref="prev"/><name>ref14</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>comp0</name></decl>, <decl><type ref="prev"/><name>comp1</name></decl>, <decl><type ref="prev"/><name>comp2</name></decl>, <decl><type ref="prev"/><name>comp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>sad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref04</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>ref02</name></expr></argument>, <argument><expr><name>ref03</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref14</name></expr></argument>, <argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref12</name></expr></argument>, <argument><expr><name>ref13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref14</name></expr></argument>, <argument><expr><name>ref04</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>+=</operator> <name>comp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>+=</operator> <name>comp3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>+=</operator> <name>comp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>+=</operator> <name>comp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp2</name></expr></argument>, <argument><expr><name>comp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref12</name></expr></argument>, <argument><expr><name>ref02</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>+=</operator> <name>comp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>+=</operator> <name>comp3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref13</name></expr></argument>, <argument><expr><name>ref03</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>+=</operator> <name>comp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>+=</operator> <name>comp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp2</name></expr></argument>, <argument><expr><name>comp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>ref02</name></expr></argument>, <argument><expr><name>ref03</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref12</name></expr></argument>, <argument><expr><name>ref13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref10</name></expr></argument>, <argument><expr><name>ref00</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>+=</operator> <name>comp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>+=</operator> <name>comp3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref11</name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>+=</operator> <name>comp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>+=</operator> <name>comp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp2</name></expr></argument>, <argument><expr><name>comp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref12</name></expr></argument>, <argument><expr><name>ref02</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>+=</operator> <name>comp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>+=</operator> <name>comp3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp0</name></expr></argument>, <argument><expr><name>comp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>ref13</name></expr></argument>, <argument><expr><name>ref03</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp0</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp1</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp2</name> <operator>+=</operator> <name>comp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp3</name> <operator>+=</operator> <name>comp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>comp2</name></expr></argument>, <argument><expr><name>comp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>comp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_MSE_B</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16u8 src_l0_m, src_l1_m; v8i16 res_l0_m, res_l1_m; ILVRL_B2_UB(src, ref, src_l0_m, src_l1_m); HSUB_UB2_SH(src_l0_m, src_l1_m, res_l0_m, res_l1_m); DPADD_SH2_SW(res_l0_m, res_l1_m, res_l0_m, res_l1_m, var, var); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sse_4width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>var</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src_ptr</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>ref_ptr</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_ptr</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sse</name> <operator>=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sse_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>var</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_ptr</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>ref_ptr</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_ptr</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ref_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>,

<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sse</name> <operator>=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sse_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ht_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>var</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ht_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>ht_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_ptr</name> <operator>+=</operator> <name>ref_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_ptr</name> <operator>+=</operator> <name>ref_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_ptr</name> <operator>+=</operator> <name>ref_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_ptr</name> <operator>+=</operator> <name>ref_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_MSE_B</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sse</name> <operator>=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hadamard_diff_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>ref2</name></decl>, <decl><type ref="prev"/><name>ref3</name></decl>, <decl><type ref="prev"/><name>ref4</name></decl>, <decl><type ref="prev"/><name>ref5</name></decl>, <decl><type ref="prev"/><name>ref6</name></decl>, <decl><type ref="prev"/><name>ref7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>sum</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>ref5</name></expr></argument>, <argument><expr><name>ref6</name></expr></argument>, <argument><expr><name>ref7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B8_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>ref3</name></expr></argument>,

<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>ref4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>ref5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>ref6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>ref7</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HSUB_UB4_UH</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HSUB_UB4_UH</name><argument_list>(<argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_UH_UH</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_UH_UH</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff3</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hadamard_intra_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ref_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sum_res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>sum</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_UB_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,

<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B8_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,

<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_UH_UH</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>,

<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>,

<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_asub_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff1</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff2</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>diff3</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_res</name> <operator>=</operator> <operator>(</operator><call><name>HADD_UH_U32</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_res</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>temp0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>temp4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sum_res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs16_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs8_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs16_x2_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_horiz_bilinear_filter_16width_msa</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs16_y2_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_vert_bilinear_filter_16width_msa</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs16_xy2_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_hv_bilinear_filter_16width_msa</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs8_x2_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_horiz_bilinear_filter_8width_msa</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs8_y2_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_vert_bilinear_filter_8width_msa</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pix_abs8_xy2_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sad_hv_bilinear_filter_8width_msa</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_sse16_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sse_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_sse8_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sse_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_sse4_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sse_4width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hadamard8_diff8x8_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hadamard_diff_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hadamard8_intra8x8_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hadamard_intra_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAPPER8_16_SQ</name><parameter_list>(<parameter><type><name>name8</name></type></parameter>, <parameter><type><name>name16</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int name16(MpegEncContext *s, uint8_t *dst, uint8_t *src, ptrdiff_t stride, int h) { int score = 0; score += name8(s, dst, src, stride, 8); score += name8(s, dst + 8, src + 8, stride, 8); if(h == 16) { dst += 8 * stride; src += 8 * stride; score +=name8(s, dst, src, stride, 8); score +=name8(s, dst + 8, src + 8, stride, 8); } return score; }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>WRAPPER8_16_SQ</name><argument_list>(<argument><expr><name>ff_hadamard8_diff8x8_msa</name></expr></argument>, <argument><expr><name>ff_hadamard8_diff16_msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRAPPER8_16_SQ</name><argument_list>(<argument><expr><name>ff_hadamard8_intra8x8_msa</name></expr></argument>, <argument><expr><name>ff_hadamard8_intra16_msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</unit>
