<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\hevc_lpf_sao_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mips/hevcdsp_mips.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_loopfilter_luma_hor_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_is_pcm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q_is_pcm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>src</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>src</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>src</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><name>src</name> <operator>-</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q0</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q1</name> <init>= <expr><name>src</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q2</name> <init>= <expr><name>src</name> <operator>+</operator> <operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q3</name> <init>= <expr><name>src</name> <operator>+</operator> <operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flag0</name></decl>, <decl><type ref="prev"/><name>flag1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dp00</name></decl>, <decl><type ref="prev"/><name>dq00</name></decl>, <decl><type ref="prev"/><name>dp30</name></decl>, <decl><type ref="prev"/><name>dq30</name></decl>, <decl><type ref="prev"/><name>d00</name></decl>, <decl><type ref="prev"/><name>d30</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>d0030</name></decl>, <decl><type ref="prev"/><name>d0434</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dp04</name></decl>, <decl><type ref="prev"/><name>dq04</name></decl>, <decl><type ref="prev"/><name>dp34</name></decl>, <decl><type ref="prev"/><name>dq34</name></decl>, <decl><type ref="prev"/><name>d04</name></decl>, <decl><type ref="prev"/><name>d34</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tc0</name></decl>, <decl><type ref="prev"/><name>p_is_pcm0</name></decl>, <decl><type ref="prev"/><name>q_is_pcm0</name></decl>, <decl><type ref="prev"/><name>beta30</name></decl>, <decl><type ref="prev"/><name>beta20</name></decl>, <decl><type ref="prev"/><name>tc250</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tc4</name></decl>, <decl><type ref="prev"/><name>p_is_pcm4</name></decl>, <decl><type ref="prev"/><name>q_is_pcm4</name></decl>, <decl><type ref="prev"/><name>tc254</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>cmp0</name></decl>, <decl><type ref="prev"/><name>cmp1</name></decl>, <decl><type ref="prev"/><name>cmp2</name></decl>, <decl><type ref="prev"/><name>p_is_pcm_vec</name></decl>, <decl><type ref="prev"/><name>q_is_pcm_vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>cmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>temp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_pos</name></decl>, <decl><type ref="prev"/><name>tc_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>delta0</name></decl>, <decl><type ref="prev"/><name>delta1</name></decl>, <decl><type ref="prev"/><name>delta2</name></decl>, <decl><type ref="prev"/><name>abs_delta0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>p3_src</name></decl>, <decl><type ref="prev"/><name>p2_src</name></decl>, <decl><type ref="prev"/><name>p1_src</name></decl>, <decl><type ref="prev"/><name>p0_src</name></decl>, <decl><type ref="prev"/><name>q0_src</name></decl>, <decl><type ref="prev"/><name>q1_src</name></decl>, <decl><type ref="prev"/><name>q2_src</name></decl>, <decl><type ref="prev"/><name>q3_src</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dp00</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq00</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>q1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>q0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp30</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq30</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>q1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>q0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d00</name> <operator>=</operator> <name>dp00</name> <operator>+</operator> <name>dq00</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d30</name> <operator>=</operator> <name>dp30</name> <operator>+</operator> <name>dq30</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp04</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq04</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>q1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>q0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp34</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq34</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>q1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>q0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d04</name> <operator>=</operator> <name>dp04</name> <operator>+</operator> <name>dq04</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d34</name> <operator>=</operator> <name>dp34</name> <operator>+</operator> <name>dq34</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm0</name> <operator>=</operator> <name><name>p_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm4</name> <operator>=</operator> <name><name>p_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm0</name> <operator>=</operator> <name><name>q_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm4</name> <operator>=</operator> <name><name>q_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>p_is_pcm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>p_is_pcm4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>p_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d0030</name> <operator>=</operator> <operator>(</operator><name>d00</name> <operator>+</operator> <name>d30</name><operator>)</operator> <operator>&gt;=</operator> <name>beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0434</name> <operator>=</operator> <operator>(</operator><name>d04</name> <operator>+</operator> <name>d34</name><operator>)</operator> <operator>&gt;=</operator> <name>beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>d0030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>d0434</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp3</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_ilvev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>cmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp3</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_ceqi_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>cmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>p_is_pcm0</name> <operator>||</operator> <operator>!</operator><name>p_is_pcm4</name> <operator>||</operator> <operator>!</operator><name>q_is_pcm0</name> <operator>||</operator> <operator>!</operator><name>q_is_pcm4</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>d0030</name> <operator>||</operator> <operator>!</operator><name>d0434</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p3_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>q_is_pcm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>q_is_pcm4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>q_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc0</name> <operator>=</operator> <name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>beta30</name> <operator>=</operator> <name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta20</name> <operator>=</operator> <name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc250</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tc0</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tc4</name> <operator>=</operator> <name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tc254</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tc4</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>tc4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>,

<argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q3_src</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag0</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc250</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag0</name> <operator>=</operator> <name>flag0</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc250</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d00</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>d30</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>,

<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag1</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc254</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag1</name> <operator>=</operator> <name>flag1</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>q3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>q0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc254</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d04</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>d34</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>flag0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>flag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp2</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_ilvev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>cmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp2</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_ceqi_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>cmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag0</name> <operator>&amp;&amp;</operator> <name>flag1</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tc_pos</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>p1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p3_src</name> <operator>+</operator> <name>p2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>p2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>q1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>q3_src</name> <operator>+</operator> <name>q2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>q2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p1_src</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>p2</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>p2</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag0</name> <operator>==</operator> <name>flag1</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q1_src</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>diff0</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>diff0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>diff1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <name>diff0</name> <operator>-</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <name>abs_delta0</name> <operator>&lt;</operator> <name>temp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>delta0</name> <operator>+</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>delta0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <operator>~</operator><name>p_is_pcm_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <operator>~</operator><name>q_is_pcm_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>beta</name> <operator>+</operator> <operator>(</operator><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dp00</name> <operator>+</operator> <name>dp30</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dp04</name> <operator>+</operator> <name>dp34</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>cmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <name>p_is_pcm_vec</name> <operator>|</operator> <name>cmp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dq00</name> <operator>+</operator> <name>dq30</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dq04</name> <operator>+</operator> <name>dq34</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>cmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <name>q_is_pcm_vec</name> <operator>|</operator> <name>cmp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>-=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>+=</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>p0_src</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>tc_pos</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>p1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p3_src</name> <operator>+</operator> <name>p2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>p2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>q1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>q3_src</name> <operator>+</operator> <name>q2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>q2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p1_src</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q1_src</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>diff0</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>diff0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>diff1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <name>diff0</name> <operator>-</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <name>abs_delta0</name> <operator>&lt;</operator> <name>temp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>delta0</name> <operator>+</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>delta0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <operator>~</operator><name>p_is_pcm_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <operator>~</operator><name>q_is_pcm_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>beta</name> <operator>+</operator> <operator>(</operator><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dp00</name> <operator>+</operator> <name>dp30</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dp04</name> <operator>+</operator> <name>dp34</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <name>p_is_pcm_vec</name> <operator>|</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>cmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dq00</name> <operator>+</operator> <name>dq30</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>dq04</name> <operator>+</operator> <name>dq34</name> <operator>&lt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <name>q_is_pcm_vec</name> <operator>|</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>cmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>-=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>+=</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>delta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>p2</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>p2</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_loopfilter_luma_ver_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_is_pcm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q_is_pcm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>src</name> <operator>+</operator> <operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><name>src</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flag0</name></decl>, <decl><type ref="prev"/><name>flag1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dp00</name></decl>, <decl><type ref="prev"/><name>dq00</name></decl>, <decl><type ref="prev"/><name>dp30</name></decl>, <decl><type ref="prev"/><name>dq30</name></decl>, <decl><type ref="prev"/><name>d00</name></decl>, <decl><type ref="prev"/><name>d30</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>d0030</name></decl>, <decl><type ref="prev"/><name>d0434</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dp04</name></decl>, <decl><type ref="prev"/><name>dq04</name></decl>, <decl><type ref="prev"/><name>dp34</name></decl>, <decl><type ref="prev"/><name>dq34</name></decl>, <decl><type ref="prev"/><name>d04</name></decl>, <decl><type ref="prev"/><name>d34</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tc0</name></decl>, <decl><type ref="prev"/><name>p_is_pcm0</name></decl>, <decl><type ref="prev"/><name>q_is_pcm0</name></decl>, <decl><type ref="prev"/><name>beta30</name></decl>, <decl><type ref="prev"/><name>beta20</name></decl>, <decl><type ref="prev"/><name>tc250</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tc4</name></decl>, <decl><type ref="prev"/><name>p_is_pcm4</name></decl>, <decl><type ref="prev"/><name>q_is_pcm4</name></decl>, <decl><type ref="prev"/><name>tc254</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>cmp0</name></decl>, <decl><type ref="prev"/><name>cmp1</name></decl>, <decl><type ref="prev"/><name>cmp2</name></decl>, <decl><type ref="prev"/><name>p_is_pcm_vec</name></decl>, <decl><type ref="prev"/><name>q_is_pcm_vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>cmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>temp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_pos</name></decl>, <decl><type ref="prev"/><name>tc_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>delta0</name></decl>, <decl><type ref="prev"/><name>delta1</name></decl>, <decl><type ref="prev"/><name>delta2</name></decl>, <decl><type ref="prev"/><name>abs_delta0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>p3_src</name></decl>, <decl><type ref="prev"/><name>p2_src</name></decl>, <decl><type ref="prev"/><name>p1_src</name></decl>, <decl><type ref="prev"/><name>p0_src</name></decl>, <decl><type ref="prev"/><name>q0_src</name></decl>, <decl><type ref="prev"/><name>q1_src</name></decl>, <decl><type ref="prev"/><name>q2_src</name></decl>, <decl><type ref="prev"/><name>q3_src</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dp00</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p3</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p3</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq00</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp30</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq30</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d00</name> <operator>=</operator> <name>dp00</name> <operator>+</operator> <name>dq00</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d30</name> <operator>=</operator> <name>dp30</name> <operator>+</operator> <name>dq30</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm0</name> <operator>=</operator> <name><name>p_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm0</name> <operator>=</operator> <name><name>q_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp04</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq04</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp34</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dq34</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d04</name> <operator>=</operator> <name>dp04</name> <operator>+</operator> <name>dq04</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d34</name> <operator>=</operator> <name>dp34</name> <operator>+</operator> <name>dq34</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm4</name> <operator>=</operator> <name><name>p_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm4</name> <operator>=</operator> <name><name>q_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>p_is_pcm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>p_is_pcm4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>p_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d0030</name> <operator>=</operator> <operator>(</operator><name>d00</name> <operator>+</operator> <name>d30</name><operator>)</operator> <operator>&gt;=</operator> <name>beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0434</name> <operator>=</operator> <operator>(</operator><name>d04</name> <operator>+</operator> <name>d34</name><operator>)</operator> <operator>&gt;=</operator> <name>beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>d0030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>d0434</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp3</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp3</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>cmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>p_is_pcm0</name> <operator>||</operator> <operator>!</operator><name>p_is_pcm4</name> <operator>||</operator> <operator>!</operator><name>q_is_pcm0</name> <operator>||</operator> <operator>!</operator><name>q_is_pcm4</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>d0030</name> <operator>||</operator> <operator>!</operator><name>d0434</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UH8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>,

<argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>q_is_pcm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>q_is_pcm4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>q_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc0</name> <operator>=</operator> <name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>beta30</name> <operator>=</operator> <name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta20</name> <operator>=</operator> <name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc250</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tc0</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tc4</name> <operator>=</operator> <name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tc254</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tc4</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>tc0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>tc4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_UB_UH</name><argument_list>(<argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>,

<argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>, <argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>,

<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag0</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>p3</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc250</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag0</name> <operator>=</operator> <name>flag0</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc250</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d00</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>d30</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>flag0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>,

<argument><expr><name>p3_src</name></expr></argument>, <argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p1_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag1</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc254</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag1</name> <operator>=</operator> <name>flag1</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta30</name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>p0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc254</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d04</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>d34</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta20</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>,

<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q1_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>, <argument><expr><name>q3_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name>flag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp2</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp2</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>cmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag0</name> <operator>&amp;&amp;</operator> <name>flag1</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>p1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p3_src</name> <operator>+</operator> <name>p2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>p2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>q1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>q3_src</name> <operator>+</operator> <name>q2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>q2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p1_src</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag0</name> <operator>==</operator> <name>flag1</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q1_src</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>diff0</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>diff0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>diff1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <name>diff0</name> <operator>-</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <name>abs_delta0</name> <operator>&lt;</operator> <name>temp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>delta0</name> <operator>+</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>delta0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>beta</name> <operator>+</operator> <operator>(</operator><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><operator>!</operator><name>p_is_pcm0</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dp00</name> <operator>+</operator> <name>dp30</name><operator>)</operator> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><operator>!</operator><name>p_is_pcm4</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dp04</name> <operator>+</operator> <name>dp34</name><operator>)</operator> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>p_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>q_is_pcm0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dq00</name> <operator>+</operator> <name>dq30</name> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>q_is_pcm4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dq04</name> <operator>+</operator> <name>dq34</name> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>q_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>-=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>+=</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_UB</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>p1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p3_src</name> <operator>+</operator> <name>p2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>p2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p2_src</name> <operator>+</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>q1_src</name> <operator>+</operator> <name>p0_src</name> <operator>+</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>q3_src</name> <operator>+</operator> <name>q2_src</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>q2_src</name> <operator>+</operator> <name>temp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q2_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp0</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>temp0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>p1_src</name> <operator>+</operator> <name>q2_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>temp1</name> <operator>-</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>temp2</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q1_src</name> <operator>-</operator> <name>p1_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>diff0</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>diff0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>diff1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <name>diff0</name> <operator>-</operator> <name>diff1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>tc_pos</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <call><name>__msa_add_a_h</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <name>abs_delta0</name> <operator>&lt;</operator> <name>temp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>delta0</name> <operator>+</operator> <name>p0_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0_src</name> <operator>-</operator> <name>delta0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>beta</name> <operator>+</operator> <operator>(</operator><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><operator>!</operator><name>p_is_pcm0</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dp00</name> <operator>+</operator> <name>dp30</name><operator>)</operator> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><operator>!</operator><name>p_is_pcm4</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dp04</name> <operator>+</operator> <name>dp34</name><operator>)</operator> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>p_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>q_is_pcm0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dq00</name> <operator>+</operator> <name>dq30</name> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>q_is_pcm4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dq04</name> <operator>+</operator> <name>dq34</name> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>q_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>p2_src</name></expr></argument>, <argument><expr><name>p0_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>-=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>+=</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>p1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_h</name><argument_list>(<argument><expr><name>q0_src</name></expr></argument>, <argument><expr><name>q2_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>-</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>delta2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>q1_src</name> <operator>+</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>delta2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>delta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>abs_delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>delta2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q1_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q2_src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>cmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,

<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_UB</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_UB</name><argument_list>(<argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_loopfilter_chroma_hor_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_is_pcm</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q_is_pcm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1_ptr</name> <init>= <expr><name>src</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0_ptr</name> <init>= <expr><name>src</name> <operator>-</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q0_ptr</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q1_ptr</name> <init>= <expr><name>src</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>cmp0</name></decl>, <decl><type ref="prev"/><name>cmp1</name></decl>, <decl><type ref="prev"/><name>p_is_pcm_vec</name></decl>, <decl><type ref="prev"/><name>q_is_pcm_vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_pos</name></decl>, <decl><type ref="prev"/><name>tc_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>p_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>p_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>p_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>q_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>q_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>q_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>p1_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>p0_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>q0_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <call><name>LD_UH</name><argument_list>(<argument><expr><name>q1_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <name>q1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>+=</operator> <name>temp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>v8i16</name><operator>)</operator> <name>p0</name> <operator>+</operator> <name>delta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>v8i16</name><operator>)</operator> <name>q0</name> <operator>-</operator> <name>delta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_clei_s_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tc_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p0_ptr</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_loopfilter_chroma_ver_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_is_pcm</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q_is_pcm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v2i64</name></type> <name>cmp0</name></decl>, <decl><type ref="prev"/><name>cmp1</name></decl>, <decl><type ref="prev"/><name>p_is_pcm_vec</name></decl>, <decl><type ref="prev"/><name>q_is_pcm_vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_pos</name></decl>, <decl><type ref="prev"/><name>tc_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <operator>(</operator><name>v2i64</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_neg</name> <operator>=</operator> <operator>-</operator><name>tc_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>p_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>p_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>p_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp0</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>q_is_pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp1</name> <operator>=</operator> <call><name>__msa_fill_d</name><argument_list>(<argument><expr><name><name>q_is_pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ilvev_d</name><argument_list>(<argument><expr><name>cmp1</name></expr></argument>, <argument><expr><name>cmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_is_pcm_vec</name> <operator>=</operator> <call><name>__msa_ceqi_d</name><argument_list>(<argument><expr><name>q_is_pcm_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x4_UB_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,

<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <name>q1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>+=</operator> <name>temp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>tc_neg</name></expr></argument>, <argument><expr><name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>v8i16</name><operator>)</operator> <name>p0</name> <operator>+</operator> <name>delta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>v8i16</name><operator>)</operator> <name>q0</name> <operator>-</operator> <name>delta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q_is_pcm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_pos</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_clei_s_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tc_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>temp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H8</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_band_filter_4width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>sao_left_class</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>offset_val</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>offset0</name></decl>, <decl><type ref="prev"/><name>offset1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>offset_val</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>, <argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset0</name> <operator>=</operator> <call><name>__msa_sld_b</name><argument_list>(<argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>__msa_sld_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>sao_left_class</name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>sao_left_class</name> <operator>&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVEV_D2_SB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0_r</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ILVEV_D2_SB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0_r</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_band_filter_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>sao_left_class</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>mask0</name></decl>, <decl><type ref="prev"/><name>mask1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>, <decl><type ref="prev"/><name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset0</name></decl>, <decl><type ref="prev"/><name>offset1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>offset_val</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>, <argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset0</name> <operator>=</operator> <call><name>__msa_sld_b</name><argument_list>(<argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>__msa_sld_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>sao_left_class</name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>sao_left_class</name> <operator>&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D2_SB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask0</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask1</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B2_128_SB</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B2_128_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ILVR_D2_SB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask0</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask1</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B2_128_SB</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B2_128_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_band_filter_16multiple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>sao_left_class</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>w_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask0</name></decl>, <decl><type ref="prev"/><name>mask1</name></decl>, <decl><type ref="prev"/><name>mask2</name></decl>, <decl><type ref="prev"/><name>mask3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset0</name></decl>, <decl><type ref="prev"/><name>offset1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>offset_val</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>, <argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset0</name> <operator>=</operator> <call><name>__msa_sld_b</name><argument_list>(<argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>__msa_sld_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>sao_left_class</name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>sao_left_class</name> <operator>&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w_cnt</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>w_cnt</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>w_cnt</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mask0</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask1</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask2</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask3</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,

<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,

<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>w_cnt</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_SB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SB4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>w_cnt</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mask0</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask1</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask2</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask3</name> <operator>=</operator> <call><name>__msa_srli_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>,

<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,

<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_SB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SB4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>w_cnt</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_0degree_4width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>, <decl><type ref="prev"/><name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_plus10</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>src0</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src_minus11</name></expr></argument>,

<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus10</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src_minus11</name></expr></argument>,

<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus10</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_0degree_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src_plus10</name></decl>, <decl><type ref="prev"/><name>src_plus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>,

<argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>==</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_plus10</name> <operator>&lt;</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_UB</name><argument_list>(<argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>==</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_plus10</name> <operator>&lt;</operator> <name>src0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_0degree_16multiple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src_minus1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>sao_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_plus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>diff_plus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_plus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>, <decl><type ref="prev"/><name>diff_plus11</name></decl>, <decl><type ref="prev"/><name>cmp_minus12</name></decl>, <decl><type ref="prev"/><name>cmp_plus12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_minus12</name></decl>, <decl><type ref="prev"/><name>diff_plus12</name></decl>, <decl><type ref="prev"/><name>cmp_minus13</name></decl>, <decl><type ref="prev"/><name>cmp_plus13</name></decl>, <decl><type ref="prev"/><name>diff_minus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_plus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src_minus12</name></decl>, <decl><type ref="prev"/><name>src_minus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>, <decl><type ref="prev"/><name>offset_mask2</name></decl>, <decl><type ref="prev"/><name>offset_mask3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>src_zero2</name></decl>, <decl><type ref="prev"/><name>src_zero3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_plus10</name></decl>, <decl><type ref="prev"/><name>src_plus11</name></decl>, <decl><type ref="prev"/><name>src_plus12</name></decl>, <decl><type ref="prev"/><name>src_plus13</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_minus1</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_minus1</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,

<argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus12</name></expr></argument>, <argument><expr><name>src_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>v_cnt</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_minus1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_ptr</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>v_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_minus1</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>,

<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src_minus12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src_minus13</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero2</name></expr></argument>, <argument><expr><name>src_zero3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>,

<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src_minus12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src_minus13</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>, <argument><expr><name>src_plus12</name></expr></argument>, <argument><expr><name>src_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name> <operator>==</operator> <name>src_minus12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name> <operator>==</operator> <name>src_minus13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus10</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus11</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus12</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus12</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus13</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus13</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><name>src_minus12</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus12</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><name>src_minus13</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus13</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus10</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>,

<argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>,

<argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask2</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus12</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus12</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>,

<argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask3</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus13</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>,

<argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero2</name></expr></argument>, <argument><expr><name>src_zero3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst_ptr</name> <operator>+</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus12</name> <operator>=</operator> <name>src12</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst_ptr</name> <operator>+</operator> <operator>(</operator><name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus13</name> <operator>=</operator> <name>src13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst_ptr</name> <operator>+</operator> <operator>(</operator><name>dst_stride</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_90degree_4width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero0</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero1</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero0</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero1</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_90degree_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero0</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero1</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero0</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero1</name> <operator>=</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_90degree_16multiple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type>

<name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_orig</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_plus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>diff_plus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_plus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>, <decl><type ref="prev"/><name>diff_plus11</name></decl>, <decl><type ref="prev"/><name>cmp_minus12</name></decl>, <decl><type ref="prev"/><name>cmp_plus12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_minus12</name></decl>, <decl><type ref="prev"/><name>diff_plus12</name></decl>, <decl><type ref="prev"/><name>cmp_minus13</name></decl>, <decl><type ref="prev"/><name>cmp_plus13</name></decl>, <decl><type ref="prev"/><name>diff_minus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_plus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src10</name></decl>, <decl><type ref="prev"/><name>src_minus10</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src12</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>, <decl><type ref="prev"/><name>offset_mask2</name></decl>, <decl><type ref="prev"/><name>offset_mask3</name></decl>, <decl><type ref="prev"/><name>sao_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>v_cnt</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>src_orig</name> <operator>+</operator> <name>v_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dst_orig</name> <operator>+</operator> <name>v_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>h_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>==</operator> <name>src10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src10</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><name>src10</name> <operator>==</operator> <name>src11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><name>src11</name> <operator>==</operator> <name>src10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><name>src11</name> <operator>==</operator> <name>src12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><name>src12</name> <operator>==</operator> <name>src11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><name>src12</name> <operator>==</operator> <name>src13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus10</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus11</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus12</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus12</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus13</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus13</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><name>src10</name> <operator>&lt;</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <name>src10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><name>src11</name> <operator>&lt;</operator> <name>src10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><name>src10</name> <operator>&lt;</operator> <name>src11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><name>src12</name> <operator>&lt;</operator> <name>src11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><name>src11</name> <operator>&lt;</operator> <name>src12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><name>src13</name> <operator>&lt;</operator> <name>src12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus10</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask2</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus12</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus12</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask3</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus13</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src12</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src12</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_45degree_4width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_plus0</name></decl>, <decl><type ref="prev"/><name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_plus1</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_orig</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_orig</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus0</name></expr></argument>, <argument><expr><name>src_plus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src_plus0</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus1</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus0</name></expr></argument>, <argument><expr><name>src_plus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src_plus0</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus1</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_45degree_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_plus10</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>src_plus11</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_orig</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_orig</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>,

<argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>,

<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_45degree_16multiple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type>

<name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_orig</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_plus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>diff_plus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_plus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>, <decl><type ref="prev"/><name>diff_plus11</name></decl>, <decl><type ref="prev"/><name>cmp_minus12</name></decl>, <decl><type ref="prev"/><name>cmp_plus12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_minus12</name></decl>, <decl><type ref="prev"/><name>diff_plus12</name></decl>, <decl><type ref="prev"/><name>cmp_minus13</name></decl>, <decl><type ref="prev"/><name>cmp_plus13</name></decl>, <decl><type ref="prev"/><name>diff_minus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_plus13</name></decl>, <decl><type ref="prev"/><name>src_minus14</name></decl>, <decl><type ref="prev"/><name>src_plus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>, <decl><type ref="prev"/><name>offset_mask2</name></decl>, <decl><type ref="prev"/><name>offset_mask3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src10</name></decl>, <decl><type ref="prev"/><name>src_minus10</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src12</name></decl>, <decl><type ref="prev"/><name>src_minus12</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src_minus13</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_plus10</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>src_plus11</name></decl>, <decl><type ref="prev"/><name>src_zero2</name></decl>, <decl><type ref="prev"/><name>src_plus12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero3</name></decl>, <decl><type ref="prev"/><name>sao_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_orig</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_orig</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_orig</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus12</name></expr></argument>, <argument><expr><name>src_minus13</name></expr></argument>,

<argument><expr><name>src_minus14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>v_cnt</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_orig</name> <operator>-</operator> <name>src_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>v_cnt</name> <operator>+</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_orig</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus12</name></expr></argument>,

<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src_minus13</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src_minus14</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero2</name></expr></argument>, <argument><expr><name>src_zero3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus12</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src_minus13</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>,

<argument><expr><name>src_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus12</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src13</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus14</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name> <operator>==</operator> <name>src_minus12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name> <operator>==</operator> <name>src_minus13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name> <operator>==</operator> <name>src_plus13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus10</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus11</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus12</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus12</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus13</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus13</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><name>src_minus12</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_plus12</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><name>src_minus13</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><name>src_plus13</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask2</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus12</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask3</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus13</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero2</name></expr></argument>, <argument><expr><name>src_zero3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus12</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus13</name> <operator>=</operator> <name>src12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus14</name> <operator>=</operator> <name>src13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst_orig</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_orig</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_135degree_4width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_orig</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_orig</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_135degree_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>sao_offset</name> <init>= <expr><call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_orig</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>-</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_orig</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_minus10</name></expr></argument>,

<argument><expr><name>src_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero0</name></expr></argument>,

<argument><expr><name>src_zero1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>diff_minus10</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <operator>(</operator><call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>diff_minus11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_sao_edge_filter_135degree_16multiple_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type>

<name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_orig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>edge_idx</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>const1</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_minus10</name></decl>, <decl><type ref="prev"/><name>cmp_minus11</name></decl>, <decl><type ref="prev"/><name>cmp_minus12</name></decl>, <decl><type ref="prev"/><name>cmp_minus13</name></decl>, <decl><type ref="prev"/><name>cmp_plus10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>cmp_plus11</name></decl>, <decl><type ref="prev"/><name>cmp_plus12</name></decl>, <decl><type ref="prev"/><name>cmp_plus13</name></decl>, <decl><type ref="prev"/><name>diff_minus10</name></decl>, <decl><type ref="prev"/><name>diff_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_minus12</name></decl>, <decl><type ref="prev"/><name>diff_minus13</name></decl>, <decl><type ref="prev"/><name>diff_plus10</name></decl>, <decl><type ref="prev"/><name>diff_plus11</name></decl>, <decl><type ref="prev"/><name>diff_plus12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>diff_plus13</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src_minus10</name></decl>, <decl><type ref="prev"/><name>src_minus11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src_plus10</name></decl>, <decl><type ref="prev"/><name>src_plus11</name></decl>, <decl><type ref="prev"/><name>src_plus12</name></decl>, <decl><type ref="prev"/><name>src_plus13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_minus12</name></decl>, <decl><type ref="prev"/><name>src_minus13</name></decl>, <decl><type ref="prev"/><name>src_zero0</name></decl>, <decl><type ref="prev"/><name>src_zero1</name></decl>, <decl><type ref="prev"/><name>src_zero2</name></decl>, <decl><type ref="prev"/><name>src_zero3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>offset_mask0</name></decl>, <decl><type ref="prev"/><name>offset_mask1</name></decl>, <decl><type ref="prev"/><name>offset_mask2</name></decl>, <decl><type ref="prev"/><name>offset_mask3</name></decl>, <decl><type ref="prev"/><name>sao_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>sao_offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sao_offset</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>height</name></expr>;</condition> <incr><expr><name>height</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_orig</name> <operator>=</operator> <name>src</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_orig</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_orig</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src_minus11</name></expr></argument>, <argument><expr><name>src_plus10</name></expr></argument>, <argument><expr><name>src_plus11</name></expr></argument>,

<argument><expr><name>src_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>v_cnt</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_minus10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>src_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_orig</name> <operator>+</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_orig</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero0</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_minus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name> <operator>==</operator> <name>src_plus10</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero1</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_plus10</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src10</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_minus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_minus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name> <operator>==</operator> <name>src_plus11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero2</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src12</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_plus11</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus12</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src11</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_plus10</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_minus12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name> <operator>==</operator> <name>src_plus12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_zero3</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src13</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_plus12</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus13</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src12</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_plus11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name> <operator>==</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_minus13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name> <operator>==</operator> <name>src_plus13</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus10</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus10</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus11</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus11</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus12</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus12</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_minus13</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_nor_v</name><argument_list>(<argument><expr><name>cmp_plus13</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus10</name> <operator>=</operator> <operator>(</operator><name>src_minus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus10</name> <operator>=</operator> <operator>(</operator><name>src_plus10</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus11</name> <operator>=</operator> <operator>(</operator><name>src_minus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus11</name> <operator>=</operator> <operator>(</operator><name>src_plus11</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_minus12</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus12</name> <operator>=</operator> <operator>(</operator><name>src_plus12</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_minus13</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_minus13</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp_plus13</name> <operator>=</operator> <operator>(</operator><name>src_plus13</name> <operator>&lt;</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_zero3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus10</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus10</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus11</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus11</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus12</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus12</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_minus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_minus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_minus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_plus13</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>diff_plus13</name></expr></argument>, <argument><expr><name>const1</name></expr></argument>, <argument><expr><name>cmp_plus13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask0</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus10</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask1</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus11</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask2</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus12</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_mask3</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_minus13</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff_plus13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>, <argument><expr><name>sao_offset</name></expr></argument>,

<argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_SB</name><argument_list>(<argument><expr><name>src_zero0</name></expr></argument>, <argument><expr><name>src_zero1</name></expr></argument>, <argument><expr><name>src_zero2</name></expr></argument>, <argument><expr><name>src_zero3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero0</name></expr></argument>, <argument><expr><name>offset_mask0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero1</name></expr></argument>, <argument><expr><name>offset_mask1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero2</name></expr></argument>, <argument><expr><name>offset_mask2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_adds_s_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_zero3</name></expr></argument>, <argument><expr><name>offset_mask3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_minus11</name> <operator>=</operator> <name>src10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus10</name> <operator>=</operator> <name>src11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus11</name> <operator>=</operator> <name>src12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_plus12</name> <operator>=</operator> <name>src13</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst_orig</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_orig</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>dst_stride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_loop_filter_luma_h_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_loopfilter_luma_hor_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_loop_filter_luma_v_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_loopfilter_luma_ver_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_loop_filter_chroma_h_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_loopfilter_chroma_hor_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_loop_filter_chroma_v_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_loopfilter_chroma_ver_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_sao_band_filter_0_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sao_left_class</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_band_filter_16multiple_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_left_class</name></expr></argument>, <argument><expr><name>sao_offset_val</name></expr></argument>,

<argument><expr><name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_band_filter_8width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_left_class</name></expr></argument>, <argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_band_filter_4width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_left_class</name></expr></argument>, <argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_sao_edge_filter_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MAX_PB_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>eo</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_0degree_16multiple_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>,

<argument><expr><name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_0degree_8width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_0degree_4width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_90degree_16multiple_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>,

<argument><expr><name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_90degree_8width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_90degree_4width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_45degree_16multiple_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>,

<argument><expr><name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_45degree_8width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_45degree_4width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_135degree_16multiple_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>,

<argument><expr><name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_135degree_8width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>%=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_sao_edge_filter_135degree_4width_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>,

<argument><expr><name>sao_offset_val</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
