<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\vp9dsp_init_mips.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp9dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dsp_mips.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MSA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_intrapred_init_msa</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_intra_pred_msa</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;intra_pred[tx][VERT_PRED] = ff_vert_##sz##_msa; dsp-&gt;intra_pred[tx][HOR_PRED] = ff_hor_##sz##_msa; dsp-&gt;intra_pred[tx][DC_PRED] = ff_dc_##sz##_msa; dsp-&gt;intra_pred[tx][LEFT_DC_PRED] = ff_dc_left_##sz##_msa; dsp-&gt;intra_pred[tx][TOP_DC_PRED] = ff_dc_top_##sz##_msa; dsp-&gt;intra_pred[tx][DC_128_PRED] = ff_dc_128_##sz##_msa; dsp-&gt;intra_pred[tx][DC_127_PRED] = ff_dc_127_##sz##_msa; dsp-&gt;intra_pred[tx][DC_129_PRED] = ff_dc_129_##sz##_msa; dsp-&gt;intra_pred[tx][TM_VP8_PRED] = ff_tm_##sz##_msa;</cpp:value></cpp:define> 

<expr_stmt><expr><call><name>init_intra_pred_msa</name><argument_list>(<argument><expr><name>TX_16X16</name></expr></argument>, <argument><expr><literal type="number">16x16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_intra_pred_msa</name><argument_list>(<argument><expr><name>TX_32X32</name></expr></argument>, <argument><expr><literal type="number">32x32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_intra_pred_msa</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_intra_pred_msa</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;intra_pred[tx][DC_PRED] = ff_dc_##sz##_msa; dsp-&gt;intra_pred[tx][LEFT_DC_PRED] = ff_dc_left_##sz##_msa; dsp-&gt;intra_pred[tx][TOP_DC_PRED] = ff_dc_top_##sz##_msa; dsp-&gt;intra_pred[tx][TM_VP8_PRED] = ff_tm_##sz##_msa;</cpp:value></cpp:define> 

<expr_stmt><expr><call><name>init_intra_pred_msa</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_intra_pred_msa</name><argument_list>(<argument><expr><name>TX_8X8</name></expr></argument>, <argument><expr><literal type="number">8x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_intra_pred_msa</name></cpp:undef>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_itxfm_init_msa</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itxfm</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[tx][DCT_DCT] = ff_idct_idct_##sz##_add_msa; dsp-&gt;itxfm_add[tx][DCT_ADST] = ff_iadst_idct_##sz##_add_msa; dsp-&gt;itxfm_add[tx][ADST_DCT] = ff_idct_iadst_##sz##_add_msa; dsp-&gt;itxfm_add[tx][ADST_ADST] = ff_iadst_iadst_##sz##_add_msa</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_idct</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>nm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[tx][DCT_DCT] = dsp-&gt;itxfm_add[tx][ADST_DCT] = dsp-&gt;itxfm_add[tx][DCT_ADST] = dsp-&gt;itxfm_add[tx][ADST_ADST] = nm##_add_msa</cpp:value></cpp:define>

<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_8X8</name></expr></argument>, <argument><expr><literal type="number">8x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_16X16</name></expr></argument>, <argument><expr><literal type="number">16x16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_idct</name><argument_list>(<argument><expr><name>TX_32X32</name></expr></argument>, <argument><expr><name>ff_idct_idct_32x32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_itxfm</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_idct</name></cpp:undef>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_mc_init_msa</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_fpel</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][0][0] = ff_##type##sz##_msa; dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][0][0] = ff_##type##sz##_msa; dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][0][0] = ff_##type##sz##_msa; dsp-&gt;mc[idx1][FILTER_BILINEAR ][idx2][0][0] = ff_##type##sz##_msa</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_copy_avg</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_fpel(idx, 0, sz, copy); init_fpel(idx, 1, sz, avg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_avg</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_fpel(idx, 1, sz, avg)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_avg</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_copy_avg</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_avg</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_fpel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel1</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_BILINEAR ][idx2][idxh][idxv] = ff_##type##_bilin_##sz##dir##_msa; dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][idxh][idxv] = ff_##type##_8tap_smooth_##sz##dir##_msa; dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][idxh][idxv] = ff_##type##_8tap_regular_##sz##dir##_msa; dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][idxh][idxv] = ff_##type##_8tap_sharp_##sz##dir##_msa;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel2</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel1(0, idx, idxh, idxv, 64, dir, type); init_subpel1(1, idx, idxh, idxv, 32, dir, type); init_subpel1(2, idx, idxh, idxv, 16, dir, type); init_subpel1(3, idx, idxh, idxv, 8, dir, type); init_subpel1(4, idx, idxh, idxv, 4, dir, type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel3</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel2(idx, 1, 1, hv, type); init_subpel2(idx, 0, 1, v, type); init_subpel2(idx, 1, 0, h, type)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel3</name></cpp:undef>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_loopfilter_init_msa</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_4_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_4_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_8_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_8_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_16_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_16_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_16_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_16_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_44_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_44_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_48_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_48_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_84_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_84_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_h_88_16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_loop_filter_v_88_16_msa</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_init_msa</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vp9dsp_intrapred_init_msa</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp9dsp_itxfm_init_msa</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp9dsp_mc_init_msa</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp9dsp_loopfilter_init_msa</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMI</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_mc_init_mmi</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel1</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][idxh][idxv] = ff_##type##_8tap_smooth_##sz##dir##_mmi; dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][idxh][idxv] = ff_##type##_8tap_regular_##sz##dir##_mmi; dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][idxh][idxv] = ff_##type##_8tap_sharp_##sz##dir##_mmi;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel2</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel1(0, idx, idxh, idxv, 64, dir, type); init_subpel1(1, idx, idxh, idxv, 32, dir, type); init_subpel1(2, idx, idxh, idxv, 16, dir, type); init_subpel1(3, idx, idxh, idxv, 8, dir, type); init_subpel1(4, idx, idxh, idxv, 4, dir, type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel3</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel2(idx, 1, 1, hv, type); init_subpel2(idx, 0, 1, v, type); init_subpel2(idx, 1, 0, h, type)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel3</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_init_mmi</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vp9dsp_mc_init_mmi</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp9dsp_init_mips</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMI</name></expr></cpp:if>

<expr_stmt><expr><call><name>vp9dsp_init_mmi</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MSA</name></expr></cpp:if>

<expr_stmt><expr><call><name>vp9dsp_init_msa</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
