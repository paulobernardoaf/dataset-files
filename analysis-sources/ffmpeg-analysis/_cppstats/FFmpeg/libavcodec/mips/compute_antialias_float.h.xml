<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\compute_antialias_float.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_antialias_mips_float</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>csa</name> <init>= <expr><operator>&amp;</operator><name><name>csa_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>, <decl><type ref="prev"/><name>in8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>, <decl><type ref="prev"/><name>out4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr_end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ptr_end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">558</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"compute_antialias_float_loop%=: \t\n"

"lwc1 %[in1], -1*4(%[ptr]) \t\n"

"lwc1 %[in2], 0(%[csa]) \t\n"

"lwc1 %[in3], 1*4(%[csa]) \t\n"

"lwc1 %[in4], 0(%[ptr]) \t\n"

"lwc1 %[in5], -2*4(%[ptr]) \t\n"

"lwc1 %[in6], 4*4(%[csa]) \t\n"

"mul.s %[out1], %[in1], %[in2] \t\n"

"mul.s %[out2], %[in1], %[in3] \t\n"

"lwc1 %[in7], 5*4(%[csa]) \t\n"

"lwc1 %[in8], 1*4(%[ptr]) \t\n"

"nmsub.s %[out1], %[out1], %[in3], %[in4] \t\n"

"madd.s %[out2], %[out2], %[in2], %[in4] \t\n"

"mul.s %[out3], %[in5], %[in6] \t\n"

"mul.s %[out4], %[in5], %[in7] \t\n"

"lwc1 %[in1], -3*4(%[ptr]) \t\n"

"swc1 %[out1], -1*4(%[ptr]) \t\n"

"swc1 %[out2], 0(%[ptr]) \t\n"

"nmsub.s %[out3], %[out3], %[in7], %[in8] \t\n"

"madd.s %[out4], %[out4], %[in6], %[in8] \t\n"

"lwc1 %[in2], 8*4(%[csa]) \t\n"

"swc1 %[out3], -2*4(%[ptr]) \t\n"

"swc1 %[out4], 1*4(%[ptr]) \t\n"

"lwc1 %[in3], 9*4(%[csa]) \t\n"

"lwc1 %[in4], 2*4(%[ptr]) \t\n"

"mul.s %[out1], %[in1], %[in2] \t\n"

"lwc1 %[in5], -4*4(%[ptr]) \t\n"

"lwc1 %[in6], 12*4(%[csa]) \t\n"

"mul.s %[out2], %[in1], %[in3] \t\n"

"lwc1 %[in7], 13*4(%[csa]) \t\n"

"nmsub.s %[out1], %[out1], %[in3], %[in4] \t\n"

"lwc1 %[in8], 3*4(%[ptr]) \t\n"

"mul.s %[out3], %[in5], %[in6] \t\n"

"madd.s %[out2], %[out2], %[in2], %[in4] \t\n"

"mul.s %[out4], %[in5], %[in7] \t\n"

"swc1 %[out1], -3*4(%[ptr]) \t\n"

"lwc1 %[in1], -5*4(%[ptr]) \t\n"

"nmsub.s %[out3], %[out3], %[in7], %[in8] \t\n"

"swc1 %[out2], 2*4(%[ptr]) \t\n"

"madd.s %[out4], %[out4], %[in6], %[in8] \t\n"

"lwc1 %[in2], 16*4(%[csa]) \t\n"

"lwc1 %[in3], 17*4(%[csa]) \t\n"

"swc1 %[out3], -4*4(%[ptr]) \t\n"

"lwc1 %[in4], 4*4(%[ptr]) \t\n"

"swc1 %[out4], 3*4(%[ptr]) \t\n"

"mul.s %[out1], %[in1], %[in2] \t\n"

"mul.s %[out2], %[in1], %[in3] \t\n"

"lwc1 %[in5], -6*4(%[ptr]) \t\n"

"lwc1 %[in6], 20*4(%[csa]) \t\n"

"lwc1 %[in7], 21*4(%[csa]) \t\n"

"nmsub.s %[out1], %[out1], %[in3], %[in4] \t\n"

"madd.s %[out2], %[out2], %[in2], %[in4] \t\n"

"lwc1 %[in8], 5*4(%[ptr]) \t\n"

"mul.s %[out3], %[in5], %[in6] \t\n"

"mul.s %[out4], %[in5], %[in7] \t\n"

"swc1 %[out1], -5*4(%[ptr]) \t\n"

"swc1 %[out2], 4*4(%[ptr]) \t\n"

"lwc1 %[in1], -7*4(%[ptr]) \t\n"

"nmsub.s %[out3], %[out3], %[in7], %[in8] \t\n"

"madd.s %[out4], %[out4], %[in6], %[in8] \t\n"

"lwc1 %[in2], 24*4(%[csa]) \t\n"

"lwc1 %[in3], 25*4(%[csa]) \t\n"

"lwc1 %[in4], 6*4(%[ptr]) \t\n"

"swc1 %[out3], -6*4(%[ptr]) \t\n"

"swc1 %[out4], 5*4(%[ptr]) \t\n"

"mul.s %[out1], %[in1], %[in2] \t\n"

"lwc1 %[in5], -8*4(%[ptr]) \t\n"

"mul.s %[out2], %[in1], %[in3] \t\n"

"lwc1 %[in6], 28*4(%[csa]) \t\n"

"lwc1 %[in7], 29*4(%[csa]) \t\n"

"nmsub.s %[out1], %[out1], %[in3], %[in4] \t\n"

"lwc1 %[in8], 7*4(%[ptr]) \t\n"

"madd.s %[out2], %[out2], %[in2], %[in4] \t\n"

"mul.s %[out3], %[in5], %[in6] \t\n"

"mul.s %[out4], %[in5], %[in7] \t\n"

"swc1 %[out1], -7*4(%[ptr]) \t\n"

"swc1 %[out2], 6*4(%[ptr]) \t\n"

PTR_ADDIU "%[ptr],%[ptr], 72 \t\n"

"nmsub.s %[out3], %[out3], %[in7], %[in8] \t\n"

"madd.s %[out4], %[out4], %[in6], %[in8] \t\n"

"swc1 %[out3], -26*4(%[ptr]) \t\n"

"swc1 %[out4], -11*4(%[ptr]) \t\n"

"bne %[ptr], %[ptr_end], compute_antialias_float_loop%= \t\n"

: [ptr] "+r" (ptr),

[in1] "=&amp;f" (in1), [in2] "=&amp;f" (in2),

[in3] "=&amp;f" (in3), [in4] "=&amp;f" (in4),

[in5] "=&amp;f" (in5), [in6] "=&amp;f" (in6),

[in7] "=&amp;f" (in7), [in8] "=&amp;f" (in8),

[out1] "=&amp;f" (out1), [out2] "=&amp;f" (out2),

[out3] "=&amp;f" (out3), [out4] "=&amp;f" (out4)

: [csa] "r" (csa), [ptr_end] "r" (ptr_end)

: "memory"

);</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compute_antialias</name></cpp:macro> <cpp:value>compute_antialias_mips_float</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
