<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\blockdsp_mmi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp_mips.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_fill_block16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"mtc1 %[value], %[ftmp0] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"1: \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

PTR_ADDI "%[h], %[h], -0x01 \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x08)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]),

RESTRICT_ASM_ALL64

[block]"+&amp;r"(block), [h]"+&amp;r"(h)

: [value]"r"(value), [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_fill_block8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ftmp0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"mtc1 %[value], %[ftmp0] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"1: \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

PTR_ADDI "%[h], %[h], -0x01 \n\t"

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp0),

RESTRICT_ASM_ALL64

[block]"+&amp;r"(block), [h]"+&amp;r"(h)

: [value]"r"(value), [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_clear_block_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"xor %[ftmp1], %[ftmp1], %[ftmp1] \n\t"

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x00)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x10)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x20)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x30)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x40)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x50)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x60)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x70)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1])

: [block]"r"(block)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_clear_blocks_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"xor %[ftmp1], %[ftmp1], %[ftmp1] \n\t"

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x00)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x10)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x20)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x30)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x40)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x50)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x60)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x70)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x80)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x90)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0xa0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0xb0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0xc0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0xd0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0xe0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0xf0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x100)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x110)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x120)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x130)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x140)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x150)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x160)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x170)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x180)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x190)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x1a0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x1b0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x1c0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x1d0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x1e0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x1f0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x200)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x210)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x220)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x230)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x240)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x250)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x260)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x270)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x280)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x290)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x2a0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x2b0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x2c0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x2d0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x2e0)

MMI_SQC1(%[ftmp0], %[ftmp1], %[block], 0x2f0)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1])

: [block]"r"((uint64_t *)block)

: "memory"

);</asm>

</block_content>}</block></function>

</unit>
