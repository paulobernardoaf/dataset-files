<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\hevc_idct_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mips/hevcdsp_mips.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name> <name><name>gt8x8_cnst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name> <name><name>gt16x16_cnst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">43</literal></expr>,

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><operator>-</operator><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">43</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>,

<expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><operator>-</operator><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">57</literal></expr>,

<expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">57</literal></expr>, <expr><literal type="number">25</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name> <name><name>gt32x32_cnst0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{

<expr><literal type="number">90</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">90</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>,

<expr><literal type="number">88</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">22</literal></expr>,

<expr><literal type="number">85</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>,

<expr><literal type="number">82</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">67</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">38</literal></expr>,

<expr><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>,

<expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">54</literal></expr>,

<expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>,

<expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">67</literal></expr>,

<expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>,

<expr><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">85</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">78</literal></expr>,

<expr><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">67</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>,

<expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><literal type="number">85</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><literal type="number">90</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">46</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><operator>-</operator><literal type="number">73</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><operator>-</operator><literal type="number">88</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name> <name><name>gt32x32_cnst1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{

<expr><literal type="number">90</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>,

<expr><literal type="number">80</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><operator>-</operator><literal type="number">57</literal></expr>,

<expr><literal type="number">57</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">87</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">70</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">57</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">57</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><operator>-</operator><literal type="number">90</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name> <name><name>gt32x32_cnst2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{

<expr><literal type="number">89</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">89</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_IDCT4x4_COL</name><parameter_list>(<parameter><type><name>in_r0</name></type></parameter>, <parameter><type><name>in_l0</name></type></parameter>, <parameter><type><name>in_r1</name></type></parameter>, <parameter><type><name>in_l1</name></type></parameter>, <parameter><type><name>sum0</name></type></parameter>, <parameter><type><name>sum1</name></type></parameter>, <parameter><type><name>sum2</name></type></parameter>, <parameter><type><name>sum3</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v4i32 vec0, vec1, vec2, vec3, vec4, vec5; v4i32 cnst64 = __msa_ldi_w(64); v4i32 cnst83 = __msa_ldi_w(83); v4i32 cnst36 = __msa_ldi_w(36); DOTP_SH4_SW(in_r0, in_r1, in_l0, in_l1, cnst64, cnst64, cnst83, cnst36, vec0, vec2, vec1, vec3); DOTP_SH2_SW(in_l0, in_l1, cnst36, cnst83, vec4, vec5); sum0 = vec0 + vec2; sum1 = vec0 - vec2; sum3 = sum0; sum2 = sum1; vec1 += vec3; vec4 -= vec5; sum0 += vec1; sum1 += vec4; sum2 -= vec4; sum3 -= vec1; SRARI_W4_SW(sum0, sum1, sum2, sum3, shift); SAT_SW4_SW(sum0, sum1, sum2, sum3, 15); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_IDCT8x8_COL</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 src0_r, src1_r, src2_r, src3_r; v8i16 src0_l, src1_l, src2_l, src3_l; v8i16 filt0, filter0, filter1, filter2, filter3; v4i32 temp0_r, temp1_r, temp2_r, temp3_r, temp4_r, temp5_r; v4i32 temp0_l, temp1_l, temp2_l, temp3_l, temp4_l, temp5_l; v4i32 sum0_r, sum1_r, sum2_r, sum3_r; v4i32 sum0_l, sum1_l, sum2_l, sum3_l; ILVR_H4_SH(in4, in0, in6, in2, in5, in1, in3, in7, src0_r, src1_r, src2_r, src3_r); ILVL_H4_SH(in4, in0, in6, in2, in5, in1, in3, in7, src0_l, src1_l, src2_l, src3_l); filt0 = LD_SH(filter); SPLATI_W4_SH(filt0, filter0, filter1, filter2, filter3); DOTP_SH4_SW(src0_r, src0_l, src1_r, src1_l, filter0, filter0, filter1, filter1, temp0_r, temp0_l, temp1_r, temp1_l); BUTTERFLY_4(temp0_r, temp0_l, temp1_l, temp1_r, sum0_r, sum0_l, sum1_l, sum1_r); sum2_r = sum1_r; sum2_l = sum1_l; sum3_r = sum0_r; sum3_l = sum0_l; DOTP_SH4_SW(src2_r, src2_l, src3_r, src3_l, filter2, filter2, filter3, filter3, temp2_r, temp2_l, temp3_r, temp3_l); temp2_r += temp3_r; temp2_l += temp3_l; sum0_r += temp2_r; sum0_l += temp2_l; sum3_r -= temp2_r; sum3_l -= temp2_l; SRARI_W4_SW(sum0_r, sum0_l, sum3_r, sum3_l, shift); SAT_SW4_SW(sum0_r, sum0_l, sum3_r, sum3_l, 15); PCKEV_H2_SH(sum0_l, sum0_r, sum3_l, sum3_r, in0, in7); DOTP_SH4_SW(src2_r, src2_l, src3_r, src3_l, filter3, filter3, filter2, filter2, temp4_r, temp4_l, temp5_r, temp5_l); temp4_r -= temp5_r; temp4_l -= temp5_l; sum1_r += temp4_r; sum1_l += temp4_l; sum2_r -= temp4_r; sum2_l -= temp4_l; SRARI_W4_SW(sum1_r, sum1_l, sum2_r, sum2_l, shift); SAT_SW4_SW(sum1_r, sum1_l, sum2_r, sum2_l, 15); PCKEV_H2_SH(sum1_l, sum1_r, sum2_l, sum2_r, in3, in4); filt0 = LD_SH(filter + 8); SPLATI_W4_SH(filt0, filter0, filter1, filter2, filter3); DOTP_SH4_SW(src0_r, src0_l, src1_r, src1_l, filter0, filter0, filter1, filter1, temp0_r, temp0_l, temp1_r, temp1_l); BUTTERFLY_4(temp0_r, temp0_l, temp1_l, temp1_r, sum0_r, sum0_l, sum1_l, sum1_r); sum2_r = sum1_r; sum2_l = sum1_l; sum3_r = sum0_r; sum3_l = sum0_l; DOTP_SH4_SW(src2_r, src2_l, src3_r, src3_l, filter2, filter2, filter3, filter3, temp2_r, temp2_l, temp3_r, temp3_l); temp2_r += temp3_r; temp2_l += temp3_l; sum0_r += temp2_r; sum0_l += temp2_l; sum3_r -= temp2_r; sum3_l -= temp2_l; SRARI_W4_SW(sum0_r, sum0_l, sum3_r, sum3_l, shift); SAT_SW4_SW(sum0_r, sum0_l, sum3_r, sum3_l, 15); PCKEV_H2_SH(sum0_l, sum0_r, sum3_l, sum3_r, in1, in6); DOTP_SH4_SW(src2_r, src2_l, src3_r, src3_l, filter3, filter3, filter2, filter2, temp4_r, temp4_l, temp5_r, temp5_l); temp4_r -= temp5_r; temp4_l -= temp5_l; sum1_r -= temp4_r; sum1_l -= temp4_l; sum2_r += temp4_r; sum2_l += temp4_l; SRARI_W4_SW(sum1_r, sum1_l, sum2_r, sum2_l, shift); SAT_SW4_SW(sum1_r, sum1_l, sum2_r, sum2_l, 15); PCKEV_H2_SH(sum1_l, sum1_r, sum2_l, sum2_r, in2, in5); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_IDCT16x16_COL</name><parameter_list>(<parameter><type><name>src0_r</name></type></parameter>, <parameter><type><name>src1_r</name></type></parameter>, <parameter><type><name>src2_r</name></type></parameter>, <parameter><type><name>src3_r</name></type></parameter>, <parameter><type><name>src4_r</name></type></parameter>, <parameter><type><name>src5_r</name></type></parameter>, <parameter><type><name>src6_r</name></type></parameter>, <parameter><type><name>src7_r</name></type></parameter>, <parameter><type><name>src0_l</name></type></parameter>, <parameter><type><name>src1_l</name></type></parameter>, <parameter><type><name>src2_l</name></type></parameter>, <parameter><type><name>src3_l</name></type></parameter>, <parameter><type><name>src4_l</name></type></parameter>, <parameter><type><name>src5_l</name></type></parameter>, <parameter><type><name>src6_l</name></type></parameter>, <parameter><type><name>src7_l</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int16_t *ptr0, *ptr1; v8i16 filt0, filt1, dst0, dst1; v8i16 filter0, filter1, filter2, filter3; v4i32 temp0_r, temp1_r, temp0_l, temp1_l; v4i32 sum0_r, sum1_r, sum2_r, sum3_r, sum0_l, sum1_l, sum2_l; v4i32 sum3_l, res0_r, res1_r, res0_l, res1_l; ptr0 = (buf_ptr + 112); ptr1 = (buf_ptr + 128); k = -1; for (j = 0; j &lt; 4; j++) { LD_SH2(filter, 8, filt0, filt1) filter += 16; SPLATI_W2_SH(filt0, 0, filter0, filter1); SPLATI_W2_SH(filt1, 0, filter2, filter3); DOTP_SH4_SW(src0_r, src0_l, src4_r, src4_l, filter0, filter0, filter2, filter2, sum0_r, sum0_l, sum2_r, sum2_l); DOTP_SH2_SW(src7_r, src7_l, filter2, filter2, sum3_r, sum3_l); DPADD_SH4_SW(src1_r, src1_l, src5_r, src5_l, filter1, filter1, filter3, filter3, sum0_r, sum0_l, sum2_r, sum2_l); DPADD_SH2_SW(src6_r, src6_l, filter3, filter3, sum3_r, sum3_l); sum1_r = sum0_r; sum1_l = sum0_l; SPLATI_W2_SH(filt0, 2, filter0, filter1); SPLATI_W2_SH(filt1, 2, filter2, filter3); DOTP_SH2_SW(src2_r, src2_l, filter0, filter0, temp0_r, temp0_l); DPADD_SH2_SW(src6_r, src6_l, filter2, filter2, sum2_r, sum2_l); DOTP_SH2_SW(src5_r, src5_l, filter2, filter2, temp1_r, temp1_l); sum0_r += temp0_r; sum0_l += temp0_l; sum1_r -= temp0_r; sum1_l -= temp0_l; sum3_r = temp1_r - sum3_r; sum3_l = temp1_l - sum3_l; DOTP_SH2_SW(src3_r, src3_l, filter1, filter1, temp0_r, temp0_l); DPADD_SH4_SW(src7_r, src7_l, src4_r, src4_l, filter3, filter3, filter3, filter3, sum2_r, sum2_l, sum3_r, sum3_l); sum0_r += temp0_r; sum0_l += temp0_l; sum1_r -= temp0_r; sum1_l -= temp0_l; BUTTERFLY_4(sum0_r, sum0_l, sum2_l, sum2_r, res0_r, res0_l, res1_l, res1_r); SRARI_W4_SW(res0_r, res0_l, res1_r, res1_l, shift); SAT_SW4_SW(res0_r, res0_l, res1_r, res1_l, 15); PCKEV_H2_SH(res0_l, res0_r, res1_l, res1_r, dst0, dst1); ST_SH(dst0, buf_ptr); ST_SH(dst1, (buf_ptr + ((15 - (j * 2)) * 16))); BUTTERFLY_4(sum1_r, sum1_l, sum3_l, sum3_r, res0_r, res0_l, res1_l, res1_r); SRARI_W4_SW(res0_r, res0_l, res1_r, res1_l, shift); SAT_SW4_SW(res0_r, res0_l, res1_r, res1_l, 15); PCKEV_H2_SH(res0_l, res0_r, res1_l, res1_r, dst0, dst1); ST_SH(dst0, (ptr0 + (((j / 2 + j % 2) * 2 * k) * 16))); ST_SH(dst1, (ptr1 - (((j / 2 + j % 2) * 2 * k) * 16))); k *= -1; buf_ptr += 16; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_EVEN16_CALC</name><parameter_list>(<parameter><type><name>input</name></type></parameter>, <parameter><type><name>sum0_r</name></type></parameter>, <parameter><type><name>sum0_l</name></type></parameter>, <parameter><type><name>load_idx</name></type></parameter>, <parameter><type><name>store_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ LD_SW2(input + load_idx * 8, 4, tmp0_r, tmp0_l); tmp1_r = sum0_r; tmp1_l = sum0_l; sum0_r += tmp0_r; sum0_l += tmp0_l; ST_SW2(sum0_r, sum0_l, (input + load_idx * 8), 4); tmp1_r -= tmp0_r; tmp1_l -= tmp0_l; ST_SW2(tmp1_r, tmp1_l, (input + store_idx * 8), 4); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_IDCT_LUMA4x4_COL</name><parameter_list>(<parameter><type><name>in_r0</name></type></parameter>, <parameter><type><name>in_l0</name></type></parameter>, <parameter><type><name>in_r1</name></type></parameter>, <parameter><type><name>in_l1</name></type></parameter>, <parameter><type><name>res0</name></type></parameter>, <parameter><type><name>res1</name></type></parameter>, <parameter><type><name>res2</name></type></parameter>, <parameter><type><name>res3</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v4i32 vec0, vec1, vec2, vec3; v4i32 cnst74 = __msa_ldi_w(74); v4i32 cnst55 = __msa_ldi_w(55); v4i32 cnst29 = __msa_ldi_w(29); vec0 = in_r0 + in_r1; vec2 = in_r0 - in_l1; res0 = vec0 * cnst29; res1 = vec2 * cnst55; res2 = in_r0 - in_r1; vec1 = in_r1 + in_l1; res2 += in_l1; vec3 = in_l0 * cnst74; res3 = vec0 * cnst55; res0 += vec1 * cnst55; res1 -= vec1 * cnst29; res2 *= cnst74; res3 += vec2 * cnst29; res0 += vec3; res1 += vec3; res3 -= vec3; SRARI_W4_SW(res0, res1, res2, res3, shift); SAT_SW4_SW(res0, res1, res2, res3, 15); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>in_r0</name></decl>, <decl><type ref="prev"/><name>in_l0</name></decl>, <decl><type ref="prev"/><name>in_r1</name></decl>, <decl><type ref="prev"/><name>in_l1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>, <decl><type ref="prev"/><name>sum3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT4x4_COL</name><argument_list>(<argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT4x4_COL</name><argument_list>(<argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_W2_SH</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_8x8_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>&amp;</operator><name><name>gt8x8_cnst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT8x8_COL</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT8x8_COL</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_16x16_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>coeffs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>&amp;</operator><name><name>gt16x16_cnst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in8</name></decl>, <decl><type ref="prev"/><name>in9</name></decl>, <decl><type ref="prev"/><name>in10</name></decl>, <decl><type ref="prev"/><name>in11</name></decl>, <decl><type ref="prev"/><name>in12</name></decl>, <decl><type ref="prev"/><name>in13</name></decl>, <decl><type ref="prev"/><name>in14</name></decl>, <decl><type ref="prev"/><name>in15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>, <decl><type ref="prev"/><name>src7_l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_SH16</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>,

<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>,

<argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>,

<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>,

<argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT16x16_COL</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>,

<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>,

<argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name><name>gt16x16_cnst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name>coeffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name><name>gt16x16_cnst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_SH16</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>,

<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>,

<argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>,

<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>,

<argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>,

<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>,

<argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT16x16_COL</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>,

<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>,

<argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name>coeffs</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name><name>gt16x16_cnst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>, <argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in8</name></expr></argument>, <argument><expr><name>in9</name></expr></argument>, <argument><expr><name>in10</name></expr></argument>, <argument><expr><name>in11</name></expr></argument>, <argument><expr><name>in12</name></expr></argument>, <argument><expr><name>in13</name></expr></argument>, <argument><expr><name>in14</name></expr></argument>, <argument><expr><name>in15</name></expr></argument>,

<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>, <argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">136</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>, <argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">136</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_8x32_column_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>buf_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>round</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter_ptr0</name> <init>= <expr><operator>&amp;</operator><name><name>gt32x32_cnst0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter_ptr1</name> <init>= <expr><operator>&amp;</operator><name><name>gt32x32_cnst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter_ptr2</name> <init>= <expr><operator>&amp;</operator><name><name>gt32x32_cnst2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter_ptr3</name> <init>= <expr><operator>&amp;</operator><name><name>gt8x8_cnst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <name>buf_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>buf_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>buf_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src3</name> <init>= <expr><operator>(</operator><name>coeffs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cnst0</name></decl>, <decl><type ref="prev"/><name>cnst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>tmp_buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tmp_buf_ptr</name> <init>= <expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>, <decl><type ref="prev"/><name>src7_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>filt0</name></decl>, <decl><type ref="prev"/><name>filter0</name></decl>, <decl><type ref="prev"/><name>filter1</name></decl>, <decl><type ref="prev"/><name>filter2</name></decl>, <decl><type ref="prev"/><name>filter3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>sum0_r</name></decl>, <decl><type ref="prev"/><name>sum0_l</name></decl>, <decl><type ref="prev"/><name>sum1_r</name></decl>, <decl><type ref="prev"/><name>sum1_l</name></decl>, <decl><type ref="prev"/><name>tmp0_r</name></decl>, <decl><type ref="prev"/><name>tmp0_l</name></decl>, <decl><type ref="prev"/><name>tmp1_r</name></decl>, <decl><type ref="prev"/><name>tmp1_l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_buf_ptr</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>tmp_buf_ptr</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>buf_pitch</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H2_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H2_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>buf_pitch</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><operator>(</operator><name>src3</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>buf_pitch</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>buf_pitch</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H2_SH</name><argument_list>(<argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H2_SH</name><argument_list>(<argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>filter_ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>filter_ptr2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOTP_SH2_SW</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH2_SW</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SW2</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf_ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>filter_ptr2</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>filter_ptr2</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOTP_SH2_SW</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH2_SW</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SW2</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf_ptr</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter_ptr2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>filter_ptr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>filter_ptr3</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOTP_SH4_SW</name><argument_list>(<argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>,

<argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>tmp1_r</name></expr></argument>, <argument><expr><name>tmp1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1_r</name> <operator>=</operator> <name>sum0_r</name> <operator>-</operator> <name>tmp1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1_l</name> <operator>=</operator> <name>sum0_l</name> <operator>-</operator> <name>tmp1_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_r</name> <operator>=</operator> <name>sum0_r</name> <operator>+</operator> <name>tmp1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_l</name> <operator>=</operator> <name>sum0_l</name> <operator>+</operator> <name>tmp1_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_EVEN16_CALC</name><argument_list>(<argument><expr><name>tmp_buf_ptr</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_EVEN16_CALC</name><argument_list>(<argument><expr><name>tmp_buf_ptr</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter_ptr3</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>buf_pitch</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>,

<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>,

<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>filt0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>filter_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_W4_SH</name><argument_list>(<argument><expr><name>filt0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOTP_SH2_SW</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH4_SW</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>,

<argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH2_SW</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SW2</name><argument_list>(<argument><expr><name>tmp_buf_ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_r</name> <operator>=</operator> <name>tmp0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_l</name> <operator>=</operator> <name>tmp0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0_r</name> <operator>+=</operator> <name>sum0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0_l</name> <operator>+=</operator> <name>sum0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SW2</name><argument_list>(<argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf_ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_r</name> <operator>-=</operator> <name>sum0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_l</name> <operator>-=</operator> <name>sum0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SW2</name><argument_list>(<argument><expr><name>tmp1_r</name></expr></argument>, <argument><expr><name>tmp1_l</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf_ptr</name> <operator>+</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter_ptr1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>buf_pitch</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>buf_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>,

<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>,

<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>buf_pitch</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>,

<argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>,

<argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>filt0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>filter_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_W4_SH</name><argument_list>(<argument><expr><name>filt0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOTP_SH2_SW</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH4_SW</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>,

<argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH2_SW</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_r</name> <operator>=</operator> <name>sum0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_l</name> <operator>=</operator> <name>sum0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filt0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>filter_ptr0</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_W4_SH</name><argument_list>(<argument><expr><name>filt0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOTP_SH2_SW</name><argument_list>(<argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>filter0</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH4_SW</name><argument_list>(<argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>,

<argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPADD_SH2_SW</name><argument_list>(<argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>, <argument><expr><name>filter3</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_r</name> <operator>+=</operator> <name>tmp1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_l</name> <operator>+=</operator> <name>tmp1_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SW2</name><argument_list>(<argument><expr><name>tmp_buf_ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_r</name> <operator>=</operator> <name>tmp0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_l</name> <operator>=</operator> <name>tmp0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0_r</name> <operator>+=</operator> <name>sum0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0_l</name> <operator>+=</operator> <name>sum0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1_r</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRAR_W2_SW</name><argument_list>(<argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_SW2_SW</name><argument_list>(<argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0</name> <operator>=</operator> <call><name>__msa_pckev_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>tmp0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>tmp0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>buf_pitch</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_r</name> <operator>-=</operator> <name>sum0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1_l</name> <operator>-=</operator> <name>sum0_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRAR_W2_SW</name><argument_list>(<argument><expr><name>tmp1_r</name></expr></argument>, <argument><expr><name>tmp1_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_SW2_SW</name><argument_list>(<argument><expr><name>tmp1_r</name></expr></argument>, <argument><expr><name>tmp1_l</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0</name> <operator>=</operator> <call><name>__msa_pckev_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>tmp1_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>tmp1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>buf_pitch</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter_ptr0</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_transpose_32x8_to_8x32</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>coeffs</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_transpose_8x32_to_32x8</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>coeffs</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_32x32_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>row_cnt</name></decl>, <decl><type ref="prev"/><name>col_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>coeffs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf_ptr</name> <init>= <expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>buf_pitch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_buf_ptr</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>tmp_buf_ptr</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_pitch</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col_cnt</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>col_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_8x32_column_msa</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <name>col_cnt</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><name>buf_pitch</name></expr></argument>, <argument><expr><name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_pitch</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row_cnt</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>row_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>row_cnt</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hevc_idct_transpose_32x8_to_8x32</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp_buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hevc_idct_8x32_column_msa</name><argument_list>(<argument><expr><name>tmp_buf_ptr</name></expr></argument>, <argument><expr><name>buf_pitch</name></expr></argument>, <argument><expr><name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hevc_idct_transpose_8x32_to_32x8</name><argument_list>(<argument><expr><name>tmp_buf_ptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_dc_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_dc_16x16_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>loop</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_dc_32x32_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>loop</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_addblk_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst_r0</name></decl>, <decl><type ref="prev"/><name>dst_l0</name></decl>, <decl><type ref="prev"/><name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>dst_vec</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_SW</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst_vec</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_vec</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst_l0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst_r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>dst_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_addblk_8x8_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>dst_vec0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v2i64</name></type> <name>dst_vec1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst_r0</name></decl>, <decl><type ref="prev"/><name>dst_l0</name></decl>, <decl><type ref="prev"/><name>dst_r1</name></decl>, <decl><type ref="prev"/><name>dst_l1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_SD</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst_vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_SD</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst_vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst_vec0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst_vec1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>,

<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH4_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_SD</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst_vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_SD</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst_vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst_vec0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst_vec1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,

<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH4_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_addblk_16x16_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst_r0</name></decl>, <decl><type ref="prev"/><name>dst_l0</name></decl>, <decl><type ref="prev"/><name>dst_r1</name></decl>, <decl><type ref="prev"/><name>dst_l1</name></decl>, <decl><type ref="prev"/><name>dst_r2</name></decl>, <decl><type ref="prev"/><name>dst_l2</name></decl>, <decl><type ref="prev"/><name>dst_r3</name></decl>, <decl><type ref="prev"/><name>dst_l3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r0</name> <operator>+=</operator> <name>in0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l0</name> <operator>+=</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r1</name> <operator>+=</operator> <name>in2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l1</name> <operator>+=</operator> <name>in3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r2</name> <operator>+=</operator> <name>in4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l2</name> <operator>+=</operator> <name>in5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r3</name> <operator>+=</operator> <name>in6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l3</name> <operator>+=</operator> <name>in7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>,

<argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>,

<argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r0</name> <operator>+=</operator> <name>in0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l0</name> <operator>+=</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r1</name> <operator>+=</operator> <name>in2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l1</name> <operator>+=</operator> <name>in3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r2</name> <operator>+=</operator> <name>in4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l2</name> <operator>+=</operator> <name>in5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r3</name> <operator>+=</operator> <name>in6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l3</name> <operator>+=</operator> <name>in7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>,

<argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>,

<argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_addblk_32x32_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>dst_r0</name></decl>, <decl><type ref="prev"/><name>dst_l0</name></decl>, <decl><type ref="prev"/><name>dst_r1</name></decl>, <decl><type ref="prev"/><name>dst_l1</name></decl>, <decl><type ref="prev"/><name>dst_r2</name></decl>, <decl><type ref="prev"/><name>dst_l2</name></decl>, <decl><type ref="prev"/><name>dst_r3</name></decl>, <decl><type ref="prev"/><name>dst_l3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r0</name> <operator>+=</operator> <name>in0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l0</name> <operator>+=</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r1</name> <operator>+=</operator> <name>in2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l1</name> <operator>+=</operator> <name>in3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r2</name> <operator>+=</operator> <name>in4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l2</name> <operator>+=</operator> <name>in5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r3</name> <operator>+=</operator> <name>in6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l3</name> <operator>+=</operator> <name>in7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>,

<argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>,

<argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r0</name> <operator>+=</operator> <name>in0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l0</name> <operator>+=</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r1</name> <operator>+=</operator> <name>in2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l1</name> <operator>+=</operator> <name>in3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r2</name> <operator>+=</operator> <name>in4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l2</name> <operator>+=</operator> <name>in5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r3</name> <operator>+=</operator> <name>in6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l3</name> <operator>+=</operator> <name>in7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>temp_dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>coeffs</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>,

<argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>,

<argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r0</name> <operator>+=</operator> <name>in0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l0</name> <operator>+=</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r1</name> <operator>+=</operator> <name>in2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l1</name> <operator>+=</operator> <name>in3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r2</name> <operator>+=</operator> <name>in4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l2</name> <operator>+=</operator> <name>in5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r3</name> <operator>+=</operator> <name>in6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l3</name> <operator>+=</operator> <name>in7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>,

<argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>dst_l0</name></expr></argument>, <argument><expr><name>dst_r0</name></expr></argument>, <argument><expr><name>dst_l1</name></expr></argument>, <argument><expr><name>dst_r1</name></expr></argument>, <argument><expr><name>dst_l2</name></expr></argument>, <argument><expr><name>dst_r2</name></expr></argument>, <argument><expr><name>dst_l3</name></expr></argument>,

<argument><expr><name>dst_r3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_idct_luma_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>in_r0</name></decl>, <decl><type ref="prev"/><name>in_l0</name></decl>, <decl><type ref="prev"/><name>in_r1</name></decl>, <decl><type ref="prev"/><name>in_l1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT_LUMA4x4_COL</name><argument_list>(<argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>,

<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HEVC_IDCT_LUMA4x4_COL</name><argument_list>(<argument><expr><name>in_r0</name></expr></argument>, <argument><expr><name>in_l0</name></expr></argument>, <argument><expr><name>in_r1</name></expr></argument>, <argument><expr><name>in_l1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>,

<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_W2_SH</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_4x4_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_8x8_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_8x8_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_16x16_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_16x16_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_32x32_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_32x32_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_addblk_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_addblk_4x4_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_addblk_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_addblk_8x8_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_addblk_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_addblk_16x16_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_addblk_32x32_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_addblk_32x32_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_dc_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_dc_4x4_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_dc_8x8_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_dc_16x16_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_dc_16x16_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_dc_32x32_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_dc_32x32_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_idct_luma_4x4_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_idct_luma_4x4_msa</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
