<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\mpegvideo_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263dsp_mips.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h263_dct_unquantize_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>qmul</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>qadd</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>n_coeffs</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>loop_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block_dup</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>block_vec</name></decl>, <decl><type ref="prev"/><name>qmul_vec</name></decl>, <decl><type ref="prev"/><name>qadd_vec</name></decl>, <decl><type ref="prev"/><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>add</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>mul</name></decl>, <decl><type ref="prev"/><name>zero_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qmul_vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>qmul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd_vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>qadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <operator>(</operator><name>n_coeffs</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block_vec</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>block_dup</name> <operator>+</operator> <name>loop_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_mask</name> <operator>=</operator> <call><name>__msa_ceqi_h</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <name>block_vec</name> <operator>*</operator> <name>qmul_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name>mul</name> <operator>-</operator> <name>qadd_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <name>mul</name> <operator>+</operator> <name>qadd_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>sub</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_vec</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>zero_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><name>block_dup</name> <operator>+</operator> <name>loop_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_dup</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n_coeffs</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>loop_start</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <name>n_coeffs</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mpeg2_dct_unquantize_inter_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>qscale</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>sum_res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>block_vec</name></decl>, <decl><type ref="prev"/><name>block_neg</name></decl>, <decl><type ref="prev"/><name>qscale_vec</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>block_org0</name></decl>, <decl><type ref="prev"/><name>block_org1</name></decl>, <decl><type ref="prev"/><name>block_org2</name></decl>, <decl><type ref="prev"/><name>block_org3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>quant_m0</name></decl>, <decl><type ref="prev"/><name>quant_m1</name></decl>, <decl><type ref="prev"/><name>quant_m2</name></decl>, <decl><type ref="prev"/><name>quant_m3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>mul</name></decl>, <decl><type ref="prev"/><name>zero_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>mul_vec</name></decl>, <decl><type ref="prev"/><name>qscale_l</name></decl>, <decl><type ref="prev"/><name>qscale_r</name></decl>, <decl><type ref="prev"/><name>quant_m_r</name></decl>, <decl><type ref="prev"/><name>quant_m_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>block_l</name></decl>, <decl><type ref="prev"/><name>block_r</name></decl>, <decl><type ref="prev"/><name>sad</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qscale_vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>block_org0</name></expr></argument>, <argument><expr><name>block_org1</name></expr></argument>, <argument><expr><name>block_org2</name></expr></argument>, <argument><expr><name>block_org3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>quant_matrix</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>quant_m0</name></expr></argument>, <argument><expr><name>quant_m1</name></expr></argument>, <argument><expr><name>quant_m2</name></expr></argument>, <argument><expr><name>quant_m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>block_org0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_mask</name> <operator>=</operator> <call><name>__msa_ceqi_h</name><argument_list>(<argument><expr><name>block_org0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator><name>block_org0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><name>block_r</name></expr></argument>, <argument><expr><name>block_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>qscale_vec</name></expr></argument>, <argument><expr><name>qscale_r</name></expr></argument>, <argument><expr><name>qscale_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>quant_m0</name></expr></argument>, <argument><expr><name>quant_m_r</name></expr></argument>, <argument><expr><name>quant_m_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_l</name> <operator>*</operator> <name>qscale_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_l</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_r</name> <operator>*</operator> <name>qscale_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_r</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>mul</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mul</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org0</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>zero_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>__msa_hadd_s_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_res</name> <operator>+=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>block_org1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_mask</name> <operator>=</operator> <call><name>__msa_ceqi_h</name><argument_list>(<argument><expr><name>block_org1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>block_org1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><name>block_r</name></expr></argument>, <argument><expr><name>block_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>qscale_vec</name></expr></argument>, <argument><expr><name>qscale_r</name></expr></argument>, <argument><expr><name>qscale_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>quant_m1</name></expr></argument>, <argument><expr><name>quant_m_r</name></expr></argument>, <argument><expr><name>quant_m_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_l</name> <operator>*</operator> <name>qscale_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_l</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_r</name> <operator>*</operator> <name>qscale_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_r</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>__msa_pckev_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>mul</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mul</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org1</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>zero_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>__msa_hadd_s_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_res</name> <operator>+=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>block_org2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_mask</name> <operator>=</operator> <call><name>__msa_ceqi_h</name><argument_list>(<argument><expr><name>block_org2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>block_org2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><name>block_r</name></expr></argument>, <argument><expr><name>block_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>qscale_vec</name></expr></argument>, <argument><expr><name>qscale_r</name></expr></argument>, <argument><expr><name>qscale_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>quant_m2</name></expr></argument>, <argument><expr><name>quant_m_r</name></expr></argument>, <argument><expr><name>quant_m_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_l</name> <operator>*</operator> <name>qscale_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_l</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_r</name> <operator>*</operator> <name>qscale_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_r</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>__msa_pckev_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>mul</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mul</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org2</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>zero_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>__msa_hadd_s_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_res</name> <operator>+=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>block_org3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_mask</name> <operator>=</operator> <call><name>__msa_ceqi_h</name><argument_list>(<argument><expr><name>block_org3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>block_org3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_vec</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>block_vec</name></expr></argument>, <argument><expr><name>block_r</name></expr></argument>, <argument><expr><name>block_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>qscale_vec</name></expr></argument>, <argument><expr><name>qscale_r</name></expr></argument>, <argument><expr><name>qscale_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>quant_m3</name></expr></argument>, <argument><expr><name>quant_m_r</name></expr></argument>, <argument><expr><name>quant_m_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_l</name> <operator>*</operator> <name>qscale_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_l</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>=</operator> <name>block_r</name> <operator>*</operator> <name>qscale_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_vec</name> <operator>*=</operator> <name>quant_m_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_r</name> <operator>=</operator> <name>mul_vec</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>__msa_pckev_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>block_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_neg</name> <operator>=</operator> <operator>-</operator> <name>mul</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mul</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_neg</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>block_org3</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>zero_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>__msa_hadd_s_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_res</name> <operator>+=</operator> <call><name>HADD_SW_S32</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sum_res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dct_unquantize_h263_intra_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <ternary><condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nCoeffs</name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nCoeffs</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>raster_end</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>index</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>h263_dct_unquantize_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>, <argument><expr><name>qadd</name></expr></argument>, <argument><expr><name>nCoeffs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dct_unquantize_h263_inter_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>raster_end</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>index</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>h263_dct_unquantize_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>, <argument><expr><name>qadd</name></expr></argument>, <argument><expr><name>nCoeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dct_unquantize_mpeg2_inter_msa</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>mpeg2_dct_unquantize_inter_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>qscale</name></expr></argument>, <argument><expr><name>quant_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>^=</operator> <name>sum</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
