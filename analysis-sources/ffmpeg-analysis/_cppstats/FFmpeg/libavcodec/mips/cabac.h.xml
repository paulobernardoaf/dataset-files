<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\cabac.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/cabac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_cabac_inline</name></cpp:macro> <cpp:value>get_cabac_inline_mips</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_inline</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>mips_reg</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"lbu %[bit], 0(%[state]) \n\t"

"and %[tmp0], %[c_range], 0xC0 \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[tmp0] \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[tables] \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[bit] \n\t"

"lbu %[tmp1], %[lps_off](%[tmp0]) \n\t"

PTR_SUBU "%[c_range], %[c_range], %[tmp1] \n\t"

PTR_SLL "%[tmp0], %[c_range], 0x11 \n\t"

PTR_SUBU "%[tmp0], %[tmp0], %[c_low] \n\t"

PTR_SRA "%[tmp2], %[tmp0], 0x1F \n\t"

"beqz %[tmp2], 1f \n\t"

PTR_SLL "%[tmp0], %[c_range], 0x11 \n\t"

PTR_SUBU "%[c_low], %[c_low], %[tmp0] \n\t"

PTR_SUBU "%[tmp0], %[tmp1], %[c_range] \n\t"

PTR_ADDU "%[c_range], %[c_range], %[tmp0] \n\t"

"xor %[bit], %[bit], %[tmp2] \n\t"

"1: \n\t"

PTR_ADDU "%[tmp0], %[tables], %[bit] \n\t"

"lbu %[tmp1], %[mlps_off](%[tmp0]) \n\t"

PTR_ADDU "%[tmp0], %[tables], %[c_range] \n\t"

"lbu %[tmp2], %[norm_off](%[tmp0]) \n\t"

"sb %[tmp1], 0(%[state]) \n\t"

"and %[bit], %[bit], 0x01 \n\t"

PTR_SLL "%[c_range], %[c_range], %[tmp2] \n\t"

PTR_SLL "%[c_low], %[c_low], %[tmp2] \n\t"

"and %[tmp0], %[c_low], %[cabac_mask] \n\t"

"bnez %[tmp0], 1f \n\t"

PTR_ADDIU "%[tmp0], %[c_low], -0x01 \n\t"

"xor %[tmp0], %[c_low], %[tmp0] \n\t"

PTR_SRA "%[tmp0], %[tmp0], 0x0f \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[tables] \n\t"

"lbu %[tmp2], %[norm_off](%[tmp0]) \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CABAC_BITS</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>

"lbu %[tmp0], 0(%[c_bytestream]) \n\t"

"lbu %[tmp1], 1(%[c_bytestream]) \n\t"

PTR_SLL "%[tmp0], %[tmp0], 0x09 \n\t"

PTR_SLL "%[tmp1], %[tmp1], 0x01 \n\t"

PTR_ADDU "%[tmp0], %[tmp0], %[tmp1] \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"lbu %[tmp0], 0(%[c_bytestream]) \n\t"

PTR_SLL "%[tmp0], %[tmp0], 0x01 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

PTR_SUBU "%[tmp0], %[tmp0], %[cabac_mask] \n\t"

"li %[tmp1], 0x07 \n\t"

PTR_SUBU "%[tmp1], %[tmp1], %[tmp2] \n\t"

PTR_SLL "%[tmp0], %[tmp0], %[tmp1] \n\t"

PTR_ADDU "%[c_low], %[c_low], %[tmp0] \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>

"bge %[c_bytestream], %[c_bytestream_end], 1f \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

PTR_ADDIU "%[c_bytestream], %[c_bytestream], 0X02 \n\t"

"1: \n\t"

: [bit]"=&amp;r"(bit), [tmp0]"=&amp;r"(tmp0), [tmp1]"=&amp;r"(tmp1), [tmp2]"=&amp;r"(tmp2),

[c_range]"+&amp;r"(c-&gt;range), [c_low]"+&amp;r"(c-&gt;low),

[c_bytestream]"+&amp;r"(c-&gt;bytestream)

: [state]"r"(state), [tables]"r"(ff_h264_cabac_tables),

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>

[c_bytestream_end]"r"(c-&gt;bytestream_end),

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

[lps_off]"i"(H264_LPS_RANGE_OFFSET),

[mlps_off]"i"(H264_MLPS_STATE_OFFSET + 128),

[norm_off]"i"(H264_NORM_SHIFT_OFFSET),

[cabac_mask]"i"(CABAC_MASK)

: "memory"

);</asm>

<return>return <expr><name>bit</name></expr>;</return>

</block_content>}</block></function>

</unit>
