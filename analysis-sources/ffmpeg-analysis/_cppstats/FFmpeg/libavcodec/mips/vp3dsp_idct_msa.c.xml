<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\vp3dsp_idct_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp3dsp_mips.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/rnd_avg.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>, <decl><type ref="prev"/><name>r4</name></decl>, <decl><type ref="prev"/><name>r5</name></decl>, <decl><type ref="prev"/><name>r6</name></decl>, <decl><type ref="prev"/><name>r7</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>r0_r</name></decl>, <decl><type ref="prev"/><name>r0_l</name></decl>, <decl><type ref="prev"/><name>r1_r</name></decl>, <decl><type ref="prev"/><name>r1_l</name></decl>, <decl><type ref="prev"/><name>r2_r</name></decl>, <decl><type ref="prev"/><name>r2_l</name></decl>, <decl><type ref="prev"/><name>r3_r</name></decl>, <decl><type ref="prev"/><name>r3_l</name></decl>,

<decl><type ref="prev"/><name>r4_r</name></decl>, <decl><type ref="prev"/><name>r4_l</name></decl>, <decl><type ref="prev"/><name>r5_r</name></decl>, <decl><type ref="prev"/><name>r5_l</name></decl>, <decl><type ref="prev"/><name>r6_r</name></decl>, <decl><type ref="prev"/><name>r6_l</name></decl>, <decl><type ref="prev"/><name>r7_r</name></decl>, <decl><type ref="prev"/><name>r7_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>Ad</name></decl>, <decl><type ref="prev"/><name>Bd</name></decl>, <decl><type ref="prev"/><name>Cd</name></decl>, <decl><type ref="prev"/><name>Dd</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>F</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>H</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>Ed</name></decl>, <decl><type ref="prev"/><name>Gd</name></decl>, <decl><type ref="prev"/><name>Add</name></decl>, <decl><type ref="prev"/><name>Bdd</name></decl>, <decl><type ref="prev"/><name>Fd</name></decl>, <decl><type ref="prev"/><name>Hd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>sign_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>, <decl><type ref="prev"/><name>c7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>f0</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>, <decl><type ref="prev"/><name>f3</name></decl>, <decl><type ref="prev"/><name>f4</name></decl>, <decl><type ref="prev"/><name>f5</name></decl>, <decl><type ref="prev"/><name>f6</name></decl>, <decl><type ref="prev"/><name>f7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>sign_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst64277w</name> <init>= <expr><block>{<expr><literal type="number">64277</literal></expr>, <expr><literal type="number">64277</literal></expr>, <expr><literal type="number">64277</literal></expr>, <expr><literal type="number">64277</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst60547w</name> <init>= <expr><block>{<expr><literal type="number">60547</literal></expr>, <expr><literal type="number">60547</literal></expr>, <expr><literal type="number">60547</literal></expr>, <expr><literal type="number">60547</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst54491w</name> <init>= <expr><block>{<expr><literal type="number">54491</literal></expr>, <expr><literal type="number">54491</literal></expr>, <expr><literal type="number">54491</literal></expr>, <expr><literal type="number">54491</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst46341w</name> <init>= <expr><block>{<expr><literal type="number">46341</literal></expr>, <expr><literal type="number">46341</literal></expr>, <expr><literal type="number">46341</literal></expr>, <expr><literal type="number">46341</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst36410w</name> <init>= <expr><block>{<expr><literal type="number">36410</literal></expr>, <expr><literal type="number">36410</literal></expr>, <expr><literal type="number">36410</literal></expr>, <expr><literal type="number">36410</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst25080w</name> <init>= <expr><block>{<expr><literal type="number">25080</literal></expr>, <expr><literal type="number">25080</literal></expr>, <expr><literal type="number">25080</literal></expr>, <expr><literal type="number">25080</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst12785w</name> <init>= <expr><block>{<expr><literal type="number">12785</literal></expr>, <expr><literal type="number">12785</literal></expr>, <expr><literal type="number">12785</literal></expr>, <expr><literal type="number">12785</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst8w</name> <init>= <expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst2048w</name> <init>= <expr><block>{<expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>cnst128w</name> <init>= <expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r0_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r0_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r1_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r1_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r2_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r2_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r3_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r3_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r4_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r4_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r5_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r5_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r6_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r6_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>__msa_clti_s_h</name><argument_list>(<argument><expr><name>r7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r7_r</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r7_l</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_ilvl_h</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_r</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r7_r</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_r</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r7_r</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r3_r</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r5_r</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r5_r</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r3_r</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_r</name> <operator>+</operator> <name>r4_r</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_r</name> <operator>-</operator> <name>r4_r</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r2_r</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r6_r</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r2_r</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r6_r</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0_r</name> <operator>=</operator> <name>Gd</name> <operator>+</operator> <name>Cd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r7_r</name> <operator>=</operator> <name>Gd</name> <operator>-</operator> <name>Cd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r1_r</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>Hd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r2_r</name> <operator>=</operator> <name>Add</name> <operator>-</operator> <name>Hd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r3_r</name> <operator>=</operator> <name>Ed</name> <operator>+</operator> <name>Dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r4_r</name> <operator>=</operator> <name>Ed</name> <operator>-</operator> <name>Dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r5_r</name> <operator>=</operator> <name>Fd</name> <operator>+</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r6_r</name> <operator>=</operator> <name>Fd</name> <operator>-</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_l</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r7_l</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_l</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r7_l</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r3_l</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r5_l</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r5_l</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r3_l</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_l</name> <operator>+</operator> <name>r4_l</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_l</name> <operator>-</operator> <name>r4_l</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r2_l</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r6_l</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r2_l</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r6_l</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0_l</name> <operator>=</operator> <name>Gd</name> <operator>+</operator> <name>Cd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r7_l</name> <operator>=</operator> <name>Gd</name> <operator>-</operator> <name>Cd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r1_l</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>Hd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r2_l</name> <operator>=</operator> <name>Add</name> <operator>-</operator> <name>Hd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r3_l</name> <operator>=</operator> <name>Ed</name> <operator>+</operator> <name>Dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r4_l</name> <operator>=</operator> <name>Ed</name> <operator>-</operator> <name>Dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r5_l</name> <operator>=</operator> <name>Fd</name> <operator>+</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r6_l</name> <operator>=</operator> <name>Fd</name> <operator>-</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>r0_r</name></expr></argument>, <argument><expr><name>r1_r</name></expr></argument>, <argument><expr><name>r2_r</name></expr></argument>, <argument><expr><name>r3_r</name></expr></argument>,

<argument><expr><name>r0_r</name></expr></argument>, <argument><expr><name>r1_r</name></expr></argument>, <argument><expr><name>r2_r</name></expr></argument>, <argument><expr><name>r3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>r0_l</name></expr></argument>, <argument><expr><name>r1_l</name></expr></argument>, <argument><expr><name>r2_l</name></expr></argument>, <argument><expr><name>r3_l</name></expr></argument>,

<argument><expr><name>r0_l</name></expr></argument>, <argument><expr><name>r1_l</name></expr></argument>, <argument><expr><name>r2_l</name></expr></argument>, <argument><expr><name>r3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_r</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r3_l</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_r</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r3_l</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r3_r</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r1_l</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1_l</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r3_r</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_r</name> <operator>+</operator> <name>r0_l</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>cnst8w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_r</name> <operator>-</operator> <name>r0_l</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>+=</operator> <name>cnst8w</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>cnst2048w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>+=</operator> <name>cnst2048w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r2_r</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r2_l</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r2_r</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r2_l</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>Gd</name> <operator>+</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>Gd</name> <operator>-</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>Add</name> <operator>+</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><name>Add</name> <operator>-</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><name>Ed</name> <operator>+</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><name>Ed</name> <operator>-</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><name>Fd</name> <operator>+</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><name>Fd</name> <operator>-</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>,

<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>,

<argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>,

<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>,

<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>c0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>+=</operator> <name>c7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>+=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>+=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>c3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>+=</operator> <name>c4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>+=</operator> <name>c5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>+=</operator> <name>c6</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CLIP_SW8_0_255</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_t</name> <operator>=</operator> <call><name>__msa_ceqi_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator><name>sign_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0_r</name> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>cnst128w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW_0_255</name><argument_list>(<argument><expr><name>Bdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW8_0_255</name><argument_list>(<argument><expr><name>Ad</name></expr></argument>, <argument><expr><name>Bd</name></expr></argument>, <argument><expr><name>Cd</name></expr></argument>, <argument><expr><name>Dd</name></expr></argument>, <argument><expr><name>Ed</name></expr></argument>, <argument><expr><name>Fd</name></expr></argument>, <argument><expr><name>Gd</name></expr></argument>, <argument><expr><name>Hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Ad</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Bd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Cd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Dd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Ed</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Fd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Gd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Hd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_t</name> <operator>=</operator> <call><name>__msa_ceqi_w</name><argument_list>(<argument><expr><name>sign_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>B</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>D</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>E</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>F</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>G</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>H</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r0_r</name> <operator>=</operator> <name>Ad</name> <operator>+</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r1_r</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r2_r</name> <operator>=</operator> <name>Cd</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r3_r</name> <operator>=</operator> <name>Dd</name> <operator>+</operator> <name>E</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0_l</name> <operator>=</operator> <name>Ed</name> <operator>+</operator> <name>F</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r1_l</name> <operator>=</operator> <name>Fd</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r2_l</name> <operator>=</operator> <name>Gd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r3_l</name> <operator>=</operator> <name>Hd</name> <operator>+</operator> <name>B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>r4_r</name></expr></argument>, <argument><expr><name>r5_r</name></expr></argument>, <argument><expr><name>r6_r</name></expr></argument>, <argument><expr><name>r7_r</name></expr></argument>,

<argument><expr><name>r4_r</name></expr></argument>, <argument><expr><name>r5_r</name></expr></argument>, <argument><expr><name>r6_r</name></expr></argument>, <argument><expr><name>r7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>r4_l</name></expr></argument>, <argument><expr><name>r5_l</name></expr></argument>, <argument><expr><name>r6_l</name></expr></argument>, <argument><expr><name>r7_l</name></expr></argument>,

<argument><expr><name>r4_l</name></expr></argument>, <argument><expr><name>r5_l</name></expr></argument>, <argument><expr><name>r6_l</name></expr></argument>, <argument><expr><name>r7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r5_r</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r7_l</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r5_r</name> <operator>*</operator> <name>cnst12785w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r7_l</name> <operator>*</operator> <name>cnst64277w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r7_r</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r5_l</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r5_l</name> <operator>*</operator> <name>cnst54491w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r7_r</name> <operator>*</operator> <name>cnst36410w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r4_r</name> <operator>+</operator> <name>r4_l</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>cnst8w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r4_r</name> <operator>-</operator> <name>r4_l</name><operator>)</operator> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>+=</operator> <name>cnst8w</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>cnst2048w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>+=</operator> <name>cnst2048w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r6_r</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r6_l</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r6_r</name> <operator>*</operator> <name>cnst25080w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>r6_l</name> <operator>*</operator> <name>cnst60547w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>Gd</name> <operator>+</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>Gd</name> <operator>-</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>Add</name> <operator>+</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><name>Add</name> <operator>-</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><name>Ed</name> <operator>+</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><name>Ed</name> <operator>-</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><name>Fd</name> <operator>+</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><name>Fd</name> <operator>-</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ILVL_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>,

<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>,

<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>c0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>+=</operator> <name>c7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>+=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>+=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>c3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>+=</operator> <name>c4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>+=</operator> <name>c5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>+=</operator> <name>c6</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CLIP_SW8_0_255</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r5_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r6_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_l</name> <operator>=</operator> <call><name>__msa_or_v</name><argument_list>(<argument><expr><name>sign_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>r7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_t</name> <operator>=</operator> <call><name>__msa_ceqi_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator><name>sign_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r4_r</name> <operator>*</operator> <name>cnst46341w</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>cnst128w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW_0_255</name><argument_list>(<argument><expr><name>Bdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bdd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>c7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW8_0_255</name><argument_list>(<argument><expr><name>Ad</name></expr></argument>, <argument><expr><name>Bd</name></expr></argument>, <argument><expr><name>Cd</name></expr></argument>, <argument><expr><name>Dd</name></expr></argument>, <argument><expr><name>Ed</name></expr></argument>, <argument><expr><name>Fd</name></expr></argument>, <argument><expr><name>Gd</name></expr></argument>, <argument><expr><name>Hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Ad</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Bd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Bd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Cd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Dd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Dd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Ed</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Fd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Gd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Hd</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>Hd</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_t</name> <operator>=</operator> <call><name>__msa_ceqi_w</name><argument_list>(<argument><expr><name>sign_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>B</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>D</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>E</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>F</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>G</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator><call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>H</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>sign_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r4_r</name> <operator>=</operator> <name>Ad</name> <operator>+</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r5_r</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r6_r</name> <operator>=</operator> <name>Cd</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r7_r</name> <operator>=</operator> <name>Dd</name> <operator>+</operator> <name>E</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r4_l</name> <operator>=</operator> <name>Ed</name> <operator>+</operator> <name>F</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r5_l</name> <operator>=</operator> <name>Fd</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r6_l</name> <operator>=</operator> <name>Gd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r7_l</name> <operator>=</operator> <name>Hd</name> <operator>+</operator> <name>B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>r0_r</name></expr></argument>, <argument><expr><name>r4_r</name></expr></argument>, <argument><expr><name>r1_r</name></expr></argument>, <argument><expr><name>r5_r</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>r2_r</name></expr></argument>, <argument><expr><name>r6_r</name></expr></argument>, <argument><expr><name>r3_r</name></expr></argument>, <argument><expr><name>r7_r</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>r0_l</name></expr></argument>, <argument><expr><name>r4_l</name></expr></argument>, <argument><expr><name>r1_l</name></expr></argument>, <argument><expr><name>r5_l</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>r2_l</name></expr></argument>, <argument><expr><name>r6_l</name></expr></argument>, <argument><expr><name>r3_l</name></expr></argument>, <argument><expr><name>r7_l</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3_idct_put_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>idct_msa</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3_idct_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>idct_msa</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3_idct_dc_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>dc</name> <init>= <expr><block>{<expr><name>i</name></expr>, <expr><name>i</name></expr>, <expr><name>i</name></expr>, <expr><name>i</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>, <decl><type ref="prev"/><name>c7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>e2</name></decl>, <decl><type ref="prev"/><name>e3</name></decl>, <decl><type ref="prev"/><name>e4</name></decl>, <decl><type ref="prev"/><name>e5</name></decl>, <decl><type ref="prev"/><name>e6</name></decl>, <decl><type ref="prev"/><name>e7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>, <decl><type ref="prev"/><name>r4</name></decl>, <decl><type ref="prev"/><name>r5</name></decl>, <decl><type ref="prev"/><name>r6</name></decl>, <decl><type ref="prev"/><name>r7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>,

<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>,

<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>,

<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>,

<argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e0</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e3</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e4</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e5</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e6</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e7</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW8_0_255</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>,

<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>,

<argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r1</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r2</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r3</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r4</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r5</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r6</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r7</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW8_0_255</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>e2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>e4</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>e6</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>e7</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3_v_loop_filter_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>first_pixel</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bounding_values</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nstride</name> <init>= <expr><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>f0</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>g0</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>r0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>cnst3h</name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>,

<decl><type ref="prev"/><name>cnst4h</name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>temp_16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>temp_32</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>first_pixel</name> <operator>+</operator> <name>nstride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>,

<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c3</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <name>c1</name><operator>)</operator> <operator>*</operator> <name>cnst3h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>+=</operator> <name>cnst4h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>temp_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp_32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bounding_values</name><index>[<expr><name><name>temp_16</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>LD_SW2</name><argument_list>(<argument><expr><name>temp_32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H2_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H2_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f0</name> <operator>+=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>+=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g0</name> <operator>-=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g1</name> <operator>-=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW4_0_255</name><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>first_pixel</name> <operator>+</operator> <name>nstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>first_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3_h_loop_filter_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>first_pixel</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bounding_values</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>, <decl><type ref="prev"/><name>c7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>r0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>f0</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>g0</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>cnst3h</name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>,

<decl><type ref="prev"/><name>cnst4h</name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>temp_16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>temp_32</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>first_pixel</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>,

<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>,

<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>,

<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c3</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <name>c1</name><operator>)</operator> <operator>*</operator> <name>cnst3h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>+=</operator> <name>cnst4h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>temp_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp_32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bounding_values</name><index>[<expr><name><name>temp_16</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>LD_SW2</name><argument_list>(<argument><expr><name>temp_32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H2_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H2_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f0</name> <operator>+=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>+=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g0</name> <operator>-=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g1</name> <operator>-=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SW4_0_255</name><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>first_pixel</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>first_pixel</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels_l2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>e2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>f0</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4u32</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0xfefefefe</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>fmask</name> <init>= <expr><block>{<expr><name>value</name></expr>, <expr><name>value</name></expr>, <expr><name>value</name></expr>, <expr><name>value</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckod_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a3</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckod_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckod_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckod_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_xor_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>e0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>fmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v4u32</name><operator>)</operator><name>e0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t0</name> <operator>+</operator> <operator>(</operator><name>v4u32</name><operator>)</operator><name>e2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_xor_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>e1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>fmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v4u32</name><operator>)</operator><name>e1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <operator>(</operator><name>v4u32</name><operator>)</operator><name>e2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_xor_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f0</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>f0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>fmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v4u32</name><operator>)</operator><name>f0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <operator>(</operator><name>v4u32</name><operator>)</operator><name>f2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_xor_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>f1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>fmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v4u32</name><operator>)</operator><name>f1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_and_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>a3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><name>v4u32</name><operator>)</operator><name>f2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src2</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>no_rnd_avg32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src2</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>no_rnd_avg32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
