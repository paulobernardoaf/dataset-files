<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\h264dsp_init_mips.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_mips.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MSA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>h264dsp_init_msa</name><parameter_list>(<parameter><decl><type><name>H264DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>bit_depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_h264_v_lpf_luma_inter_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_h264_h_lpf_luma_inter_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_mbaff</name></name> <operator>=</operator>

<name>ff_h264_h_loop_filter_luma_mbaff_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_h264_v_lpf_luma_intra_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_h264_h_lpf_luma_intra_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_mbaff_intra</name></name> <operator>=</operator>

<name>ff_h264_h_loop_filter_luma_mbaff_intra_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_h264_v_lpf_chroma_inter_msa</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_h264_h_lpf_chroma_inter_msa</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator>

<name>ff_h264_h_loop_filter_chroma422_msa</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_mbaff</name></name> <operator>=</operator>

<name>ff_h264_h_loop_filter_chroma422_mbaff_msa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator>

<name>ff_h264_v_lpf_chroma_intra_msa</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator>

<name>ff_h264_h_lpf_chroma_intra_msa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_weight_h264_pixels16_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_weight_h264_pixels8_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_weight_h264_pixels4_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_biweight_h264_pixels16_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_biweight_h264_pixels8_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_biweight_h264_pixels4_8_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>ff_h264_idct8_addblk_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct4x4_addblk_dc_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct8_dc_addblk_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_msa</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_msa</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_422_msa</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16_intra_msa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_luma_dc_dequant_idct</name></name> <operator>=</operator> <name>ff_h264_deq_idct_luma_dc_msa</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMI</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>h264dsp_init_mmi</name><parameter_list>(<parameter><decl><type><name>H264DSPContext</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_add_pixels4_clear</name></name> <operator>=</operator> <name>ff_h264_add_pixels4_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>ff_h264_idct8_add_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct_dc_add_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct8_dc_add_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16intra_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_8_mmi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_8_mmi</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_422_8_mmi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_luma_dc_dequant_idct</name></name> <operator>=</operator> <name>ff_h264_luma_dc_dequant_idct_8_mmi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_chroma_dc_dequant_idct</name></name> <operator>=</operator>

<name>ff_h264_chroma_dc_dequant_idct_8_mmi</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_chroma_dc_dequant_idct</name></name> <operator>=</operator>

<name>ff_h264_chroma422_dc_dequant_idct_8_mmi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_pixels16_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_pixels8_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_pixels4_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_pixels16_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_pixels8_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_pixels4_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_8_mmi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator>

<name>ff_deblock_h_chroma_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator>

<name>ff_deblock_h_chroma_intra_8_mmi</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_v_luma_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_luma_intra_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_8_mmi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_8_mmi</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264dsp_init_mips</name><parameter_list>(<parameter><decl><type><name>H264DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMI</name></expr></cpp:if>

<expr_stmt><expr><call><name>h264dsp_init_mmi</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MSA</name></expr></cpp:if>

<expr_stmt><expr><call><name>h264dsp_init_msa</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
