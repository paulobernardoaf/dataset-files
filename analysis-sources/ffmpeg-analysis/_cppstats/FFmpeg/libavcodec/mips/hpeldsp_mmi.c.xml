<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\hpeldsp_mmi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_mips.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bit_depth_template.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_put_pixels4_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

MMI_ULWC1(%[ftmp0], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULWC1(%[ftmp1], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

PTR_ADDI "%[h], %[h], -0x02 \n\t"

MMI_SWC1(%[ftmp0], %[block], 0x00)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SWC1(%[ftmp1], %[block], 0x00)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

RESTRICT_ASM_LOW32

[block]"+&amp;r"(block), [pixels]"+&amp;r"(pixels),

[h]"+&amp;r"(h)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp1], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp2], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp3], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SDC1(%[ftmp1], %[block], 0x00)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SDC1(%[ftmp2], %[block], 0x00)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SDC1(%[ftmp3], %[block], 0x00)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

RESTRICT_ASM_ALL64

[block]"+&amp;r"(block), [pixels]"+&amp;r"(pixels),

[h]"+&amp;r"(h)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

MMI_ULDC1(%[ftmp2], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp1], %[pixels], 0x00)

MMI_ULDC1(%[ftmp3], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp4], %[pixels], 0x00)

MMI_ULDC1(%[ftmp6], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp5], %[pixels], 0x00)

MMI_ULDC1(%[ftmp7], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

MMI_SDC1(%[ftmp2], %[block], 0x08)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SDC1(%[ftmp1], %[block], 0x00)

MMI_SDC1(%[ftmp3], %[block], 0x08)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SDC1(%[ftmp4], %[block], 0x00)

MMI_SDC1(%[ftmp6], %[block], 0x08)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

MMI_SDC1(%[ftmp5], %[block], 0x00)

MMI_SDC1(%[ftmp7], %[block], 0x08)

PTR_ADDU "%[block], %[block], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

RESTRICT_ASM_ALL64

[block]"+&amp;r"(block), [pixels]"+&amp;r"(pixels),

[h]"+&amp;r"(h)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDU "%[addr0], %[pixels], %[line_size] \n\t"

MMI_ULWC1(%[ftmp0], %[pixels], 0x00)

MMI_ULWC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[block], %[line_size] \n\t"

MMI_ULWC1(%[ftmp2], %[block], 0x00)

MMI_ULWC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDI "%[h], %[h], -0x02 \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

MMI_SWC1(%[ftmp0], %[block], 0x00)

MMI_SWC1(%[ftmp1], %[addr1], 0x00)

PTR_ADDU "%[pixels], %[addr0], %[line_size] \n\t"

PTR_ADDU "%[block], %[addr1], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

RESTRICT_ASM_LOW32

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[block]"+&amp;r"(block), [pixels]"+&amp;r"(pixels),

[h]"+&amp;r"(h)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

PTR_ADDU "%[addr2], %[line_size], %[line_size] \n\t"

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

PTR_ADDU "%[addr0], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[block], %[line_size] \n\t"

MMI_ULDC1(%[ftmp2], %[block], 0x00)

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

MMI_SDXC1(%[ftmp1], %[block], %[line_size], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[addr2] \n\t"

PTR_ADDU "%[block], %[block], %[addr2] \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

PTR_ADDU "%[addr0], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[block], %[line_size] \n\t"

MMI_ULDC1(%[ftmp2], %[block], 0x00)

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

MMI_SDXC1(%[ftmp1], %[block], %[line_size], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[addr2] \n\t"

PTR_ADDU "%[block], %[block], %[addr2] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

RESTRICT_ASM_ALL64

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[addr2]"=&amp;r"(addr[2]),

[block]"+&amp;r"(block), [pixels]"+&amp;r"(pixels),

[h]"+&amp;r"(h)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

MMI_ULDC1(%[ftmp4], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp1], %[pixels], 0x00)

MMI_ULDC1(%[ftmp5], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp2], %[block], 0x00)

MMI_ULDC1(%[ftmp6], %[block], 0x08)

PTR_ADDU "%[addr0], %[block], %[line_size] \n\t"

MMI_ULDC1(%[ftmp3], %[addr0], 0x00)

MMI_ULDC1(%[ftmp7], %[addr0], 0x08)

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp4], %[ftmp4], %[ftmp6] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"pavgb %[ftmp5], %[ftmp5], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

MMI_SDC1(%[ftmp4], %[block], 0x08)

MMI_SDC1(%[ftmp1], %[addr0], 0x00)

MMI_SDC1(%[ftmp5], %[addr0], 0x08)

PTR_ADDU "%[block], %[addr0], %[line_size] \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

MMI_ULDC1(%[ftmp4], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp1], %[pixels], 0x00)

MMI_ULDC1(%[ftmp5], %[pixels], 0x08)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_ULDC1(%[ftmp2], %[block], 0x00)

MMI_ULDC1(%[ftmp6], %[block], 0x08)

PTR_ADDU "%[addr0], %[block], %[line_size] \n\t"

MMI_ULDC1(%[ftmp3], %[addr0], 0x00)

MMI_ULDC1(%[ftmp7], %[addr0], 0x08)

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp4], %[ftmp4], %[ftmp6] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"pavgb %[ftmp5], %[ftmp5], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[block], 0x00)

MMI_SDC1(%[ftmp4], %[block], 0x08)

MMI_SDC1(%[ftmp1], %[addr0], 0x00)

MMI_SDC1(%[ftmp5], %[addr0], 0x08)

PTR_ADDU "%[block], %[addr0], %[line_size] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

RESTRICT_ASM_ALL64

[addr0]"=&amp;r"(addr[0]),

[block]"+&amp;r"(block), [pixels]"+&amp;r"(pixels),

[h]"+&amp;r"(h)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_put_pixels4_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULWC1(%[ftmp0], %[src1], 0x00)

MMI_ULWC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULWC1(%[ftmp2], %[src2], 0x00)

MMI_ULWC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[addr0], %[src_stride1] \n\t"

PTR_ADDU "%[src2], %[addr1], %[src_stride2] \n\t"

PTR_ADDI "%[h], %[h], -0x02 \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

MMI_SWC1(%[ftmp0], %[dst], 0x00)

PTR_ADDU "%[dst], %[dst], %[dst_stride] \n\t"

MMI_SWC1(%[ftmp1], %[dst], 0x00)

PTR_ADDU "%[dst], %[dst], %[dst_stride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

RESTRICT_ASM_LOW32

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[dst]"+&amp;r"(dst), [src1]"+&amp;r"(src1),

[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)

: [dst_stride]"r"((mips_reg)dst_stride),

[src_stride1]"r"((mips_reg)src_stride1),

[src_stride2]"r"((mips_reg)src_stride2)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_put_pixels8_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

PTR_ADDU "%[addr2], %[src_stride1], %[src_stride1] \n\t"

PTR_ADDU "%[addr3], %[src_stride2], %[src_stride2] \n\t"

PTR_ADDU "%[addr4], %[dst_stride], %[dst_stride] \n\t"

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

RESTRICT_ASM_ALL64

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[addr2]"=&amp;r"(addr[2]), [addr3]"=&amp;r"(addr[3]),

[addr4]"=&amp;r"(addr[4]),

[dst]"+&amp;r"(dst), [src1]"+&amp;r"(src1),

[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)

: [dst_stride]"r"((mips_reg)dst_stride),

[src_stride1]"r"((mips_reg)src_stride1),

[src_stride2]"r"((mips_reg)src_stride2)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_put_pixels16_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

PTR_ADDU "%[addr2], %[src_stride1], %[src_stride1] \n\t"

PTR_ADDU "%[addr3], %[src_stride2], %[src_stride2] \n\t"

PTR_ADDU "%[addr4], %[dst_stride], %[dst_stride] \n\t"

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp4], %[src1], 0x08)

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

MMI_ULDC1(%[ftmp5], %[addr0], 0x08)

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp6], %[src2], 0x08)

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

MMI_ULDC1(%[ftmp7], %[addr1], 0x08)

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp4], %[ftmp4], %[ftmp6] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"pavgb %[ftmp5], %[ftmp5], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

MMI_SDC1(%[ftmp4], %[dst], 0x08)

MMI_SDXC1(%[ftmp5], %[dst], %[dst_stride], 0x08)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp4], %[src1], 0x08)

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

MMI_ULDC1(%[ftmp5], %[addr0], 0x08)

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp6], %[src2], 0x08)

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

MMI_ULDC1(%[ftmp7], %[addr1], 0x08)

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp4], %[ftmp4], %[ftmp6] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"pavgb %[ftmp5], %[ftmp5], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

MMI_SDC1(%[ftmp4], %[dst], 0x08)

MMI_SDXC1(%[ftmp5], %[dst], %[dst_stride], 0x08)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

RESTRICT_ASM_ALL64

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[addr2]"=&amp;r"(addr[2]), [addr3]"=&amp;r"(addr[3]),

[addr4]"=&amp;r"(addr[4]),

[dst]"+&amp;r"(dst), [src1]"+&amp;r"(src1),

[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)

: [dst_stride]"r"((mips_reg)dst_stride),

[src_stride1]"r"((mips_reg)src_stride1),

[src_stride2]"r"((mips_reg)src_stride2)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_avg_pixels4_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"1: \n\t"

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULWC1(%[ftmp0], %[src1], 0x00)

MMI_ULWC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULWC1(%[ftmp2], %[src2], 0x00)

MMI_ULWC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[addr0], %[src_stride1] \n\t"

PTR_ADDU "%[src2], %[addr1], %[src_stride2] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

PTR_ADDU "%[addr2], %[dst], %[dst_stride] \n\t"

MMI_ULWC1(%[ftmp4], %[dst], 0x00)

MMI_ULWC1(%[ftmp5], %[addr2], 0x00)

PTR_ADDI "%[h], %[h], -0x02 \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

MMI_SWC1(%[ftmp0], %[dst], 0x00)

MMI_SWC1(%[ftmp1], %[addr2], 0x00)

PTR_ADDU "%[dst], %[addr2], %[dst_stride] \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

RESTRICT_ASM_LOW32

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[addr2]"=&amp;r"(addr[2]),

[dst]"+&amp;r"(dst), [src1]"+&amp;r"(src1),

[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)

: [dst_stride]"r"((mips_reg)dst_stride),

[src_stride1]"r"((mips_reg)src_stride1),

[src_stride2]"r"((mips_reg)src_stride2)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_avg_pixels8_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

PTR_ADDU "%[addr2], %[src_stride1], %[src_stride1] \n\t"

PTR_ADDU "%[addr3], %[src_stride2], %[src_stride2] \n\t"

PTR_ADDU "%[addr4], %[dst_stride], %[dst_stride] \n\t"

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

PTR_ADDU "%[addr5], %[dst], %[dst_stride] \n\t"

MMI_ULDC1(%[ftmp4], %[dst], 0x00)

MMI_ULDC1(%[ftmp5], %[addr5], 0x00)

"pavgb %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

PTR_ADDU "%[addr5], %[dst], %[dst_stride] \n\t"

MMI_ULDC1(%[ftmp4], %[dst], 0x00)

MMI_ULDC1(%[ftmp5], %[addr5], 0x00)

"pavgb %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

RESTRICT_ASM_ALL64

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[addr2]"=&amp;r"(addr[2]), [addr3]"=&amp;r"(addr[3]),

[addr4]"=&amp;r"(addr[4]), [addr5]"=&amp;r"(addr[5]),

[dst]"+&amp;r"(dst), [src1]"+&amp;r"(src1),

[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)

: [dst_stride]"r"((mips_reg)dst_stride),

[src_stride1]"r"((mips_reg)src_stride1),

[src_stride2]"r"((mips_reg)src_stride2)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_avg_pixels16_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>src_stride1</name></expr></argument>,

<argument><expr><name>src_stride2</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>,

<argument><expr><name>src_stride1</name></expr></argument>, <argument><expr><name>src_stride2</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels4_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels8_x2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_avg_pixels8_x2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ff_put_no_rnd_pixels8_l2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"pcmpeqb %[ftmp4], %[ftmp4], %[ftmp4] \n\t"

PTR_ADDU "%[addr2], %[src_stride1], %[src_stride1] \n\t"

PTR_ADDU "%[addr3], %[src_stride2], %[src_stride2] \n\t"

PTR_ADDU "%[addr4], %[dst_stride], %[dst_stride] \n\t"

"1: \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

"xor %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"xor %[ftmp1], %[ftmp1], %[ftmp4] \n\t"

"xor %[ftmp2], %[ftmp2], %[ftmp4] \n\t"

"xor %[ftmp3], %[ftmp3], %[ftmp4] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"xor %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"xor %[ftmp1], %[ftmp1], %[ftmp4] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

MMI_ULDC1(%[ftmp0], %[src1], 0x00)

PTR_ADDU "%[addr0], %[src1], %[src_stride1] \n\t"

MMI_ULDC1(%[ftmp1], %[addr0], 0x00)

MMI_ULDC1(%[ftmp2], %[src2], 0x00)

PTR_ADDU "%[addr1], %[src2], %[src_stride2] \n\t"

MMI_ULDC1(%[ftmp3], %[addr1], 0x00)

PTR_ADDU "%[src1], %[src1], %[addr2] \n\t"

"xor %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"xor %[ftmp1], %[ftmp1], %[ftmp4] \n\t"

"xor %[ftmp2], %[ftmp2], %[ftmp4] \n\t"

"xor %[ftmp3], %[ftmp3], %[ftmp4] \n\t"

"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"xor %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"xor %[ftmp1], %[ftmp1], %[ftmp4] \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)

MMI_SDXC1(%[ftmp1], %[dst], %[dst_stride], 0x00)

PTR_ADDU "%[src2], %[src2], %[addr3] \n\t"

PTR_ADDU "%[dst], %[dst], %[addr4] \n\t"

PTR_ADDI "%[h], %[h], -0x04 \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]),

RESTRICT_ASM_ALL64

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[addr2]"=&amp;r"(addr[2]), [addr3]"=&amp;r"(addr[3]),

[addr4]"=&amp;r"(addr[4]),

[dst]"+&amp;r"(dst), [src1]"+&amp;r"(src1),

[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)

: [dst_stride]"r"((mips_reg)dst_stride),

[src_stride1]"r"((mips_reg)src_stride1),

[src_stride2]"r"((mips_reg)src_stride2)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_x2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_x2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_x2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels4_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels8_y2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_avg_pixels8_y2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <name>line_size</name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_y2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_y2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_y2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> , <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels4_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l0</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h0</name> <init>= <expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l0</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"xor %[ftmp7], %[ftmp7], %[ftmp7] \n\t"

"dli %[addr0], 0x0f \n\t"

"pcmpeqw %[ftmp6], %[ftmp6], %[ftmp6] \n\t"

"dmtc1 %[addr0], %[ftmp8] \n\t"

"dli %[addr0], 0x01 \n\t"

"psrlh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"

"dmtc1 %[addr0], %[ftmp8] \n\t"

"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"

"dli %[addr0], 0x02 \n\t"

"dmtc1 %[addr0], %[ftmp9] \n\t"

MMI_ULDC1(%[ftmp0], %[pixels], 0x00)

MMI_ULDC1(%[ftmp4], %[pixels], 0x01)

"mov.d %[ftmp1], %[ftmp0] \n\t"

"mov.d %[ftmp5], %[ftmp4] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"

"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"

"punpckhbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"

"punpckhbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"

"paddush %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddush %[ftmp5], %[ftmp5], %[ftmp1] \n\t"

"xor %[addr0], %[addr0], %[addr0] \n\t"

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

".p2align 3 \n\t"

"1: \n\t"

PTR_ADDU "%[addr1], %[pixels], %[addr0] \n\t"

MMI_ULDC1(%[ftmp0], %[addr1], 0x00)

MMI_ULDC1(%[ftmp2], %[addr1], 0x01)

"mov.d %[ftmp1], %[ftmp0] \n\t"

"mov.d %[ftmp3], %[ftmp2] \n\t"

"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"

"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"

"punpckhbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"

"punpckhbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"

"paddush %[ftmp0], %[ftmp0], %[ftmp2] \n\t"

"paddush %[ftmp1], %[ftmp1], %[ftmp3] \n\t"

"paddush %[ftmp4], %[ftmp4], %[ftmp6] \n\t"

"paddush %[ftmp5], %[ftmp5], %[ftmp6] \n\t"

"paddush %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddush %[ftmp5], %[ftmp5], %[ftmp1] \n\t"

"psrlh %[ftmp4], %[ftmp4], %[ftmp9] \n\t"

"psrlh %[ftmp5], %[ftmp5], %[ftmp9] \n\t"

"packushb %[ftmp4], %[ftmp4], %[ftmp5] \n\t"

MMI_SDXC1(%[ftmp4], %[block], %[addr0], 0x00)

PTR_ADDU "%[addr0], %[addr0], %[line_size] \n\t"

PTR_ADDU "%[addr1], %[pixels], %[addr0] \n\t"

MMI_ULDC1(%[ftmp2], %[addr1], 0x00)

MMI_ULDC1(%[ftmp4], %[addr1], 0x01)

"mov.d %[ftmp3], %[ftmp2] \n\t"

"mov.d %[ftmp5], %[ftmp4] \n\t"

"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"

"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"

"punpckhbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"

"punpckhbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"

"paddush %[ftmp4], %[ftmp4], %[ftmp2] \n\t"

"paddush %[ftmp5], %[ftmp5], %[ftmp3] \n\t"

"paddush %[ftmp0], %[ftmp0], %[ftmp6] \n\t"

"paddush %[ftmp1], %[ftmp1], %[ftmp6] \n\t"

"paddush %[ftmp0], %[ftmp0], %[ftmp4] \n\t"

"paddush %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

"psrlh %[ftmp0], %[ftmp0], %[ftmp9] \n\t"

"psrlh %[ftmp1], %[ftmp1], %[ftmp9] \n\t"

"packushb %[ftmp0], %[ftmp0], %[ftmp1] \n\t"

MMI_SDXC1(%[ftmp0], %[block], %[addr0], 0x00)

PTR_ADDU "%[addr0], %[addr0], %[line_size] \n\t"

PTR_ADDU "%[h], %[h], -0x02 \n\t"

"bnez %[h], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),

RESTRICT_ASM_ALL64

RESTRICT_ASM_ADDRT

[addr0]"=&amp;r"(addr[0]), [addr1]"=&amp;r"(addr[1]),

[h]"+&amp;r"(h), [pixels]"+&amp;r"(pixels)

: [block]"r"(block), [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l0</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h0</name> <init>= <expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l0</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line_size</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line_size</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels8_xy2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_pixels8_xy2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l0</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h0</name> <init>= <expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <call><name>rnd_avg32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator></expr></argument>, <argument><expr><name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l0</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <call><name>rnd_avg32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator></expr></argument>, <argument><expr><name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l0</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h0</name> <init>= <expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <call><name>rnd_avg32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator></expr></argument>, <argument><expr><name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l0</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x02020202UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <call><name>rnd_avg32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator></expr></argument>, <argument><expr><name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line_size</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line_size</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels8_xy2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_avg_pixels8_xy2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l0</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x01010101UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h0</name> <init>= <expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l0</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x03030303UL</literal><operator>)</operator> <operator>+</operator>

<literal type="number">0x01010101UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFCFCFCFCUL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator> <operator>=</operator> <name>h0</name> <operator>+</operator> <name>h1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line_size</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>line_size</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_xy2_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_xy2_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_no_rnd_pixels8_xy2_8_mmi</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
