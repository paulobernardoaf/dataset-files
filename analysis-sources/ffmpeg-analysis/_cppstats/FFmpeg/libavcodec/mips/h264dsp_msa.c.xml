<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\h264dsp_msa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_mips.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_wgt_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>wgt</name> <operator>*</operator> <name>src0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_adds_s_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_maxi_s_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_srlr_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8u16</name><operator>)</operator> <name>tmp0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_wgt_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>, <decl><type ref="prev"/><name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH2_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH2_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_srlr_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_srlr_h</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH2_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_wgt_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>, <decl><type ref="prev"/><name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,

<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>,

<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_wgt_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,

<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>,

<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_wgt_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,

<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>,

<argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>,

<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>,

<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>,

<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_wgt_8x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_val</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>,

<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>,

<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>,

<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_biwgt_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>max255</name> <init>= <expr><call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>src_weight</name> <operator>+</operator> <name>dst_weight</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>dst_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B2_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>&gt;&gt;=</operator> <name>denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_maxi_s_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_min_s_h</name><argument_list>(<argument><expr><name>max255</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_biwgt_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>src_weight</name> <operator>+</operator> <name>dst_weight</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>dst_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B2_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>&gt;&gt;=</operator> <name>denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>&gt;&gt;=</operator> <name>denom</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_biwgt_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>src_weight</name> <operator>+</operator> <name>dst_weight</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>dst_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH4_0_255</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_biwgt_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>src_weight</name> <operator>+</operator> <name>dst_weight</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>dst_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH4_0_255</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_biwgt_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>src_weight</name> <operator>+</operator> <name>dst_weight</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>dst_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B8_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_biwgt_8x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_weight</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>dst_weight</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>src_weight</name> <operator>+</operator> <name>dst_weight</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>src_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>dst_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B4_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,

<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,

<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp5</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp6</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp7</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp6</name></expr></argument>,

<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><parameter_list>(<parameter><type><name>p3_or_q3_org_in</name></type></parameter>, <parameter><type><name>p0_or_q0_org_in</name></type></parameter>, <parameter><type><name>q3_or_p3_org_in</name></type></parameter>, <parameter><type><name>p1_or_q1_org_in</name></type></parameter>, <parameter><type><name>p2_or_q2_org_in</name></type></parameter>, <parameter><type><name>q1_or_p1_org_in</name></type></parameter>, <parameter><type><name>p0_or_q0_out</name></type></parameter>, <parameter><type><name>p1_or_q1_out</name></type></parameter>, <parameter><type><name>p2_or_q2_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 threshold; v8i16 const3 = __msa_ldi_h(3); threshold = (p0_or_q0_org_in) + (q3_or_p3_org_in); threshold += (p1_or_q1_org_in); (p0_or_q0_out) = threshold &lt;&lt; 1; (p0_or_q0_out) += (p2_or_q2_org_in); (p0_or_q0_out) += (q1_or_p1_org_in); (p0_or_q0_out) = __msa_srari_h((p0_or_q0_out), 3); (p1_or_q1_out) = (p2_or_q2_org_in) + threshold; (p1_or_q1_out) = __msa_srari_h((p1_or_q1_out), 2); (p2_or_q2_out) = (p2_or_q2_org_in) * const3; (p2_or_q2_out) += (p3_or_q3_org_in); (p2_or_q2_out) += (p3_or_q3_org_in); (p2_or_q2_out) += threshold; (p2_or_q2_out) = __msa_srari_h((p2_or_q2_out), 3); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_LPF_P0_OR_Q0</name><parameter_list>(<parameter><type><name>p0_or_q0_org_in</name></type></parameter>, <parameter><type><name>q1_or_p1_org_in</name></type></parameter>, <parameter><type><name>p1_or_q1_org_in</name></type></parameter>, <parameter><type><name>p0_or_q0_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (p0_or_q0_out) = (p0_or_q0_org_in) + (q1_or_p1_org_in); (p0_or_q0_out) += (p1_or_q1_org_in); (p0_or_q0_out) += (p1_or_q1_org_in); (p0_or_q0_out) = __msa_srari_h((p0_or_q0_out), 2); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_LPF_P1_OR_Q1</name><parameter_list>(<parameter><type><name>p0_or_q0_org_in</name></type></parameter>, <parameter><type><name>q0_or_p0_org_in</name></type></parameter>, <parameter><type><name>p1_or_q1_org_in</name></type></parameter>, <parameter><type><name>p2_or_q2_org_in</name></type></parameter>, <parameter><type><name>negate_tc_in</name></type></parameter>, <parameter><type><name>tc_in</name></type></parameter>, <parameter><type><name>p1_or_q1_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 clip3, temp; clip3 = (v8i16) __msa_aver_u_h((v8u16) p0_or_q0_org_in, (v8u16) q0_or_p0_org_in); temp = p1_or_q1_org_in &lt;&lt; 1; clip3 = clip3 - temp; clip3 = __msa_ave_s_h(p2_or_q2_org_in, clip3); CLIP_SH(clip3, negate_tc_in, tc_in); p1_or_q1_out = p1_or_q1_org_in + clip3; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_LPF_P0Q0</name><parameter_list>(<parameter><type><name>q0_or_p0_org_in</name></type></parameter>, <parameter><type><name>p0_or_q0_org_in</name></type></parameter>, <parameter><type><name>p1_or_q1_org_in</name></type></parameter>, <parameter><type><name>q1_or_p1_org_in</name></type></parameter>, <parameter><type><name>negate_threshold_in</name></type></parameter>, <parameter><type><name>threshold_in</name></type></parameter>, <parameter><type><name>p0_or_q0_out</name></type></parameter>, <parameter><type><name>q0_or_p0_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 q0_sub_p0, p1_sub_q1, delta; q0_sub_p0 = q0_or_p0_org_in - p0_or_q0_org_in; p1_sub_q1 = p1_or_q1_org_in - q1_or_p1_org_in; q0_sub_p0 &lt;&lt;= 2; p1_sub_q1 += 4; delta = q0_sub_p0 + p1_sub_q1; delta &gt;&gt;= 3; CLIP_SH(delta, negate_threshold_in, threshold_in); p0_or_q0_out = p0_or_q0_org_in + delta; q0_or_p0_out = q0_or_p0_org_in - delta; CLIP_SH2_0_255(p0_or_q0_out, q0_or_p0_out); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_LPF_H_CHROMA_422</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>tc_val</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>, <parameter><type><name>beta</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint32_t load0, load1, load2, load3; v16u8 src0 = { 0 }; v16u8 src1 = { 0 }; v16u8 src2 = { 0 }; v16u8 src3 = { 0 }; v16u8 p0_asub_q0, p1_asub_p0, q1_asub_q0; v16u8 is_less_than, is_less_than_alpha, is_less_than_beta; v8i16 tc, q0_sub_p0, p1_sub_q1, delta; v8i16 res0_r, res1_r; v16i8 zeros = { 0 }; v16u8 res0, res1; LW4((src - 2), stride, load0, load1, load2, load3); src0 = (v16u8) __msa_insert_w((v4i32) src0, 0, load0); src1 = (v16u8) __msa_insert_w((v4i32) src1, 0, load1); src2 = (v16u8) __msa_insert_w((v4i32) src2, 0, load2); src3 = (v16u8) __msa_insert_w((v4i32) src3, 0, load3); TRANSPOSE4x4_UB_UB(src0, src1, src2, src3, src0, src1, src2, src3); p0_asub_q0 = __msa_asub_u_b(src2, src1); p1_asub_p0 = __msa_asub_u_b(src1, src0); q1_asub_q0 = __msa_asub_u_b(src2, src3); tc = __msa_fill_h(tc_val); is_less_than_alpha = (p0_asub_q0 &lt; alpha); is_less_than_beta = (p1_asub_p0 &lt; beta); is_less_than = is_less_than_alpha &amp; is_less_than_beta; is_less_than_beta = (q1_asub_q0 &lt; beta); is_less_than = is_less_than_beta &amp; is_less_than; ILVR_B2_SH(src2, src1, src0, src3, q0_sub_p0, p1_sub_q1); HSUB_UB2_SH(q0_sub_p0, p1_sub_q1, q0_sub_p0, p1_sub_q1); q0_sub_p0 &lt;&lt;= 2; delta = q0_sub_p0 + p1_sub_q1; delta = __msa_srari_h(delta, 3); CLIP_SH(delta, -tc, tc); ILVR_B2_SH(zeros, src1, zeros, src2, res0_r, res1_r); res0_r += delta; res1_r -= delta; CLIP_SH2_0_255(res0_r, res1_r); PCKEV_B2_UB(res0_r, res0_r, res1_r, res1_r, res0, res1); res0 = __msa_bmnz_v(src1, res0, is_less_than); res1 = __msa_bmnz_v(src2, res1, is_less_than); res = (v16u8) __msa_ilvr_b((v16i8) res1, (v16i8) res0); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE2x4_B_UB</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16i8 zero_m = { 0 }; out0 = (v16u8) __msa_ilvr_b((v16i8) in1, (v16i8) in0); out1 = (v16u8) __msa_sldi_b(zero_m, (v16i8) out0, 2); SLDI_B2_UB(zero_m, out1, zero_m, out2, 2, out2, out3); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_LPF_H_2BYTE_CHROMA_422</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>tc_val</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>, <parameter><type><name>beta</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint32_t load0, load1; v16u8 src0 = { 0 }; v16u8 src1 = { 0 }; v16u8 src2 = { 0 }; v16u8 src3 = { 0 }; v16u8 p0_asub_q0, p1_asub_p0, q1_asub_q0; v16u8 is_less_than, is_less_than_alpha, is_less_than_beta; v8i16 tc, q0_sub_p0, p1_sub_q1, delta, res0_r, res1_r; v16i8 zeros = { 0 }; v16u8 res0, res1; load0 = LW(src - 2); load1 = LW(src - 2 + stride); src0 = (v16u8) __msa_insert_w((v4i32) src0, 0, load0); src1 = (v16u8) __msa_insert_w((v4i32) src1, 0, load1); TRANSPOSE2x4_B_UB(src0, src1, src0, src1, src2, src3); p0_asub_q0 = __msa_asub_u_b(src2, src1); p1_asub_p0 = __msa_asub_u_b(src1, src0); q1_asub_q0 = __msa_asub_u_b(src2, src3); tc = __msa_fill_h(tc_val); is_less_than_alpha = (p0_asub_q0 &lt; alpha); is_less_than_beta = (p1_asub_p0 &lt; beta); is_less_than = is_less_than_alpha &amp; is_less_than_beta; is_less_than_beta = (q1_asub_q0 &lt; beta); is_less_than = is_less_than_beta &amp; is_less_than; ILVR_B2_SH(src2, src1, src0, src3, q0_sub_p0, p1_sub_q1); HSUB_UB2_SH(q0_sub_p0, p1_sub_q1, q0_sub_p0, p1_sub_q1); q0_sub_p0 &lt;&lt;= 2; delta = q0_sub_p0 + p1_sub_q1; delta = __msa_srari_h(delta, 3); CLIP_SH(delta, -tc, tc); ILVR_B2_SH(zeros, src1, zeros, src2, res0_r, res1_r); res0_r += delta; res1_r -= delta; CLIP_SH2_0_255(res0_r, res1_r); PCKEV_B2_UB(res0_r, res0_r, res1_r, res1_r, res0, res1); res0 = __msa_bmnz_v(src1, res0, is_less_than); res1 = __msa_bmnz_v(src2, res1, is_less_than); res = (v16u8) __msa_ilvr_b((v16i8) res1, (v16i8) res0); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_luma_intra_edge_hor_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>, <decl><type ref="prev"/><name>is_less_than_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1_org</name></decl>, <decl><type ref="prev"/><name>p0_org</name></decl>, <decl><type ref="prev"/><name>q0_org</name></decl>, <decl><type ref="prev"/><name>q1_org</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><name>img_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>img_width</name></expr></argument>, <argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha_in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta_in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta_in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p2_asub_p0</name></decl>, <decl><type ref="prev"/><name>q2_asub_q0</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>negate_is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q0_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q0_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_l</name></decl>, <decl><type ref="prev"/><name>p0_org_l</name></decl>, <decl><type ref="prev"/><name>q0_org_l</name></decl>, <decl><type ref="prev"/><name>q1_org_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>q2_org</name> <init>= <expr><call><name>LD_UB</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p2_org</name> <init>= <expr><call><name>LD_UB</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp_flag</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator><call><name>__msa_fill_b</name><argument_list>(<argument><expr><operator>(</operator><name>alpha_in</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_flag</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>tmp_flag</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p2_asub_p0</name> <operator>&lt;</operator> <name>beta_in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>tmp_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <name>negate_is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p3_org_l</name></decl>, <decl><type ref="prev"/><name>p3_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_org</name> <init>= <expr><call><name>LD_UB</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><name>img_width</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p3_org_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>p3_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>,

<argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p3_org_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>p3_org_l</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>,

<argument><expr><name>p2_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B3_UB</name><argument_list>(<argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>p0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>negate_is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>data</name> <operator>-</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q2_asub_q0</name> <operator>&lt;</operator> <name>beta_in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>tmp_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <name>negate_is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q3_org_r</name></decl>, <decl><type ref="prev"/><name>q3_org_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>q3_org</name> <init>= <expr><call><name>LD_UB</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q3_org_r</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>q3_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>,

<argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q3_org_l</name></expr></argument>, <argument><expr><name>q2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>q3_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>,

<argument><expr><name>q2_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>, <argument><expr><name>q1_l</name></expr></argument>, <argument><expr><name>q2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B3_UB</name><argument_list>(<argument><expr><name>q0_l</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>q1_l</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>, <argument><expr><name>q2_l</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>negate_is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_luma_intra_edge_ver_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>data</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>p0_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_org</name></decl>, <decl><type ref="prev"/><name>p2_org</name></decl>, <decl><type ref="prev"/><name>p1_org</name></decl>, <decl><type ref="prev"/><name>p0_org</name></decl>, <decl><type ref="prev"/><name>q0_org</name></decl>, <decl><type ref="prev"/><name>q1_org</name></decl>, <decl><type ref="prev"/><name>q2_org</name></decl>, <decl><type ref="prev"/><name>q3_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row8</name></decl>, <decl><type ref="prev"/><name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>, <argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x8_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>,

<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>,

<argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p3_org</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>,

<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q3_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q0_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q0_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp_flag</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>p2_asub_p0</name></decl>, <decl><type ref="prev"/><name>q2_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>negate_is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_l</name></decl>, <decl><type ref="prev"/><name>p0_org_l</name></decl>, <decl><type ref="prev"/><name>q0_org_l</name></decl>, <decl><type ref="prev"/><name>q1_org_l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_flag</name> <operator>=</operator> <name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_flag</name> <operator>=</operator> <name>tmp_flag</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_flag</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>tmp_flag</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p2_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>tmp_flag</name> <operator>&amp;</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <name>negate_is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p3_org_r</name></decl>, <decl><type ref="prev"/><name>p3_org_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p3_org_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>p3_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>,

<argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p3_org_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>p3_org_l</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>,

<argument><expr><name>p2_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B3_UB</name><argument_list>(<argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>p0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>negate_is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q2_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>tmp_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <call><name>__msa_xori_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_is_less_than_beta</name> <operator>=</operator> <name>negate_is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q3_org_r</name></decl>, <decl><type ref="prev"/><name>q3_org_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q3_org_r</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>q3_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>,

<argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q3_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q3_org_l</name></expr></argument>, <argument><expr><name>q2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0P1P2_OR_Q0Q1Q2</name><argument_list>(<argument><expr><name>q3_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>,

<argument><expr><name>q2_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>, <argument><expr><name>q1_l</name></expr></argument>, <argument><expr><name>q2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B3_UB</name><argument_list>(<argument><expr><name>q0_l</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>q1_l</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>, <argument><expr><name>q2_l</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>negate_is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>data</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_h_loop_filter_luma_mbaff_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>load0</name></decl>, <decl><type ref="prev"/><name>load1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>out1</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>dst0_r</name></decl>, <decl><type ref="prev"/><name>dst1_r</name></decl>, <decl><type ref="prev"/><name>dst4_r</name></decl>, <decl><type ref="prev"/><name>dst5_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8u16</name></type> <name>dst2_x_r</name></decl>, <decl><type ref="prev"/><name>dst2_y_r</name></decl>, <decl><type ref="prev"/><name>dst3_x_r</name></decl>, <decl><type ref="prev"/><name>dst3_y_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst2_x</name></decl>, <decl><type ref="prev"/><name>dst2_y</name></decl>, <decl><type ref="prev"/><name>dst3_x</name></decl>, <decl><type ref="prev"/><name>dst3_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>, <decl><type ref="prev"/><name>p2_asub_p0</name></decl>, <decl><type ref="prev"/><name>q2_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_beta1</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src4</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src5</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src6</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src7</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>load0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>stride</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src3</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src4</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src5</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">6</literal> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src6</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src7</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>,

<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H2_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H2_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_W2_SB</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_W2_SB</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>,

<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_alpha</name> <operator>&amp;</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than</name> <operator>&amp;</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta1</name> <operator>=</operator> <operator>(</operator><name>p2_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta2</name> <operator>=</operator> <operator>(</operator><name>q2_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,

<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,

<argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x_r</name> <operator>=</operator> <name>src1_r</name> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x_r</name> <operator>=</operator> <name>src0_r</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>dst2_x_r</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>src4_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2_x_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1_r</name> <operator>=</operator> <name>src0_r</name> <operator>+</operator> <name>src1_r</name> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst1_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0_r</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src6_r</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>src0_r</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0_r</name> <operator>+=</operator> <name>src1_r</name> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_y_r</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src1_r</name><operator>)</operator> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <name>src4_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_y_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2_y_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst2_x_r</name></expr></argument>, <argument><expr><name>dst2_x_r</name></expr></argument>, <argument><expr><name>dst2_y_r</name></expr></argument>, <argument><expr><name>dst2_y_r</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>dst2_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst2_y</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>is_less_than_beta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_x_r</name> <operator>=</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <name>src4_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_x_r</name> <operator>=</operator> <name>src1_r</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst3_x_r</name><operator>)</operator> <operator>+</operator> <name>src5_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_x_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3_x_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4_r</name> <operator>=</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <name>src4_r</name> <operator>+</operator> <name>src5_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst4_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5_r</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src7_r</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>src5_r</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5_r</name> <operator>+=</operator> <name>src4_r</name> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <name>src2_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst5_r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_y_r</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src4_r</name><operator>)</operator> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <name>src1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_y_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3_y_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst3_x_r</name></expr></argument>, <argument><expr><name>dst3_x_r</name></expr></argument>, <argument><expr><name>dst3_y_r</name></expr></argument>, <argument><expr><name>dst3_y_r</name></expr></argument>, <argument><expr><name>dst3_x</name></expr></argument>, <argument><expr><name>dst3_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_x</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst3_y</name></expr></argument>, <argument><expr><name>dst3_x</name></expr></argument>, <argument><expr><name>is_less_than_beta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_y_r</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src1_r</name><operator>)</operator> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <name>src4_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_y_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2_y_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_y_r</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src4_r</name><operator>)</operator> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <name>src1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_y_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3_y_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>dst2_y_r</name></expr></argument>, <argument><expr><name>dst2_y_r</name></expr></argument>, <argument><expr><name>dst3_y_r</name></expr></argument>, <argument><expr><name>dst3_y_r</name></expr></argument>, <argument><expr><name>dst2_y</name></expr></argument>, <argument><expr><name>dst3_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst2_y</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>is_less_than_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_x</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>dst3_y</name></expr></argument>, <argument><expr><name>dst3_x</name></expr></argument>, <argument><expr><name>is_less_than_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst3_x</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><name>dst3_x</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_alpha</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta1</name> <operator>=</operator> <name>is_less_than_beta1</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>is_less_than_beta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst0_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>is_less_than_beta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst4_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst4_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta2</name> <operator>=</operator> <name>is_less_than_beta2</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>is_less_than_beta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst5_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src5</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>is_less_than_beta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst3_x</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_W2_UB</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_x</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvl_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2_y</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvl_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst2_x</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst2_y</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dst3_x</name></expr></argument>, <argument><expr><name>dst3_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst2_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2_x</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst3_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3_x</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst2_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst2_y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst3_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst3_y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_cb_or_cr_intra_edge_hor_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_cb_or_cr</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_or_q0</name></decl>, <decl><type ref="prev"/><name>q0_or_p0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1_or_q1_org</name></decl>, <decl><type ref="prev"/><name>p0_or_q0_org</name></decl>, <decl><type ref="prev"/><name>q0_or_p0_org</name></decl>, <decl><type ref="prev"/><name>q1_or_p1_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>data_cb_or_cr</name> <operator>-</operator> <operator>(</operator><name>img_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>p1_or_q1_org</name></expr></argument>, <argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>, <argument><expr><name>q1_or_p1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_or_q1_org</name></expr></argument>, <argument><expr><name>p0_or_q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_or_p1_org</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1_or_q1_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>,

<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1_or_p1_org</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_or_q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q0_or_p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_or_q0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_or_p0</name></expr></argument>, <argument><expr><name>p0_or_q0</name></expr></argument>, <argument><expr><name>q0_or_p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_or_q0_org</name> <operator>=</operator>

<call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_or_q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_or_p0_org</name> <operator>=</operator>

<call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_or_p0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_or_p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q0_or_p0_org</name></expr></argument>, <argument><expr><name>data_cb_or_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><name>data_cb_or_cr</name> <operator>-</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_cb_or_cr_intra_edge_ver_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_cb_or_cr</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>is_less_than</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_or_q0</name></decl>, <decl><type ref="prev"/><name>q0_or_p0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1_or_q1_org</name></decl>, <decl><type ref="prev"/><name>p0_or_q0_org</name></decl>, <decl><type ref="prev"/><name>q0_or_p0_org</name></decl>, <decl><type ref="prev"/><name>q1_or_p1_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>data_cb_or_cr</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x4_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>p1_or_q1_org</name></expr></argument>, <argument><expr><name>p0_or_q0_org</name></expr></argument>,

<argument><expr><name>q0_or_p0_org</name></expr></argument>, <argument><expr><name>q1_or_p1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_or_q1_org</name></expr></argument>, <argument><expr><name>p0_or_q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_or_p1_org</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1_or_q1_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_or_p0_org</name></expr></argument>,

<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1_or_p1_org</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_or_q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0_OR_Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q0_or_p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_or_q0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_or_p0</name></expr></argument>, <argument><expr><name>p0_or_q0</name></expr></argument>, <argument><expr><name>q0_or_p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_or_q0_org</name> <operator>=</operator>

<call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_or_q0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_or_q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_or_p0_org</name> <operator>=</operator>

<call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_or_p0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>q0_or_p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0_or_p0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0_or_q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_cb_or_cr</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>data_cb_or_cr</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_cb_or_cr</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>data_cb_or_cr</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_luma_inter_edge_ver_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp_vec</name></decl>, <decl><type ref="prev"/><name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>data</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p3_org</name></decl>, <decl><type ref="prev"/><name>p2_org</name></decl>, <decl><type ref="prev"/><name>p1_org</name></decl>, <decl><type ref="prev"/><name>p0_org</name></decl>, <decl><type ref="prev"/><name>q0_org</name></decl>, <decl><type ref="prev"/><name>q1_org</name></decl>, <decl><type ref="prev"/><name>q2_org</name></decl>, <decl><type ref="prev"/><name>q3_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>, <decl><type ref="prev"/><name>is_less_than_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_bs_greater_than0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>tc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_bs_greater_than0</name> <operator>=</operator> <operator>(</operator><name>zero</name> <operator>&lt;</operator> <name>bs</name><operator>)</operator></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row8</name></decl>, <decl><type ref="prev"/><name>row9</name></decl>, <decl><type ref="prev"/><name>row10</name></decl>, <decl><type ref="prev"/><name>row11</name></decl>, <decl><type ref="prev"/><name>row12</name></decl>, <decl><type ref="prev"/><name>row13</name></decl>, <decl><type ref="prev"/><name>row14</name></decl>, <decl><type ref="prev"/><name>row15</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>img_width</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>, <argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE16x8_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>row8</name></expr></argument>, <argument><expr><name>row9</name></expr></argument>, <argument><expr><name>row10</name></expr></argument>, <argument><expr><name>row11</name></expr></argument>,

<argument><expr><name>row12</name></expr></argument>, <argument><expr><name>row13</name></expr></argument>, <argument><expr><name>row14</name></expr></argument>, <argument><expr><name>row15</name></expr></argument>,

<argument><expr><name>p3_org</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>,

<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q3_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than</name> <operator>&amp;</operator> <name>is_bs_greater_than0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>negate_tc</name></decl>, <decl><type ref="prev"/><name>sign_negate_tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>p2_asub_p0</name></decl>, <decl><type ref="prev"/><name>q2_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_r</name></decl>, <decl><type ref="prev"/><name>tc_l</name></decl>, <decl><type ref="prev"/><name>negate_tc_r</name></decl>, <decl><type ref="prev"/><name>i16_negatetc_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_l</name></decl>, <decl><type ref="prev"/><name>p0_org_l</name></decl>, <decl><type ref="prev"/><name>q0_org_l</name></decl>, <decl><type ref="prev"/><name>q1_org_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_r</name></decl>, <decl><type ref="prev"/><name>q0_r</name></decl>, <decl><type ref="prev"/><name>p0_l</name></decl>, <decl><type ref="prev"/><name>q0_l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>negate_tc</name> <operator>=</operator> <name>zero</name> <operator>-</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_negate_tc</name> <operator>=</operator> <call><name>__msa_clti_s_b</name><argument_list>(<argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>sign_negate_tc</name></expr></argument>, <argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>i16_negatetc_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>tc_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p2_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_org_r</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_org_l</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p2_org_r</name></expr></argument>,

<argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>p2_org_l</name></expr></argument>,

<argument><expr><name>i16_negatetc_l</name></expr></argument>, <argument><expr><name>tc_l</name></expr></argument>, <argument><expr><name>p1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p1_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <call><name>__msa_andi_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>tc</name> <operator>+</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q2_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q2_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>q1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_org_r</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_org_l</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q2_org_r</name></expr></argument>,

<argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>q2_org_l</name></expr></argument>,

<argument><expr><name>i16_negatetc_l</name></expr></argument>, <argument><expr><name>tc_l</name></expr></argument>, <argument><expr><name>q1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <call><name>__msa_andi_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>tc</name> <operator>+</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v8i16</name></type> <name>threshold_r</name></decl>, <decl><type ref="prev"/><name>negate_thresh_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>threshold_l</name></decl>, <decl><type ref="prev"/><name>negate_thresh_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>negate_thresh</name></decl>, <decl><type ref="prev"/><name>sign_negate_thresh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>negate_thresh</name> <operator>=</operator> <name>zero</name> <operator>-</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_negate_thresh</name> <operator>=</operator> <call><name>__msa_clti_s_b</name><argument_list>(<argument><expr><name>negate_thresh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>sign_negate_thresh</name></expr></argument>, <argument><expr><name>negate_thresh</name></expr></argument>,

<argument><expr><name>threshold_r</name></expr></argument>, <argument><expr><name>negate_thresh_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>,

<argument><expr><name>negate_thresh_r</name></expr></argument>, <argument><expr><name>threshold_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_thresh_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>sign_negate_thresh</name></expr></argument>,

<argument><expr><name>negate_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0Q0</name><argument_list>(<argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>,

<argument><expr><name>negate_thresh_l</name></expr></argument>, <argument><expr><name>threshold_l</name></expr></argument>, <argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>out1</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>data</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SB</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_luma_inter_edge_hor_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>image_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp_vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>p2_org</name></decl>, <decl><type ref="prev"/><name>p1_org</name></decl>, <decl><type ref="prev"/><name>p0_org</name></decl>, <decl><type ref="prev"/><name>q0_org</name></decl>, <decl><type ref="prev"/><name>q1_org</name></decl>, <decl><type ref="prev"/><name>q2_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_bs_greater_than0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_r</name></decl>, <decl><type ref="prev"/><name>q0_r</name></decl>, <decl><type ref="prev"/><name>p0_l</name></decl>, <decl><type ref="prev"/><name>q0_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_l</name></decl>, <decl><type ref="prev"/><name>p0_org_l</name></decl>, <decl><type ref="prev"/><name>q0_org_l</name></decl>, <decl><type ref="prev"/><name>q1_org_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>tc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insve_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>image_width</name><operator>)</operator></expr></argument>, <argument><expr><name>image_width</name></expr></argument>,

<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_bs_greater_than0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v16u8</name><operator>)</operator> <name>zero</name> <operator>&lt;</operator> <name>bs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than</name> <operator>&amp;</operator> <name>is_bs_greater_than0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>sign_negate_tc</name></decl>, <decl><type ref="prev"/><name>negate_tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>negate_tc_r</name></decl>, <decl><type ref="prev"/><name>i16_negatetc_l</name></decl>, <decl><type ref="prev"/><name>tc_l</name></decl>, <decl><type ref="prev"/><name>tc_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p2_asub_p0</name></decl>, <decl><type ref="prev"/><name>q2_asub_q0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q2_org</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>image_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_tc</name> <operator>=</operator> <name>zero</name> <operator>-</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_negate_tc</name> <operator>=</operator> <call><name>__msa_clti_s_b</name><argument_list>(<argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>sign_negate_tc</name></expr></argument>, <argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>i16_negatetc_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>tc_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p2_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p2_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_org_r</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_org_l</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p2_org_r</name></expr></argument>,

<argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>p2_org_l</name></expr></argument>,

<argument><expr><name>i16_negatetc_l</name></expr></argument>, <argument><expr><name>tc_l</name></expr></argument>, <argument><expr><name>p1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p1_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>image_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <call><name>__msa_andi_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>tc</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q2_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q2_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q2_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>q1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q1_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_org_r</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q2_org_l</name> <init>= <expr><operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q2_org</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>q2_org_r</name></expr></argument>,

<argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P1_OR_Q1</name><argument_list>(<argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>, <argument><expr><name>q2_org_l</name></expr></argument>,

<argument><expr><name>i16_negatetc_l</name></expr></argument>, <argument><expr><name>tc_l</name></expr></argument>, <argument><expr><name>q1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>is_less_than_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>image_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <call><name>__msa_andi_b</name><argument_list>(<argument><expr><name>is_less_than_beta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>tc</name> <operator>+</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>negate_thresh</name></decl>, <decl><type ref="prev"/><name>sign_negate_thresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>threshold_r</name></decl>, <decl><type ref="prev"/><name>threshold_l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>negate_thresh_l</name></decl>, <decl><type ref="prev"/><name>negate_thresh_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>negate_thresh</name> <operator>=</operator> <name>zero</name> <operator>-</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_negate_thresh</name> <operator>=</operator> <call><name>__msa_clti_s_b</name><argument_list>(<argument><expr><name>negate_thresh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>sign_negate_thresh</name></expr></argument>, <argument><expr><name>negate_thresh</name></expr></argument>,

<argument><expr><name>threshold_r</name></expr></argument>, <argument><expr><name>negate_thresh_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>,

<argument><expr><name>negate_thresh_r</name></expr></argument>, <argument><expr><name>threshold_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_thresh_l</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_b</name><argument_list>(<argument><expr><name>sign_negate_thresh</name></expr></argument>,

<argument><expr><name>negate_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0Q0</name><argument_list>(<argument><expr><name>q0_org_l</name></expr></argument>, <argument><expr><name>p0_org_l</name></expr></argument>, <argument><expr><name>p1_org_l</name></expr></argument>, <argument><expr><name>q1_org_l</name></expr></argument>,

<argument><expr><name>negate_thresh_l</name></expr></argument>, <argument><expr><name>threshold_l</name></expr></argument>, <argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>p0_l</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>q0_l</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <name>image_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_h_loop_filter_luma_mbaff_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha_in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>load</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tc_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp4</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp5</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp6</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>inp7</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>, <decl><type ref="prev"/><name>p2_asub_p0</name></decl>, <decl><type ref="prev"/><name>q2_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_beta1</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc</name></decl>, <decl><type ref="prev"/><name>tc_orig_r</name></decl>, <decl><type ref="prev"/><name>tc_plus1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_tc_orig1</name></decl>, <decl><type ref="prev"/><name>is_tc_orig2</name></decl>, <decl><type ref="prev"/><name>tc_orig</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_ilvr_q0</name></decl>, <decl><type ref="prev"/><name>p0_add_q0</name></decl>, <decl><type ref="prev"/><name>q0_sub_p0</name></decl>, <decl><type ref="prev"/><name>p1_sub_q1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p2_r</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>, <decl><type ref="prev"/><name>q2_r</name></decl>, <decl><type ref="prev"/><name>q1_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p2</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4i32</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp3</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp4</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,

<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_H2_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_H2_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_ilvr_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src6</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_ilvl_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src6</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src4</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src7</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src5</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src5</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_alpha</name> <operator>&amp;</operator> <name>is_less_than_beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta1</name> <operator>=</operator> <operator>(</operator><name>p2_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta2</name> <operator>=</operator> <operator>(</operator><name>q2_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_ilvr_q0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_add_q0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_ilvr_q0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_ilvr_q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_add_q0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>p0_add_q0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>p1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>+=</operator> <name>p0_add_q0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>-=</operator> <name>p1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>q1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_r</name> <operator>+=</operator> <name>p0_add_q0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_r</name> <operator>-=</operator> <name>q1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_val</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_orig</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tc_orig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tc_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_orig</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc_orig</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig1</name> <operator>=</operator> <name>tc_orig</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig2</name> <operator>=</operator> <name>tc_orig</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_orig_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>tc_orig_r</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>p2_r</name></expr></argument>, <argument><expr><operator>-</operator><name>tc_orig_r</name></expr></argument>, <argument><expr><name>tc_orig_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>q2_r</name></expr></argument>, <argument><expr><operator>-</operator><name>tc_orig_r</name></expr></argument>, <argument><expr><name>tc_orig_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>+=</operator> <name>p1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q2_r</name> <operator>+=</operator> <name>q1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>q2_r</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig1</name> <operator>=</operator> <operator>(</operator><name>zeros</name> <operator>&lt;</operator> <name>is_tc_orig1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig2</name> <operator>=</operator> <name>is_tc_orig1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig1</name> <operator>=</operator> <name>is_less_than_beta1</name> <operator>&amp;</operator> <name>is_tc_orig1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig2</name> <operator>=</operator> <name>is_less_than_beta2</name> <operator>&amp;</operator> <name>is_tc_orig2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig1</name> <operator>=</operator> <name>is_less_than</name> <operator>&amp;</operator> <name>is_tc_orig1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_tc_orig2</name> <operator>=</operator> <name>is_less_than</name> <operator>&amp;</operator> <name>is_tc_orig2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>is_tc_orig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>is_tc_orig2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_sub_p0</name> <operator>=</operator> <call><name>__msa_hsub_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_ilvr_q0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>p0_ilvr_q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_sub_p0</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_sub_q1</name> <operator>=</operator> <name>p1_r</name> <operator>-</operator> <name>q1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_sub_p0</name> <operator>+=</operator> <name>p1_sub_q1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_sub_p0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>q0_sub_p0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_plus1</name> <operator>=</operator> <name>tc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>is_less_than_beta1</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>is_less_than_beta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc_plus1</name></expr></argument>, <argument><expr><name>is_less_than_beta1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_plus1</name> <operator>=</operator> <name>tc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>is_less_than_beta2</name></expr></argument>,

<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>is_less_than_beta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tc_plus1</name></expr></argument>, <argument><expr><name>is_less_than_beta2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH</name><argument_list>(<argument><expr><name>q0_sub_p0</name></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2_r</name> <operator>+=</operator> <name>q0_sub_p0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src3_r</name> <operator>-=</operator> <name>q0_sub_p0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SW</name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_cb_or_cr_inter_edge_hor_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp_vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than_beta</name></decl>, <decl><type ref="prev"/><name>is_less_than_alpha</name></decl>, <decl><type ref="prev"/><name>is_bs_greater_than0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_r</name></decl>, <decl><type ref="prev"/><name>q0_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1_org</name></decl>, <decl><type ref="prev"/><name>p0_org</name></decl>, <decl><type ref="prev"/><name>q0_org</name></decl>, <decl><type ref="prev"/><name>q1_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>negate_tc</name></decl>, <decl><type ref="prev"/><name>sign_negate_tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_r</name></decl>, <decl><type ref="prev"/><name>negate_tc_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_bs_greater_than0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>zero</name> <operator>&lt;</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>bs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <operator>(</operator><name>img_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than</name> <operator>&amp;</operator> <name>is_bs_greater_than0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negate_tc</name> <operator>=</operator> <name>zero</name> <operator>-</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_negate_tc</name> <operator>=</operator> <call><name>__msa_clti_s_b</name><argument_list>(<argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>sign_negate_tc</name></expr></argument>, <argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>negate_tc_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>,

<argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>negate_tc_r</name></expr></argument>,

<argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <name>img_width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_loopfilter_cb_or_cr_inter_edge_ver_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>bs2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bs3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>tc2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tc3</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>img_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0_asub_q0</name></decl>, <decl><type ref="prev"/><name>p1_asub_p0</name></decl>, <decl><type ref="prev"/><name>q1_asub_q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_less_than</name></decl>, <decl><type ref="prev"/><name>is_less_than_beta</name></decl>, <decl><type ref="prev"/><name>is_less_than_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p0_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>q0_r</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>p1_org</name></decl>, <decl><type ref="prev"/><name>p0_org</name></decl>, <decl><type ref="prev"/><name>q0_org</name></decl>, <decl><type ref="prev"/><name>q1_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>p1_org_r</name></decl>, <decl><type ref="prev"/><name>p0_org_r</name></decl>, <decl><type ref="prev"/><name>q0_org_r</name></decl>, <decl><type ref="prev"/><name>q1_org_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>is_bs_greater_than0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc_r</name></decl>, <decl><type ref="prev"/><name>negate_tc_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>negate_tc</name></decl>, <decl><type ref="prev"/><name>sign_negate_tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>row0</name></decl>, <decl><type ref="prev"/><name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row3</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row5</name></decl>, <decl><type ref="prev"/><name>row6</name></decl>, <decl><type ref="prev"/><name>row7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp_vec</name></decl>, <decl><type ref="prev"/><name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>bs3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_vec</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>tc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>__msa_insve_h</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_bs_greater_than0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <operator>(</operator><name>zero</name> <operator>&lt;</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>bs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>img_width</name></expr></argument>,

<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>, <argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x4_UB_UB</name><argument_list>(<argument><expr><name>row0</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>row3</name></expr></argument>,

<argument><expr><name>row4</name></expr></argument>, <argument><expr><name>row5</name></expr></argument>, <argument><expr><name>row6</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>,

<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_asub_p0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1_asub_q0</name> <operator>=</operator> <call><name>__msa_asub_u_b</name><argument_list>(<argument><expr><name>q1_org</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_alpha</name> <operator>=</operator> <operator>(</operator><name>p0_asub_q0</name> <operator>&lt;</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>p1_asub_p0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than_beta</name> <operator>=</operator> <operator>(</operator><name>q1_asub_q0</name> <operator>&lt;</operator> <name>beta</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_less_than_beta</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <name>is_bs_greater_than0</name> <operator>&amp;</operator> <name>is_less_than</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_less_than</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__msa_test_bz_v</name><argument_list>(<argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p1_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q1_org</name></expr></argument>,

<argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>negate_tc</name> <operator>=</operator> <name>zero</name> <operator>-</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_negate_tc</name> <operator>=</operator> <call><name>__msa_clti_s_b</name><argument_list>(<argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>sign_negate_tc</name></expr></argument>, <argument><expr><name>negate_tc</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>negate_tc_r</name></expr></argument>, <argument><expr><name>tc_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVC_LPF_P0Q0</name><argument_list>(<argument><expr><name>q0_org_r</name></expr></argument>, <argument><expr><name>p0_org_r</name></expr></argument>, <argument><expr><name>p1_org_r</name></expr></argument>, <argument><expr><name>q1_org_r</name></expr></argument>, <argument><expr><name>negate_tc_r</name></expr></argument>,

<argument><expr><name>tc_r</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>p0_r</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>q0_r</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>p0_org</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0_org</name> <operator>=</operator> <call><name>__msa_bmnz_v</name><argument_list>(<argument><expr><name>q0_org</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>is_less_than</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>q0_org</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>p0_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>data</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>img_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_h_loop_filter_chroma422_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha_in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>tc_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tc_val</name> <operator>=</operator> <operator>(</operator><name><name>tc0</name><index>[<expr><name>col</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tc_val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVC_LPF_H_CHROMA_422</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tc_val</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_h_loop_filter_chroma422_mbaff_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha_in</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta_in</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>tc_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>alpha_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>beta_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tc_val</name> <operator>=</operator> <operator>(</operator><name><name>tc0</name><index>[<expr><name>col</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tc_val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVC_LPF_H_2BYTE_CHROMA_422</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tc_val</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_lpf_luma_inter_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs3</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avc_loopfilter_luma_inter_edge_ver_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>, <argument><expr><name>bs3</name></expr></argument>,

<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_v_lpf_luma_inter_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs3</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avc_loopfilter_luma_inter_edge_hor_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>, <argument><expr><name>bs3</name></expr></argument>,

<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_lpf_chroma_inter_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs3</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avc_loopfilter_cb_or_cr_inter_edge_ver_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>, <argument><expr><name>bs3</name></expr></argument>,

<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_v_lpf_chroma_inter_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs3</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avc_loopfilter_cb_or_cr_inter_edge_hor_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>, <argument><expr><name>bs3</name></expr></argument>,

<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_lpf_luma_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_loopfilter_luma_intra_edge_ver_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>alpha</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>beta</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_v_lpf_luma_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_loopfilter_luma_intra_edge_hor_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>alpha</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>beta</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_lpf_chroma_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_loopfilter_cb_or_cr_intra_edge_ver_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>alpha</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>beta</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_v_lpf_chroma_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>img_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_loopfilter_cb_or_cr_intra_edge_hor_msa</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>alpha</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>beta</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>img_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_loop_filter_chroma422_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ystride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_h_loop_filter_chroma422_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ystride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_loop_filter_chroma422_mbaff_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ystride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_h_loop_filter_chroma422_mbaff_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ystride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_loop_filter_luma_mbaff_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ystride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_h_loop_filter_luma_mbaff_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ystride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_h_loop_filter_luma_mbaff_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ystride</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>alpha</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avc_h_loop_filter_luma_mbaff_intra_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ystride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_weight_h264_pixels16_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>weight_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>, <decl><type ref="prev"/><name>src7_l</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp8</name></decl>, <decl><type ref="prev"/><name>tmp9</name></decl>, <decl><type ref="prev"/><name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>, <decl><type ref="prev"/><name>tmp14</name></decl>, <decl><type ref="prev"/><name>tmp15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>wgt</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset_in</name> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>weight_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>,

<argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>,

<argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>,

<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>,

<argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,

<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>,

<argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>,

<argument><expr><name>tmp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>,

<argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>,

<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>,

<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>,

<argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH8_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H8_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH8_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,

<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>,

<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">16</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>,

<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>,

<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>,

<argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>,

<argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>,

<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>,

<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>,

<argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>,

<argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDS_SH4_SH</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAXI_SH8_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRLR_H8_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH8_SH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAT_UH8_SH</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,

<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>,

<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_weight_h264_pixels8_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>weight_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_wgt_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_wgt_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avc_wgt_8x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_weight_h264_pixels4_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>weight_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_wgt_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_wgt_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avc_wgt_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_biweight_h264_pixels16_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weight_dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>weight_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>v16i8</name></type> <name>src_wgt</name></decl>, <decl><type ref="prev"/><name>dst_wgt</name></decl>, <decl><type ref="prev"/><name>wgt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v16i8</name></type> <name>vec8</name></decl>, <decl><type ref="prev"/><name>vec9</name></decl>, <decl><type ref="prev"/><name>vec10</name></decl>, <decl><type ref="prev"/><name>vec11</name></decl>, <decl><type ref="prev"/><name>vec12</name></decl>, <decl><type ref="prev"/><name>vec13</name></decl>, <decl><type ref="prev"/><name>vec14</name></decl>, <decl><type ref="prev"/><name>vec15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp8</name></decl>, <decl><type ref="prev"/><name>tmp9</name></decl>, <decl><type ref="prev"/><name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>, <decl><type ref="prev"/><name>tmp14</name></decl>, <decl><type ref="prev"/><name>tmp15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v8i16</name></type> <name>denom</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset_in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <operator>(</operator><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>weight_src</name> <operator>+</operator> <name>weight_dst</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>weight_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_wgt</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>weight_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>offset_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>log2_denom</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wgt</name> <operator>=</operator> <call><name>__msa_ilvev_b</name><argument_list>(<argument><expr><name>dst_wgt</name></expr></argument>, <argument><expr><name>src_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B8_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B8_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>,

<argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>,

<argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>vec8</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>,

<argument><expr><name>vec12</name></expr></argument>, <argument><expr><name>vec14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SB</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>,

<argument><expr><name>vec13</name></expr></argument>, <argument><expr><name>vec15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp8</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp9</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp14</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp15</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,

<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>,

<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">16</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B8_128_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XORI_B8_128_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>,

<argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>,

<argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_SB</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>vec8</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>,

<argument><expr><name>vec12</name></expr></argument>, <argument><expr><name>vec14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVL_B4_SB</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>,

<argument><expr><name>vec13</name></expr></argument>, <argument><expr><name>vec15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp8</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp9</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp14</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp15</name> <operator>=</operator> <call><name>__msa_dpadd_s_h</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>wgt</name></expr></argument>, <argument><expr><name>vec15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,

<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>tmp9</name></expr></argument>, <argument><expr><name>tmp8</name></expr></argument>, <argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>tmp15</name></expr></argument>, <argument><expr><name>tmp14</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>,

<argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_biweight_h264_pixels8_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weight_dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>weight_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_biwgt_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>weight_dst</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_biwgt_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>weight_dst</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avc_biwgt_8x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>weight_dst</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_biweight_h264_pixels4_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weight_dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>weight_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_biwgt_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>weight_dst</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avc_biwgt_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>weight_dst</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avc_biwgt_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_denom</name></expr></argument>, <argument><expr><name>weight_src</name></expr></argument>, <argument><expr><name>weight_dst</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
