<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mips\idctdsp_mmi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp_mips.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_put_pixels_clamped_mmi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

MMI_LDC1(%[ftmp0], %[block], 0x00)

MMI_LDC1(%[ftmp1], %[block], 0x08)

MMI_LDC1(%[ftmp2], %[block], 0x10)

MMI_LDC1(%[ftmp3], %[block], 0x18)

MMI_LDC1(%[ftmp4], %[block], 0x20)

MMI_LDC1(%[ftmp5], %[block], 0x28)

MMI_LDC1(%[ftmp6], %[block], 0x30)

MMI_LDC1(%[ftmp7], %[block], 0x38)

"packushb %[ftmp0], %[ftmp0], %[ftmp1] \n\t"

"packushb %[ftmp2], %[ftmp2], %[ftmp3] \n\t"

"packushb %[ftmp4], %[ftmp4], %[ftmp5] \n\t"

"packushb %[ftmp6], %[ftmp6], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp2], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp4], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp6], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_LDC1(%[ftmp0], %[block], 0x40)

MMI_LDC1(%[ftmp1], %[block], 0x48)

MMI_LDC1(%[ftmp2], %[block], 0x50)

MMI_LDC1(%[ftmp3], %[block], 0x58)

MMI_LDC1(%[ftmp4], %[block], 0x60)

MMI_LDC1(%[ftmp5], %[block], 0x68)

MMI_LDC1(%[ftmp6], %[block], 0x70)

MMI_LDC1(%[ftmp7], %[block], 0x78)

"packushb %[ftmp0], %[ftmp0], %[ftmp1] \n\t"

"packushb %[ftmp2], %[ftmp2], %[ftmp3] \n\t"

"packushb %[ftmp4], %[ftmp4], %[ftmp5] \n\t"

"packushb %[ftmp6], %[ftmp6], %[ftmp7] \n\t"

MMI_SDC1(%[ftmp0], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp2], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp4], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp6], %[pixels], 0x00)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[pixels]"+&amp;r"(pixels)

: [line_size]"r"((mips_reg)line_size),

[block]"r"(block)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_signed_pixels_clamped_mmi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

MMI_LDC1(%[ftmp1], %[block], 0x00)

MMI_LDC1(%[ftmp0], %[block], 0x08)

"packsshb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp2], %[block], 0x10)

MMI_LDC1(%[ftmp0], %[block], 0x18)

"packsshb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp3], %[block], 0x20)

MMI_LDC1(%[ftmp0], %[block], 0x28)

"packsshb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp4], %[block], 0x30)

MMI_LDC1(%[ftmp0], %[block], 0x38)

"packsshb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddb %[ftmp1], %[ftmp1], %[ff_pb_80] \n\t"

"paddb %[ftmp2], %[ftmp2], %[ff_pb_80] \n\t"

"paddb %[ftmp3], %[ftmp3], %[ff_pb_80] \n\t"

"paddb %[ftmp4], %[ftmp4], %[ff_pb_80] \n\t"

MMI_SDC1(%[ftmp1], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp2], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp3], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp4], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_LDC1(%[ftmp1], %[block], 0x40)

MMI_LDC1(%[ftmp0], %[block], 0x48)

"packsshb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp2], %[block], 0x50)

MMI_LDC1(%[ftmp0], %[block], 0x58)

"packsshb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp3], %[block], 0x60)

MMI_LDC1(%[ftmp0], %[block], 0x68)

"packsshb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp4], %[block], 0x70)

MMI_LDC1(%[ftmp0], %[block], 0x78)

"packsshb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddb %[ftmp1], %[ftmp1], %[ff_pb_80] \n\t"

"paddb %[ftmp2], %[ftmp2], %[ff_pb_80] \n\t"

"paddb %[ftmp3], %[ftmp3], %[ff_pb_80] \n\t"

"paddb %[ftmp4], %[ftmp4], %[ff_pb_80] \n\t"

MMI_SDC1(%[ftmp1], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp2], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp3], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp4], %[pixels], 0x00)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]),

[pixels]"+&amp;r"(pixels)

: [block]"r"(block),

[line_size]"r"((mips_reg)line_size),

[ff_pb_80]"f"(ff_pb_80)

: "memory"

);</asm>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_add_pixels_clamped_mmi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"li %[tmp0], 0x04 \n\t"

"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"

"1: \n\t"

MMI_LDC1(%[ftmp5], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_LDC1(%[ftmp6], %[pixels], 0x00)

PTR_SUBU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_LDC1(%[ftmp1], %[block], 0x00)

MMI_LDC1(%[ftmp2], %[block], 0x08)

MMI_LDC1(%[ftmp3], %[block], 0x10)

MMI_LDC1(%[ftmp4], %[block], 0x18)

PTR_ADDIU "%[block], %[block], 0x20 \n\t"

"punpckhbh %[ftmp7], %[ftmp5], %[ftmp0] \n\t"

"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"

"punpckhbh %[ftmp8], %[ftmp6], %[ftmp0] \n\t"

"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ftmp5] \n\t"

"paddh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"

"paddh %[ftmp3], %[ftmp3], %[ftmp6] \n\t"

"paddh %[ftmp4], %[ftmp4], %[ftmp8] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"

"packushb %[ftmp3], %[ftmp3], %[ftmp4] \n\t"

MMI_SDC1(%[ftmp1], %[pixels], 0x00)

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

MMI_SDC1(%[ftmp3], %[pixels], 0x00)

"addi %[tmp0], %[tmp0], -0x01 \n\t"

PTR_ADDU "%[pixels], %[pixels], %[line_size] \n\t"

"bnez %[tmp0], 1b \n\t"

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),

[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),

[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),

[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),

[ftmp8]"=&amp;f"(ftmp[8]), [tmp0]"=&amp;r"(tmp[0]),

[pixels]"+&amp;r"(pixels), [block]"+&amp;r"(block)

: [line_size]"r"((mips_reg)line_size)

: "memory"

);</asm>

</block_content>}</block></function>

</unit>
