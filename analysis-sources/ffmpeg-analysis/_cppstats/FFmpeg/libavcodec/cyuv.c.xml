<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cyuv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>CyuvDecodeContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

}</block></struct></type> <name>CyuvDecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cyuv_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CyuvDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cyuv_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CyuvDecodeContext</name> <modifier>*</modifier></type><name>s</name><init>=<expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>u_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>u_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>y_table</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>signed</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>u_table</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>signed</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>v_table</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>signed</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>y_pred</name></decl>, <decl><type ref="prev"/><name>u_pred</name></decl>, <decl><type ref="prev"/><name>v_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cur_byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_groups</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rawsize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_table</name> <operator>=</operator> <name>u_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_table</name> <operator>=</operator> <name>v_table</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">48</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>buf_size</name> <operator>==</operator> <name>rawsize</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_UYVY422</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"got a buffer with %d bytes when %d were expected\n"</literal></expr></argument>,

<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">48</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>stream_ptr</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <name>rawsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y_plane</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>stream_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>stream_ptr</name> <operator>&lt;</operator> <name>rawsize</name></expr>;</condition> <incr><expr><name>stream_ptr</name> <operator>+=</operator> <name>linesize</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y_plane</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>y_plane</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>stream_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>u_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>y_ptr</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</condition>

<incr><expr><name>y_ptr</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr><operator>,</operator>

<expr><name>u_ptr</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal></expr><operator>,</operator>

<expr><name>v_ptr</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_byte</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_plane</name><index>[<expr><name>u_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>u_pred</name> <operator>=</operator> <name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name> <operator>=</operator> <operator>(</operator><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_byte</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_plane</name><index>[<expr><name>v_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v_pred</name> <operator>=</operator> <name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_byte</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><operator>(</operator><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_groups</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixel_groups</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_byte</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_pred</name> <operator>+=</operator> <name><name>u_table</name><index>[<expr><operator>(</operator><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_plane</name><index>[<expr><name>u_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>u_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_byte</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_pred</name> <operator>+=</operator> <name><name>v_table</name><index>[<expr><operator>(</operator><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_plane</name><index>[<expr><name>v_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_byte</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>stream_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pred</name> <operator>+=</operator> <name><name>y_table</name><index>[<expr><operator>(</operator><name>cur_byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>y_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y_pred</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AURA_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aura_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aura"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Auravision AURA"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AURA</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CyuvDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cyuv_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>cyuv_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CYUV_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_cyuv_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cyuv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Creative YUV (CYUV)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_CYUV</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CyuvDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cyuv_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>cyuv_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
