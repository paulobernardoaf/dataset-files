<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cfhd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cfhd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_COMPAND_DC_OFFSET</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_COMPAND_GAIN</name></cpp:macro> <cpp:value>9400</cpp:value></cpp:define>

<enum>enum <name>CFHDParam</name> <block>{

<decl><name>ChannelCount</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>SubbandCount</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>ImageWidth</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>ImageHeight</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>LowpassPrecision</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,

<decl><name>SubbandNumber</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,

<decl><name>Quantization</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>,

<decl><name>ChannelNumber</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,

<decl><name>SampleFlags</name> <init>= <expr><literal type="number">68</literal></expr></init></decl>,

<decl><name>BitsPerComponent</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>,

<decl><name>ChannelWidth</name> <init>= <expr><literal type="number">104</literal></expr></init></decl>,

<decl><name>ChannelHeight</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>,

<decl><name>PrescaleShift</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cfhd_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_cfhd_init_vlcs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_plane_defaults</name><parameter_list>(<parameter><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subband_num_actual</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_peak_table_defaults</name><parameter_list>(<parameter><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_frame_defaults</name><parameter_list>(<parameter><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cropped_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_cnt</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subband_cnt</name></name> <operator>=</operator> <name>SUBBAND_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lowpass_precision</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quantisation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wavelet_depth</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pshift</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>difference_coding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>progressive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_plane_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_peak_table_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dequant_and_decompand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quantisation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codebook</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>codebook</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>codebook</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>abslevel</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">264</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>abslevel</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">768</literal> <operator>*</operator> <name>abslevel</name> <operator>*</operator> <name>abslevel</name> <operator>*</operator> <name>abslevel</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">255</literal> <operator>*</operator> <literal type="number">255</literal> <operator>*</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator>

<call><name>FFSIGN</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>quantisation</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>level</name> <operator>*</operator> <name>quantisation</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>level</name> <operator>*</operator> <name>quantisation</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>difference_coding</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>band</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>peak_table</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><name>Peak</name> <modifier>*</modifier></type><name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>band</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>peak</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peak</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>process_alpha</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>channel</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>-=</operator> <name>ALPHA_COMPAND_DC_OFFSET</name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>*=</operator> <name>ALPHA_COMPAND_GAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>process_bayer</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>g1</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>g2</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G1</name></decl>, <decl><type ref="prev"/><name>G2</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>rg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rg</name> <operator>=</operator> <name><name>g1</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bg</name> <operator>=</operator> <name><name>g2</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gd</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gd</name> <operator>-=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <operator>(</operator><name>rg</name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G1</name> <operator>=</operator> <name>g</name> <operator>+</operator> <name>gd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G2</name> <operator>=</operator> <name>g</name> <operator>-</operator> <name>gd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>bg</name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G1</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>G1</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G2</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>G2</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>G1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>G2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g1</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g2</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>out_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>low_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>high</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>high_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><literal type="number">11</literal><operator>*</operator><name><name>low</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><name><name>low</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <name><name>low</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name><name>high</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>high_stride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator> <literal type="number">5</literal><operator>*</operator><name><name>low</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>low</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <name><name>low</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <name><name>high</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>high_stride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator> <literal type="number">5</literal><operator>*</operator><name><name>low</name><index>[<expr><name>i</name><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name><name>high</name><index>[<expr><name>i</name><operator>*</operator><name>high_stride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><literal type="number">11</literal><operator>*</operator><name><name>low</name><index>[<expr><name>i</name><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <name><name>high</name><index>[<expr><name>i</name><operator>*</operator><name>high_stride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name><name>low</name><index>[<expr><name>i</name><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <name><name>high</name><index>[<expr><name>i</name><operator>*</operator><name>high_stride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <name><name>low</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name><name>low</name><index>[<expr><name>i</name><operator>*</operator><name>low_stride</name></expr>]</index></name> <operator>-</operator> <name><name>high</name><index>[<expr><name>i</name><operator>*</operator><name>high_stride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>out_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>interlaced_vertical_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>high</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>even</name></decl>, <decl><type ref="prev"/><name>odd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>even</name> <operator>=</operator> <operator>(</operator><name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>high</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>odd</name> <operator>=</operator> <operator>(</operator><name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>high</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name> <operator>+</operator> <name>linesize</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>high</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_filter_clip</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>high</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_filter_clip_bayer</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>high</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>out_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>low_stride</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>high</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>high_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_stride</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>low_stride</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>high_stride</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buffers</name><parameter_list>(<parameter><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_x_shift</name></decl>, <decl><type ref="prev"/><name>chroma_y_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>chroma_x_shift</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>chroma_y_shift</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_x_shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_y_shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w8</name></decl>, <decl><type ref="prev"/><name>h8</name></decl>, <decl><type ref="prev"/><name>w4</name></decl>, <decl><type ref="prev"/><name>h4</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name>chroma_x_shift</name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name>chroma_y_shift</name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_y_shift</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>height</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w8</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h8</name> <operator>=</operator> <name>height</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w4</name> <operator>=</operator> <name>w8</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h4</name> <operator>=</operator> <name>h8</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w2</name> <operator>=</operator> <name>w4</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h4</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>=</operator>

<call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>height</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name> <operator>=</operator>

<call><name>av_malloc_array</name><argument_list>(<argument><expr><name>height</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>w8</name> <operator>*</operator> <name>h8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>w8</name> <operator>*</operator> <name>h8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>w8</name> <operator>*</operator> <name>h8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>w2</name> <operator>*</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>w2</name> <operator>*</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>w2</name> <operator>*</operator> <name>h2</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>DWT_LEVELS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>a_width</name> <operator>=</operator> <name>w8</name> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>a_height</name> <operator>=</operator> <name>h8</name> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>w8</name> <operator>*</operator> <name>h8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idwt_tmp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>w2</name> <operator>*</operator> <name>h2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a_height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a_width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a_format</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cfhd_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>planes</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>got_buffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeff_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_frame_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tagu</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>tag</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>tagu</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>tag8</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>tagu</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>abstag</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>abs_tag8</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>tag8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>data</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>abs_tag8</name> <operator>&gt;=</operator> <literal type="number">0x60</literal> <operator>&amp;&amp;</operator> <name>abs_tag8</name> <operator>&lt;=</operator> <literal type="number">0x6f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"large len %x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tagu</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>SampleFlags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Progressive?%"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>progressive</name></name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0x0001</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ImageWidth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Width %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ImageHeight</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Height %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">101</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Bits per component: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bits per component %d is invalid\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ChannelCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Channel Count: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_cnt</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Channel Count of %"</literal><name>PRIu16</name><literal type="string">" is unsupported\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>SubbandCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Subband Count: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>SUBBAND_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Subband Count of %"</literal><name>PRIu16</name><literal type="string">" is unsupported\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ChannelNumber</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Channel number %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name> <operator>&gt;=</operator> <name>planes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_plane_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>SubbandNumber</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>data</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Subband number %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <name>DWT_LEVELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid subband number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">51</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Subband number actual %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subband_num_actual</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num_actual</name></name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid subband number actual\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>LowpassPrecision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Lowpass precision bits: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>Quantization</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quantisation</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Quantisation: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>PrescaleShift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prescale_shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prescale_shift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prescale_shift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Prescale shift (VC-5): %x\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">27</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Lowpass width %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid lowpass width\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Lowpass height %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a_height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid lowpass height\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sample type? %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Transform type of %"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Transform-type? %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>abstag</name> <operator>&gt;=</operator> <literal type="number">0x4000</literal> <operator>&amp;&amp;</operator> <name>abstag</name> <operator>&lt;=</operator> <literal type="number">0x40ff</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>abstag</name> <operator>==</operator> <literal type="number">0x4001</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Small chunk length %d %s\n"</literal></expr></argument>, <argument><expr><name>data</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"optional"</literal></expr> </then><else>: <expr><literal type="string">"required"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>data</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">23</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Skip frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Skip frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"tag=2 header - skipping %i tag/value pairs\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many tag/value pairs (%d)\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tag2</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val2</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Tag/Value = %x %x\n"</literal></expr></argument>, <argument><expr><name>tag2</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">41</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Highpass width %i channel %i level %i subband %i\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid highpass width\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">42</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Highpass height %i\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid highpass height\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">49</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Highpass width2 %i\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid highpass width2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Highpass height2 %i\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid highpass height2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">71</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Codebook %i\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">72</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>difference_coding</name></name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Other codebook? %i\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Subsampling or bit-depth flag? %i\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>data</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>data</name> <operator>==</operator> <literal type="number">12</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid bits per channel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">84</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sample format? %i\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP12</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP12</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Sample format of %"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <ternary><condition><expr><name>data</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <operator>-</operator><literal type="number">85</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Cropped height %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cropped_height</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <operator>-</operator><literal type="number">75</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>gb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <operator>-</operator><literal type="number">76</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name> <operator>&amp;=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xffffU</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>gb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <operator>-</operator><literal type="number">74</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unknown tag %i data %x\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>data</name> <operator>==</operator> <literal type="number">0x1a4a</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>a_width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>a_height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>a_format</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>alloc_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cropped_height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cropped_height</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator>

<name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_buffer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>coeff_data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num_actual</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>data</name> <operator>==</operator> <literal type="number">0xf0f</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>a_width</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>a_height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lowpass_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowpass_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowpass_a_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowpass_a_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a_width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No end of header tag found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lowpass_height</name> <operator>&gt;</operator> <name>lowpass_a_height</name> <operator>||</operator> <name>lowpass_width</name> <operator>&gt;</operator> <name>lowpass_a_width</name> <operator>||</operator>

<name>lowpass_a_width</name> <operator>*</operator> <name>lowpass_a_height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many lowpass coefficients\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Start of lowpass coeffs component %d height:%d, width:%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coeff_data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>coeff_data</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lowpass_height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coeff_data</name><index>[<expr><name>lowpass_height</name> <operator>*</operator> <name>lowpass_width</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coeff_data</name><index>[<expr><operator>(</operator><name>lowpass_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lowpass_width</name></expr>]</index></name></expr></argument>,

<argument><expr><name>lowpass_width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>coeff_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Lowpass coefficients %d\n"</literal></expr></argument>, <argument><expr><name>lowpass_width</name> <operator>*</operator> <name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">55</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subband_num_actual</name></name> <operator>!=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>a_width</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>a_height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>highpass_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highpass_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highpass_a_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>a_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highpass_a_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>a_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highpass_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num</name></name></expr>]</index></name><operator>.</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_expected</name> <init>= <expr><name>highpass_a_height</name> <operator>*</operator> <name>highpass_a_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No end of header tag found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>highpass_height</name> <operator>&gt;</operator> <name>highpass_a_height</name> <operator>||</operator> <name>highpass_width</name> <operator>&gt;</operator> <name>highpass_a_width</name> <operator>||</operator> <name>a_expected</name> <operator>&lt;</operator> <name>highpass_height</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>highpass_stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many highpass coefficients\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expected</name> <operator>=</operator> <name>highpass_height</name> <operator>*</operator> <name>highpass_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Start subband coeffs plane %i level %i codebook %i expected %i\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>table_9_rl_vlc</name></name></expr></argument>,

<argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>expected</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <call><name>dequant_and_decompand</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>quantisation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coeff_data</name><operator>++</operator> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>table_18_rl_vlc</name></name></expr></argument>,

<argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>run</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>expected</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <call><name>dequant_and_decompand</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>quantisation</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coeff_data</name><operator>++</operator> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>expected</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Escape codeword not found, probably corrupt data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><operator>.</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>peak_table</name><argument_list>(<argument><expr><name>coeff_data</name> <operator>-</operator> <name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>difference_coding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>difference_coding</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_num</name></name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subband_num_actual</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>highpass_width</name></expr></argument>, <argument><expr><name>highpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bitstream overread error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"End subband coeffs %i extra %i\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>highpass_height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coeff_data</name><index>[<expr><name>highpass_height</name> <operator>*</operator> <name>highpass_stride</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coeff_data</name><index>[<expr><operator>(</operator><name>highpass_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>highpass_stride</name></expr>]</index></name></expr></argument>,

<argument><expr><name>highpass_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>coeff_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>a_width</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>a_height</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>a_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No end of header tag found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>planes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lowpass_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowpass_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highpass_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>act_plane</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>plane</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>low</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>high</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>act_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_linesize</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>act_plane</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dst_linesize</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>act_plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lowpass_height</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a_height</name> <operator>||</operator> <name>lowpass_width</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a_width</name> <operator>||</operator>

<operator>!</operator><name>highpass_stride</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid plane dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decoding level 1 plane %i %i %i %i\n"</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vert_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vert_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>horiz_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lowpass_height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lowpass_width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>highpass_stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lowpass_height</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_height</name> <operator>||</operator> <name>lowpass_width</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_width</name> <operator>||</operator>

<operator>!</operator><name>highpass_stride</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid plane dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Level 2 plane %i %i %i %i\n"</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vert_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vert_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>horiz_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>lowpass_height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lowpass_width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>highpass_stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lowpass_height</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_height</name> <operator>||</operator> <name>lowpass_width</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_width</name> <operator>||</operator>

<operator>!</operator><name>highpass_stride</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid plane dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Level 3 plane %i %i %i %i\n"</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>progressive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vert_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vert_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>highpass_stride</name></expr></argument>, <argument><expr><name>lowpass_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>act_plane</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>act_plane</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>lowpass_height</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator>

<name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horiz_filter_clip_bayer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horiz_filter_clip</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP12</name> <operator>&amp;&amp;</operator> <name>act_plane</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_alpha</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"interlaced frame ? %d"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>horiz_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>subband</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>horiz_filter</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>lowpass_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>act_plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>l_h</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lowpass_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>interlaced_vertical_filter</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>act_plane</name></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>act_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>lowpass_width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>act_plane</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_bayer</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cfhd_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFHDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc_9</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc_18</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_cfhd_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cfhd"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Cineform HD"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_CFHD</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CFHDContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cfhd_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>cfhd_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>cfhd_decode</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
