<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qtrleenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RLE_BULK</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RLE_REPEAT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RLE_SKIP</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>QtrleEncContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>previous_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>logical_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>rlecode_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>length_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>skip_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key_frame</name></decl>;</decl_stmt>

}</block></struct></type> <name>QtrleEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qtrle_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QtrleEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>length_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qtrle_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QtrleEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name><operator>=</operator><name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name><operator>=</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Width not being a multiple of 4 is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB555BE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported colorspace.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr> ?</condition><then> <expr><literal type="number">40</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name><operator>*</operator><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_table</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length_table</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>skip_table</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>length_table</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_buf_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name><operator>*</operator><literal type="number">2</literal> 

<operator>+</operator> <literal type="number">15</literal> 

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">2</literal> 

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name><operator>/</operator><name>MAX_RLE_BULK</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qtrle_encode_line</name><parameter_list>(<parameter><decl><type><name>QtrleEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name><init>=<expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>rlecode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>skipcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>repeatcount</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_skip_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_repeat_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base_bulk_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowest_bulk_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowest_bulk_cost_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sec_lowest_bulk_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sec_lowest_bulk_cost_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>this_line</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator> <name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>line</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator> <name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev_line</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>line</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>width</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_bulk_cost</name> <operator>=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_bulk_cost_index</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost</name> <operator>=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost_index</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>base_bulk_cost</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev_bulk_cost</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>MAX_RLE_BULK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>lowest_bulk_cost_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lowest_bulk_cost</name> <operator>=</operator> <name>sec_lowest_bulk_cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_bulk_cost_index</name> <operator>=</operator> <name>sec_lowest_bulk_cost_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost</name> <operator>=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost_index</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_bulk_cost</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_bulk_cost</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_bulk_cost</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>base_bulk_cost</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_bulk_cost</name> <operator>&lt;=</operator> <name>sec_lowest_bulk_cost</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_bulk_cost</name> <operator>&lt;=</operator> <name>lowest_bulk_cost</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sec_lowest_bulk_cost</name> <operator>=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_bulk_cost</name> <operator>=</operator> <name>prev_bulk_cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_bulk_cost_index</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sec_lowest_bulk_cost</name> <operator>=</operator> <name>prev_bulk_cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost_index</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>this_line</name></expr></argument>, <argument><expr><name>prev_line</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>skipcount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_RLE_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>total_skip_cost</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>i</name> <operator>+</operator> <name>skipcount</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>skipcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>this_line</name></expr></argument>, <argument><expr><name>this_line</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>repeatcount</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>repeatcount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_RLE_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>repeatcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>total_repeat_cost</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>i</name> <operator>+</operator> <name>repeatcount</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total_skip_cost</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_repeat_cost</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>repeatcount</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>skipcount</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>total_repeat_cost</name> <operator>&lt;</operator> <name>total_skip_cost</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>total_repeat_cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>repeatcount</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>skipcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>total_skip_cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lowest_bulk_cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lowest_bulk_cost_index</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lowest_bulk_cost</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_lowest_bulk_cost</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>this_line</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_line</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_line</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_line</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>this_line</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator> <name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>line</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rlecode</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rlecode_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rlecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rlecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>rlecode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rlecode</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>this_line</name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>^</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>this_line</name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>, <argument><expr><name>rlecode</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>rlecode</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>this_line</name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>^</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>this_line</name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>rlecode</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>QtrleEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_line</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>orig_buf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>line_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>logical_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>start_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start_line</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>start_line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>start_line</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>start_line</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>end_line</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</init> <condition><expr><name>end_line</name> <operator>&gt;</operator> <name>start_line</name></expr>;</condition> <incr><expr><name>end_line</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>end_line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>end_line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>previous_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start_line</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end_line</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>||</operator> <name>start_line</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>start_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>end_line</name> <operator>-</operator> <name>start_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_line</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_line</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qtrle_encode_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>orig_buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>orig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>buf</name> <operator>-</operator> <name>orig_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qtrle_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QtrleEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_buf_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>%</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>previous_frame</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot add reference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_qtrle_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qtrle"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QuickTime Animation (RLE) video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_QTRLE</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QtrleEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qtrle_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>qtrle_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>qtrle_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGB555BE</name></expr>, <expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
