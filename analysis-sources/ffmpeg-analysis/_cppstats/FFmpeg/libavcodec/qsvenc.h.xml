<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qsvenc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_CO2</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_CO3</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_CO_VPS</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_EXT_HEVC_TILES</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_EXT_VP9_PARAM</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 26)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_TRELLIS</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_MAX_SLICE_SIZE</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_BREF_TYPE</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_LA</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_LA_DS</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_LA_HRD</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_VDENC</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_GPB</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 18)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_AVBR</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_ICQ</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_VCM</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_QVBR</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_MF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_AVBR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_ICQ</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_VCM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_QVBR</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_MF</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 25)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>QSV_HAVE_LA_DS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_LOOKAHEAD_DS_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_LOOKAHEAD_DS_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_LOOKAHEAD_DS_2x</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_LOOKAHEAD_DS_4x</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_COMMON_OPTS</name></cpp:macro> <cpp:value>{ "async_depth", "Maximum processing parallelism", OFFSET(qsv.async_depth), AV_OPT_TYPE_INT, { .i64 = ASYNC_DEPTH_DEFAULT }, 1, INT_MAX, VE }, { "avbr_accuracy", "Accuracy of the AVBR ratecontrol", OFFSET(qsv.avbr_accuracy), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, VE }, { "avbr_convergence", "Convergence of the AVBR ratecontrol", OFFSET(qsv.avbr_convergence), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, VE }, { "preset", NULL, OFFSET(qsv.preset), AV_OPT_TYPE_INT, { .i64 = MFX_TARGETUSAGE_BALANCED }, MFX_TARGETUSAGE_BEST_QUALITY, MFX_TARGETUSAGE_BEST_SPEED, VE, "preset" }, { "veryfast", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_BEST_SPEED }, INT_MIN, INT_MAX, VE, "preset" }, { "faster", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_6 }, INT_MIN, INT_MAX, VE, "preset" }, { "fast", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_5 }, INT_MIN, INT_MAX, VE, "preset" }, { "medium", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_BALANCED }, INT_MIN, INT_MAX, VE, "preset" }, { "slow", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_3 }, INT_MIN, INT_MAX, VE, "preset" }, { "slower", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_2 }, INT_MIN, INT_MAX, VE, "preset" }, { "veryslow", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = MFX_TARGETUSAGE_BEST_QUALITY }, INT_MIN, INT_MAX, VE, "preset" }, { "rdo", "Enable rate distortion optimization", OFFSET(qsv.rdo), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "max_frame_size", "Maximum encoded frame size in bytes", OFFSET(qsv.max_frame_size), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, UINT16_MAX, VE }, { "max_slice_size", "Maximum encoded slice size in bytes", OFFSET(qsv.max_slice_size), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, UINT16_MAX, VE }, { "bitrate_limit", "Toggle bitrate limitations", OFFSET(qsv.bitrate_limit), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "mbbrc", "MB level bitrate control", OFFSET(qsv.mbbrc), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "extbrc", "Extended bitrate control", OFFSET(qsv.extbrc), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "adaptive_i", "Adaptive I-frame placement", OFFSET(qsv.adaptive_i), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "adaptive_b", "Adaptive B-frame placement", OFFSET(qsv.adaptive_b), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "b_strategy", "Strategy to choose between I/P/B-frames", OFFSET(qsv.b_strategy), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, VE }, { "forced_idr", "Forcing I frames as IDR frames", OFFSET(qsv.forced_idr), AV_OPT_TYPE_BOOL,{ .i64 = 0 }, 0, 1, VE }, { "low_power", "enable low power mode(experimental: many limitations by mfx version, BRC modes, etc.)", OFFSET(qsv.low_power), AV_OPT_TYPE_BOOL, { .i64 = 0}, 0, 1, VE},</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> <name>SetEncodeCtrlCB</name> <parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>mfxEncodeCtrl</name><modifier>*</modifier></type> <name>enc_ctrl</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>QSVEncContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>work_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVSession</name></type> <name>internal_qs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameAllocRequest</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtCodingOption</name></type> <name>extco</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>

<decl_stmt><decl><type><name>mfxExtCodingOption2</name></type> <name>extco2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>

<decl_stmt><decl><type><name>mfxExtCodingOption3</name></type> <name>extco3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_MF</name></expr></cpp:if>

<decl_stmt><decl><type><name>mfxExtMultiFrameParam</name></type> <name>extmfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtMultiFrameControl</name></type> <name>extmfc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_HEVC_TILES</name></expr></cpp:if>

<decl_stmt><decl><type><name>mfxExtHEVCTiles</name></type> <name>exthevctiles</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_VP9_PARAM</name></expr></cpp:if>

<decl_stmt><decl><type><name>mfxExtVP9Param</name></type> <name>extvp9param</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mfxExtOpaqueSurfaceAlloc</name></type> <name>opaque_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque_surfaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>opaque_alloc_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>extparam_internal</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>QSV_HAVE_CO2</name> <operator>+</operator> <name>QSV_HAVE_CO3</name> <operator>+</operator> <operator>(</operator><name>QSV_HAVE_MF</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_extparam_internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>extparam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>async_fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFramesContext</name></type> <name>frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hevc_vps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>async_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idr_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avbr_accuracy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avbr_convergence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_timing_sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>look_ahead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>look_ahead_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>look_ahead_downsampling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rdo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_slice_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>single_sei_nal_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_dec_frame_buffering</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbbrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extbrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adaptive_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adaptive_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_strategy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cavlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_ref_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_ref_cycle_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_ref_qp_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recovery_point_sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeat_pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low_power</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gpb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a53_cc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_MF</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>mfmode</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>load_plugins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SetEncodeCtrlCB</name> <modifier>*</modifier></type><name>set_encode_ctrl_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forced_idr</name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVEncContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_qsv_enc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_qsv_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_qsv_enc_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
