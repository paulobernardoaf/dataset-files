<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\parsers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_aac_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_aac_latm_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_ac3_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_adx_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_av1_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_avs2_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_bmp_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_cavsvideo_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_cook_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dca_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dirac_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dnxhd_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dpx_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dvaudio_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dvbsub_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dvdsub_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_dvd_nav_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_flac_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_g723_1_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_g729_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_gif_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_gsm_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_h261_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_h263_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_h264_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_hevc_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_mjpeg_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_mlp_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_mpeg4video_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_mpegaudio_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_mpegvideo_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_opus_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_png_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_pnm_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_rv30_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_rv40_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_sbc_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_sipr_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_tak_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_vc1_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_vorbis_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_vp3_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_vp8_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_vp9_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecParser</name></type> <name>ff_xma_parser</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/parser_list.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>av_parser_next_init</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av_parser_init_next</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecParser</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>AVCodecParser</name><operator>*</operator><operator>)</operator><name><name>parser_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>AVCodecParser</name> <modifier>*</modifier></type><name>av_parser_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecParser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>av_parser_next_init</name></expr></argument>, <argument><expr><name>av_parser_init_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>AVCodecParser</name><operator>*</operator><operator>)</operator><name><name>parser_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AVCodecParser</name> <modifier>*</modifier></type><name>av_parser_iterate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecParser</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>parser_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>opaque</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_register_codec_parser</name><parameter_list>(<parameter><decl><type><name>AVCodecParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>av_parser_next_init</name></expr></argument>, <argument><expr><name>av_parser_init_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
