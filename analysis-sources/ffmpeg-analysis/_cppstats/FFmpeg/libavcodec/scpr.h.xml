<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\scpr.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scpr3.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>RangeCoder</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code1</name></decl>;</decl_stmt>

}</block></struct></type> <name>RangeCoder</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PixelModel</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>freq</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>lookup</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_freq</name></decl>;</decl_stmt>

}</block></struct></type> <name>PixelModel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SCPRContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>current_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelModel</name></type> <name><name>pixel_model</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>op_model</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>run_model</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>range_model</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>count_model</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>fill_model</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sxy_model</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>mv_model</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">513</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nbx</name></decl>, <name>nby</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nbcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cxshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name><name>pixel_model3</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RunModel3</name></type> <name><name>run_model3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RunModel3</name></type> <name>range_model3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RunModel3</name></type> <name>count_model3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FillModel3</name></type> <name>fill_model3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SxyModel3</name></type> <name><name>sxy_model3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MVModel3</name></type> <name><name>mv_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpModel3</name></type> <name><name>op_model3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_freq</name>)<parameter_list>(<parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>total_freq</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode</name>)<parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cumFreq</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>total_freq</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>SCPRContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_run_i</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ptype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>px</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>py</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>clr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>plx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ply</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>backstep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cx1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>px</name></expr></init></decl>,

<decl><type ref="prev"/><name>y</name> <init>= <expr><operator>*</operator><name>py</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lx</name> <init>= <expr><operator>*</operator><name>plx</name></expr></init></decl>,

<decl><type ref="prev"/><name>ly</name> <init>= <expr><operator>*</operator><name>ply</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>ptype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>x</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>y</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name>run</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>ly</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>lx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>x</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>y</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name>run</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>ly</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>lx</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>x</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>y</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name>run</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>y</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>odst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off1</name> <init>= <expr><operator>(</operator><name>ly</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>lx</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>+</operator> <name>off</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>backstep</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>odst</name><index>[<expr><name>off1</name></expr>]</index></name> <operator>+</operator>

<name><name>odst</name><index>[<expr><name>off2</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>-</operator>

<name><name>odst</name><index>[<expr><name>off2</name> <operator>-</operator> <name>z</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>odst</name><index>[<expr><name>off1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>odst</name><index>[<expr><name>off2</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>-</operator>

<name><name>odst</name><index>[<expr><name>off2</name> <operator>-</operator> <name>z</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>odst</name><index>[<expr><name>off1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>odst</name><index>[<expr><name>off2</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>-</operator>

<name><name>odst</name><index>[<expr><name>off2</name> <operator>-</operator> <name>z</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>g</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>x</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>y</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name>run</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>y</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>backstep</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>off</name> <operator>-</operator> <name>z</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>x</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>y</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name>run</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>plx</name><operator>=</operator> <name>lx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ply</name><operator>=</operator> <name>ly</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0x3F00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0x3FFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_run_p</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ptype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>clr</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plinesize</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>bx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>by</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>backstep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx2</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cx1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>ptype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx2</name> <operator>||</operator> <operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bx</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>by</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>backstep</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx2</name> <operator>||</operator> <operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bx</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>by</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>by</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx2</name> <operator>||</operator> <operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bx</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>by</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>prev</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>plinesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx2</name> <operator>||</operator> <operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bx</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>by</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>odst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>by</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>backstep</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>odst</name><index>[<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator>

<name><name>odst</name><index>[<expr><operator>(</operator><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>-</operator>

<name><name>odst</name><index>[<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>odst</name><index>[<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>odst</name><index>[<expr><operator>(</operator><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>odst</name><index>[<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>odst</name><index>[<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>odst</name><index>[<expr><operator>(</operator><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator>

<name><name>odst</name><index>[<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>g</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx2</name> <operator>||</operator> <operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bx</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>by</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>by</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>by</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>backstep</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>(</operator><operator>*</operator><name>by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>z</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>*</operator><name>by</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>*</operator><name>bx</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx2</name> <operator>||</operator> <operator>*</operator><name>bx</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bx</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>by</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0x3F00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0x3FFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>(</operator><name>clr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
