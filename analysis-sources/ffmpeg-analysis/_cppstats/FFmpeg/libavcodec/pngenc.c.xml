<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\pngenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_videoencdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"png.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apng.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/color_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOBUF_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>APNGFctlChunk</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sequence_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>x_offset</name></decl>, <name>y_offset</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>delay_num</name></decl>, <name>delay_den</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>dispose_op</name></decl>, <name>blend_op</name>;</decl_stmt>

}</block></struct></type> <name>APNGFctlChunk</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PNGEncContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LLVidEncDSPContext</name></type> <name>llvidencdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bytestream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>zstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>IOBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dpm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_progressive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>palette_checksum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sequence_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_data_updated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extra_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APNGFctlChunk</name></type> <name>last_frame_fctl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>last_frame_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_frame_packet_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>PNGEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>png_get_interlaced_row</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bits_per_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>dst_x</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>bpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>masks</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>masks</name><index>[<expr><name>pass</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bits_per_pixel</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>row_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>dst_x</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <name>bits_per_pixel</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>bpp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>bpp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_png_paeth_prediction</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>pa</name></decl>, <decl><type ref="prev"/><name>pb</name></decl>, <decl><type ref="prev"/><name>pc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>bpp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <name>bpp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pb</name> <operator>&amp;&amp;</operator> <name>pa</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_left_prediction</name><parameter_list>(<parameter><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name>src</name> <operator>+</operator> <name>bpp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>unaligned_w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unaligned_w</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>bpp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>unaligned_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>src2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>unaligned_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llvidencdsp</name><operator>.</operator><name>diff_bytes</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>png_filter_row</name><parameter_list>(<parameter><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_type</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>filter_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PNG_FILTER_VALUE_NONE</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PNG_FILTER_VALUE_SUB</name></expr>:</case>

<expr_stmt><expr><call><name>sub_left_prediction</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PNG_FILTER_VALUE_UP</name></expr>:</case>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llvidencdsp</name><operator>.</operator><name>diff_bytes</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PNG_FILTER_VALUE_AVG</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bpp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>bpp</name></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>PNG_FILTER_VALUE_PAETH</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bpp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>sub_png_paeth_prediction</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>png_choose_filter</name><parameter_list>(<parameter><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>bpp</name> <operator>||</operator> <operator>!</operator><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top</name> <operator>&amp;&amp;</operator> <name>pred</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>PNG_FILTER_VALUE_SUB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pred</name> <operator>==</operator> <name>PNG_FILTER_VALUE_MIXED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>bcost</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>dst</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>pred</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>png_filter_row</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name>bcost</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bcost</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>buf2</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>png_filter_row</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>png_write_chunk</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_table</name> <init>= <expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><operator>~</operator><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tagbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>tagbuf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>tagbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>av_bswap32</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>~</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>png_write_image_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_table</name> <init>= <expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><operator>~</operator><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PNG</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><operator>~</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>png_write_row</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;</operator> <name>IOBUF_SIZE</name> <operator>+</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_write_image_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>IOBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>IOBUF_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB32_PNG</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_WB32(buf, lrint((n) * 100000))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>png_get_chrm</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>prim</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>rx</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>gx</name></decl>, <decl><type ref="prev"/><name>gy</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>wx</name> <init>= <expr><literal type="number">0.3127</literal></expr></init></decl>, <decl><type ref="prev"/><name>wy</name> <init>= <expr><literal type="number">0.3290</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>prim</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_PRI_BT709</name></expr>:</case>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <literal type="number">0.640</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ry</name> <operator>=</operator> <literal type="number">0.330</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <literal type="number">0.300</literal></expr>;</expr_stmt> <expr_stmt><expr><name>gy</name> <operator>=</operator> <literal type="number">0.600</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">0.150</literal></expr>;</expr_stmt> <expr_stmt><expr><name>by</name> <operator>=</operator> <literal type="number">0.060</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT470M</name></expr>:</case>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <literal type="number">0.670</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ry</name> <operator>=</operator> <literal type="number">0.330</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <literal type="number">0.210</literal></expr>;</expr_stmt> <expr_stmt><expr><name>gy</name> <operator>=</operator> <literal type="number">0.710</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">0.140</literal></expr>;</expr_stmt> <expr_stmt><expr><name>by</name> <operator>=</operator> <literal type="number">0.080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wx</name> <operator>=</operator> <literal type="number">0.310</literal></expr>;</expr_stmt> <expr_stmt><expr><name>wy</name> <operator>=</operator> <literal type="number">0.316</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT470BG</name></expr>:</case>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <literal type="number">0.640</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ry</name> <operator>=</operator> <literal type="number">0.330</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <literal type="number">0.290</literal></expr>;</expr_stmt> <expr_stmt><expr><name>gy</name> <operator>=</operator> <literal type="number">0.600</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">0.150</literal></expr>;</expr_stmt> <expr_stmt><expr><name>by</name> <operator>=</operator> <literal type="number">0.060</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE170M</name></expr>:</case>

<case>case <expr><name>AVCOL_PRI_SMPTE240M</name></expr>:</case>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <literal type="number">0.630</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ry</name> <operator>=</operator> <literal type="number">0.340</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <literal type="number">0.310</literal></expr>;</expr_stmt> <expr_stmt><expr><name>gy</name> <operator>=</operator> <literal type="number">0.595</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">0.155</literal></expr>;</expr_stmt> <expr_stmt><expr><name>by</name> <operator>=</operator> <literal type="number">0.070</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT2020</name></expr>:</case>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <literal type="number">0.708</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ry</name> <operator>=</operator> <literal type="number">0.292</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <literal type="number">0.170</literal></expr>;</expr_stmt> <expr_stmt><expr><name>gy</name> <operator>=</operator> <literal type="number">0.797</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">0.131</literal></expr>;</expr_stmt> <expr_stmt><expr><name>by</name> <operator>=</operator> <literal type="number">0.046</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name></expr></argument> , <argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> , <argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>gx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>gy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>png_get_gama</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>gamma</name> <init>= <expr><call><name>avpriv_get_gamma_from_trc</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>&lt;=</operator> <literal type="number">1e-6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32_PNG</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_headers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>color_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>is_progressive</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dpm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dpm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dpm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_STEREO3D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>side_data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo3d</name> <init>= <expr><operator>(</operator><name>AVStereo3D</name> <operator>*</operator><operator>)</operator><name><name>side_data</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stereo3d</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_STEREO3D_SIDEBYSIDE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>stereo3d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_2D</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Only side-by-side stereo3d flag can be defined within sTER chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pict</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_BT709</name> <operator>&amp;&amp;</operator>

<name><name>pict</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_IEC61966_2_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>png_get_chrm</name><argument_list>(<argument><expr><name><name>pict</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>png_get_gama</name><argument_list>(<argument><expr><name><name>pict</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>==</operator> <name>PNG_COLOR_TYPE_PALETTE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alpha_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>palette</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>has_alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_alpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>alpha_ptr</name><operator>++</operator> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>,

<argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>,

<argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name>pict</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_size</name></decl>, <decl><type ref="prev"/><name>pass_row_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>crow_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>crow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>crow_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>progressive_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><name><name>pict</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>crow_base</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>row_size</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>==</operator> <name>PNG_FILTER_VALUE_MIXED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crow_base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crow_buf</name> <operator>=</operator> <name>crow_base</name> <operator>+</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_progressive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>progressive_buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>row_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top_buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>row_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progressive_buf</name> <operator>||</operator> <operator>!</operator><name>top_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>IOBUF_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_progressive</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <name>NB_PASSES</name></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pass_row_size</name> <operator>=</operator> <call><name>ff_png_pass_row_size</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name></expr></argument>, <argument><expr><name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pass_row_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ff_png_pass_ymask</name><index>[<expr><name>pass</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>progressive_buf</name></expr></argument>, <argument><expr><name>top_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_get_interlaced_row</name><argument_list>(<argument><expr><name>progressive_buf</name></expr></argument>, <argument><expr><name>pass_row_size</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name></expr></argument>, <argument><expr><name>pass</name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crow</name> <operator>=</operator> <call><name>png_choose_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>crow_buf</name></expr></argument>, <argument><expr><name>progressive_buf</name></expr></argument>,

<argument><expr><name>top</name></expr></argument>, <argument><expr><name>pass_row_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>crow</name></expr></argument>, <argument><expr><name>pass_row_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>progressive_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>crow</name> <operator>=</operator> <call><name>png_choose_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>crow_buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>top</name></expr></argument>,

<argument><expr><name>row_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>crow</name></expr></argument>, <argument><expr><name>row_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_OK</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>IOBUF_SIZE</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;</operator> <name>len</name> <operator>+</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>png_write_image_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>IOBUF_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>the_end</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crow_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progressive_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_png</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enc_row_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max_packet_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>enc_row_size</name> <operator>=</operator> <call><name>deflateBound</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_packet_size</name> <operator>=</operator>

<name>AV_INPUT_BUFFER_MIN_SIZE</name> <operator>+</operator> 

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator>

<name>enc_row_size</name> <operator>+</operator>

<literal type="number">12</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>enc_row_size</name> <operator>+</operator> <name>IOBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>IOBUF_SIZE</name><operator>)</operator> 

<operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_packet_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>max_packet_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_start</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>PNGSIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_headers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apng_do_inverse_blend</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>APNGFctlChunk</name> <modifier>*</modifier></type><name>fctl_chunk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>leftmost_x</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rightmost_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>topmost_y</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bottommost_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input_data</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output_data</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>input_linesize</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>output_linesize</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>input_data</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>output_data</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>leftmost_x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>leftmost_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>rightmost_x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rightmost_x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>topmost_y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>topmost_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>bottommost_y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bottommost_y</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>input_data</name> <operator>+=</operator> <name>input_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_data</name> <operator>+=</operator> <name>output_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>leftmost_x</name> <operator>==</operator> <name><name>input</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name>rightmost_x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>leftmost_x</name> <operator>=</operator> <name>topmost_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rightmost_x</name> <operator>=</operator> <name>bottommost_y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fctl_chunk</name><operator>-&gt;</operator><name>blend_op</name></name> <operator>==</operator> <name>APNG_BLEND_OP_SOURCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_data</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>topmost_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bottommost_y</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output_data</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>input_linesize</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name>leftmost_x</name></expr></argument>,

<argument><expr><name>bpp</name> <operator>*</operator> <operator>(</operator><name>rightmost_x</name> <operator>-</operator> <name>leftmost_x</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_data</name> <operator>+=</operator> <name>output_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>size_t</name></type> <name>transparent_palette_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY8A</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<expr_stmt><expr><name>palette</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>transparent_palette_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>transparent_palette_index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>transparent_palette_index</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>palette</name><index>[<expr><name>transparent_palette_index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>topmost_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bottommost_y</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>foreground</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>input_linesize</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name>leftmost_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>background</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>output_linesize</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name>leftmost_x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>output_data</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>output_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>topmost_y</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>leftmost_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>rightmost_x</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator> <expr><name>foreground</name> <operator>+=</operator> <name>bpp</name></expr><operator>,</operator> <expr><name>background</name> <operator>+=</operator> <name>bpp</name></expr><operator>,</operator> <expr><name>output_data</name> <operator>+=</operator> <name>bpp</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>foreground</name></expr></argument>, <argument><expr><name>background</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>transparent_palette_index</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>output_data</name> <operator>=</operator> <name>transparent_palette_index</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>foreground</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>==</operator> <literal type="number">0xffff</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>background</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>foreground</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0xffff</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>background</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>foreground</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>background</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAY8A</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>foreground</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>background</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>palette</name><index>[<expr><operator>*</operator><name>foreground</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator>

<name><name>palette</name><index>[<expr><operator>*</operator><name>background</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>output_data</name></expr></argument>, <argument><expr><name>foreground</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>rightmost_x</name> <operator>-</operator> <name>leftmost_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>bottommost_y</name> <operator>-</operator> <name>topmost_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fctl_chunk</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fctl_chunk</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fctl_chunk</name><operator>-&gt;</operator><name>x_offset</name></name> <operator>=</operator> <name>leftmost_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fctl_chunk</name><operator>-&gt;</operator><name>y_offset</name></name> <operator>=</operator> <name>topmost_y</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apng_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>,

<parameter><decl><type><name>APNGFctlChunk</name> <modifier>*</modifier></type><name>best_fctl_chunk</name></decl></parameter>, <parameter><decl><type><name>APNGFctlChunk</name> <modifier>*</modifier></type><name>best_last_fctl_chunk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name><modifier>*</modifier></type> <name>diffFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bpp</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>original_bytestream</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>original_bytestream_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_bytestream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp_bytestream_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>best_sequence_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>best_bytestream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>best_bytestream_size</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APNGFctlChunk</name></type> <name>last_fctl_chunk</name> <init>= <expr><operator>*</operator><name>best_last_fctl_chunk</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APNGFctlChunk</name></type> <name>fctl_chunk</name> <init>= <expr><operator>*</operator><name>best_fctl_chunk</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>best_fctl_chunk</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_fctl_chunk</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_fctl_chunk</name><operator>-&gt;</operator><name>x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_fctl_chunk</name><operator>-&gt;</operator><name>y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_fctl_chunk</name><operator>-&gt;</operator><name>blend_op</name></name> <operator>=</operator> <name>APNG_BLEND_OP_SOURCE</name></expr>;</expr_stmt>

<return>return <expr><call><name>encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diffFrame</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diffFrame</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name>diffFrame</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>original_bytestream</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>original_bytestream_end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_bytestream</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>original_bytestream_end</name> <operator>-</operator> <name>original_bytestream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp_bytestream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp_bytestream_end</name> <operator>=</operator> <name>temp_bytestream</name> <operator>+</operator> <operator>(</operator><name>original_bytestream_end</name> <operator>-</operator> <name>original_bytestream</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>last_fctl_chunk</name><operator>.</operator><name>dispose_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>last_fctl_chunk</name><operator>.</operator><name>dispose_op</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name><name>last_fctl_chunk</name><operator>.</operator><name>dispose_op</name></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name><name>fctl_chunk</name><operator>.</operator><name>blend_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fctl_chunk</name><operator>.</operator><name>blend_op</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name><name>fctl_chunk</name><operator>.</operator><name>blend_op</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>original_sequence_number</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name></expr></init></decl>, <decl><type ref="prev"/><name>sequence_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytestream_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>last_fctl_chunk</name><operator>.</operator><name>dispose_op</name></name> <operator>!=</operator> <name>APNG_DISPOSE_OP_PREVIOUS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>diffFrame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>last_fctl_chunk</name><operator>.</operator><name>dispose_op</name></name> <operator>==</operator> <name>APNG_DISPOSE_OP_BACKGROUND</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>last_fctl_chunk</name><operator>.</operator><name>y_offset</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>last_fctl_chunk</name><operator>.</operator><name>y_offset</name></name> <operator>+</operator> <name><name>last_fctl_chunk</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>row_start</name> <init>= <expr><name><name>diffFrame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name><name>last_fctl_chunk</name><operator>.</operator><name>x_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>row_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bpp</name> <operator>*</operator> <name><name>last_fctl_chunk</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffFrame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>diffFrame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>apng_do_inverse_blend</name><argument_list>(<argument><expr><name>diffFrame</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fctl_chunk</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>diffFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sequence_number</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name> <operator>=</operator> <name>original_sequence_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytestream_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name>bytestream_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name>bytestream_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytestream_size</name> <operator>&lt;</operator> <name>best_bytestream_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>best_fctl_chunk</name> <operator>=</operator> <name>fctl_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>best_last_fctl_chunk</name> <operator>=</operator> <name>last_fctl_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_sequence_number</name> <operator>=</operator> <name>sequence_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_bytestream</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_bytestream_size</name> <operator>=</operator> <name>bytestream_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>best_bytestream</name> <operator>==</operator> <name>original_bytestream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name>temp_bytestream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <name>temp_bytestream_end</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name>original_bytestream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <name>original_bytestream_end</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name> <operator>=</operator> <name>best_sequence_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name>original_bytestream</name> <operator>+</operator> <name>best_bytestream_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <name>original_bytestream_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>best_bytestream</name> <operator>!=</operator> <name>original_bytestream</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>original_bytestream</name></expr></argument>, <argument><expr><name>best_bytestream</name></expr></argument>, <argument><expr><name>best_bytestream_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_bytestream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_apng</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enc_row_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max_packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APNGFctlChunk</name></type> <name>fctl_chunk</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pict</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_APNG</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>==</operator> <name>PNG_COLOR_TYPE_PALETTE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>checksum</name> <init>= <expr><operator>~</operator><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0U</literal></expr></argument>, <argument><expr><name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_checksum</name></name> <operator>=</operator> <name>checksum</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>checksum</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>palette_checksum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Input contains more than one unique palette. APNG does not support multiple palettes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc_row_size</name> <operator>=</operator> <call><name>deflateBound</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_packet_size</name> <operator>=</operator>

<name>AV_INPUT_BUFFER_MIN_SIZE</name> <operator>+</operator> 

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator>

<name>enc_row_size</name> <operator>+</operator>

<operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>enc_row_size</name> <operator>+</operator> <name>IOBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>IOBUF_SIZE</name><operator>)</operator> 

<operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_packet_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pict</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>extra_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_headers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_data_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_packet</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>max_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame_packet</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>max_packet_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_packet</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_packet_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pict</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_start</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_packet</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+</operator> <name>max_packet_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fctl_chunk</name><operator>.</operator><name>sequence_number</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>sequence_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apng_encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fctl_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fctl_chunk</name><operator>.</operator><name>delay_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fctl_chunk</name><operator>.</operator><name>delay_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>dispose_op</name></name> <operator>=</operator> <name>APNG_DISPOSE_OP_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>last_fctl_chunk_start</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>extra_data_updated</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extra_data_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extra_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_data_updated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>sequence_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>x_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>y_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>delay_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>delay_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>dispose_op</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>blend_op</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_fctl_chunk_start</name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pict</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>dispose_op</name></name> <operator>!=</operator> <name>APNG_DISPOSE_OP_PREVIOUS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>dispose_op</name></name> <operator>==</operator> <name>APNG_DISPOSE_OP_BACKGROUND</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bpp</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>y_offset</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>y_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>row_start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>bpp</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>x_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>row_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bpp</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AVFrame</name><operator>*</operator><operator>)</operator><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_fctl</name></name> <operator>=</operator> <name>fctl_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_packet_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>png_enc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compression_level</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">0x28</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ff_llvidencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>llvidencdsp</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr></argument>,

<argument><expr><name>PNG_FILTER_VALUE_NONE</name></expr></argument>,

<argument><expr><name>PNG_FILTER_VALUE_MIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name>PNG_FILTER_VALUE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dpi</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dpm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only one of 'dpi' or 'dpm' options should be set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dpi</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dpm</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dpi</name></name> <operator>*</operator> <literal type="number">10000</literal> <operator>/</operator> <literal type="number">254</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_progressive</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_RGB_ALPHA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_RGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_RGB_ALPHA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_RGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_GRAY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_GRAY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8A</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_GRAY_ALPHA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_GRAY_ALPHA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_GRAY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name> <operator>=</operator> <name>PNG_COLOR_TYPE_PALETTE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>=</operator> <call><name>ff_png_get_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>color_type</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>ff_png_zalloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>ff_png_zfree</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compression_level</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>FF_COMPRESSION_DEFAULT</name></expr>

?</condition><then> <expr><name>Z_DEFAULT_COMPRESSION</name></expr>

</then><else>: <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><name>compression_level</name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>png_enc_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNGEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(PNGEncContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"dpi"</literal></expr>, <expr><literal type="string">"Set image resolution (in dots per inch)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x10000</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dpm"</literal></expr>, <expr><literal type="string">"Set image resolution (in dots per meter)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dpm</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x10000</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pred"</literal></expr>, <expr><literal type="string">"Prediction method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_NONE</name></expr> }</block></expr>, <expr><name>PNG_FILTER_VALUE_NONE</name></expr>, <expr><name>PNG_FILTER_VALUE_MIXED</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_NONE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_SUB</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"up"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_UP</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"avg"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_AVG</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"paeth"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_PAETH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mixed"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PNG_FILTER_VALUE_MIXED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>pngenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"PNG encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>apngenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"APNG encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_png_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"png"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PNG (Portable Network Graphics) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PNG</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNGEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>png_enc_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>png_enc_close</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_png</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,

<expr><name>AV_PIX_FMT_RGB48BE</name></expr>, <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>,

<expr><name>AV_PIX_FMT_PAL8</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY8A</name></expr>,

<expr><name>AV_PIX_FMT_GRAY16BE</name></expr>, <expr><name>AV_PIX_FMT_YA16BE</name></expr>,

<expr><name>AV_PIX_FMT_MONOBLACK</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>pngenc_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_apng_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"apng"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"APNG (Animated Portable Network Graphics) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_APNG</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNGEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>png_enc_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>png_enc_close</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_apng</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,

<expr><name>AV_PIX_FMT_RGB48BE</name></expr>, <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>,

<expr><name>AV_PIX_FMT_PAL8</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY8A</name></expr>,

<expr><name>AV_PIX_FMT_GRAY16BE</name></expr>, <expr><name>AV_PIX_FMT_YA16BE</name></expr>,

<expr><name>AV_PIX_FMT_MONOBLACK</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>apngenc_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
