<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hapenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snappy-c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAP_MAX_CHUNKS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<enum>enum <name>HapHeaderLength</name> <block>{

<decl><name>HAP_HDR_SHORT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>HAP_HDR_LONG</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compress_texture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>&gt;</operator> <name>out_length</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hap_write_section_header</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>HapHeaderLength</name></name></type> <name>header_length</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>section_length</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>HapSectionType</name></name></type> <name>section_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_le24</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>header_length</name> <operator>==</operator> <name>HAP_HDR_LONG</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>section_length</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_length</name> <operator>==</operator> <name>HAP_HDR_LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>section_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_compress_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>final_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>HapChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>chunk_src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chunk_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_offset</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>compressed_offset</name>

<operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>compressed_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_offset</name></name> <operator>=</operator> <name>i</name> <operator>*</operator> <name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_snappy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_src</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_dst</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>compressed_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snappy_compress</name><argument_list>(<argument><expr><name>chunk_src</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>,

<argument><expr><name>chunk_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SNAPPY_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Snappy compress error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Snappy buffer bigger than uncompressed (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" &gt;= %"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes).\n"</literal></expr></argument>,

<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>chunk_dst</name></expr></argument>, <argument><expr><name>chunk_src</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressor</name></name> <operator>=</operator> <name>HAP_COMP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>compressor</name></name> <operator>=</operator> <name>HAP_COMP_SNAPPY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>final_size</name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>final_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_decode_instructions_length</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_header_length</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name>HAP_HDR_LONG</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>HAP_HDR_SHORT</name> <operator>+</operator> <call><name>hap_decode_instructions_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>length</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hap_write_frame_header</name><parameter_list>(<parameter><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>frame_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hap_write_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>HAP_HDR_LONG</name></expr></argument>, <argument><expr><name>frame_length</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>|</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_tex_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>hap_write_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>HAP_HDR_LONG</name></expr></argument>, <argument><expr><name>frame_length</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>HAP_COMP_COMPLEX</name> <operator>|</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_tex_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hap_write_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>HAP_HDR_SHORT</name></expr></argument>, <argument><expr><call><name>hap_decode_instructions_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>HAP_ST_DECODE_INSTRUCTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hap_write_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>HAP_HDR_SHORT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr></argument>,

<argument><expr><name>HAP_ST_COMPRESSOR_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hap_write_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>HAP_HDR_SHORT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name>HAP_ST_SIZE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hap_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_length</name> <init>= <expr><call><name>hap_header_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>final_data_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pktsize</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_snappy</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_count</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>header_length</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pktsize</name></expr></argument>, <argument><expr><name>header_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_compressor</name></name> <operator>==</operator> <name>HAP_COMP_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>compress_texture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>header_length</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>header_length</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>compressor</name> <operator>=</operator> <name>HAP_COMP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>final_data_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>compress_texture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>final_data_size</name> <operator>=</operator> <call><name>hap_compress_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>header_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>final_data_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>final_data_size</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>hap_write_frame_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>final_data_size</name> <operator>+</operator> <name>header_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_shrink_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>final_data_size</name> <operator>+</operator> <name>header_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hap_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>corrected_chunk_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid video size %dx%d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Video size %dx%d is not multiple of 4.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_texturedspenc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_tex_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HAP_FMT_RGBDXT1</name></expr>:</case>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt1_block</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HAP_FMT_RGBADXT5</name></expr>:</case>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt5_block</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HAP_FMT_YCOCGDXT5</name></expr>:</case>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_fun</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxtc</name><operator>.</operator><name>dxt5ys_block</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid format %02X\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_tex_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>TEXTURE_BLOCK_W</name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>TEXTURE_BLOCK_H</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <name>ratio</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_compressor</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HAP_COMP_NONE</name></expr>:</case>

<expr_stmt><expr><name>corrected_chunk_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_snappy</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HAP_COMP_SNAPPY</name></expr>:</case>

<expr_stmt><expr><name>corrected_chunk_count</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_chunk_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HAP_MAX_CHUNKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <operator>(</operator><literal type="number">64</literal> <operator>/</operator> <name>ratio</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>corrected_chunk_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>corrected_chunk_count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_snappy</name></name> <operator>=</operator> <call><name>snappy_max_compressed_length</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <name>corrected_chunk_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_buf</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid compresor %02X\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_compressor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>corrected_chunk_count</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt_chunk_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%d chunks requested but %d used.\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt_chunk_count</name></name></expr></argument>, <argument><expr><name>corrected_chunk_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hap_set_chunk_count</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>corrected_chunk_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hap_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HapContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_hap_free_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HapContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opt_tex_fmt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_FMT_RGBDXT1</name></expr> }</block></expr>, <expr><name>HAP_FMT_RGBDXT1</name></expr>, <expr><name>HAP_FMT_YCOCGDXT5</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hap"</literal></expr>, <expr><literal type="string">"Hap 1 (DXT1 textures)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_FMT_RGBDXT1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hap_alpha"</literal></expr>, <expr><literal type="string">"Hap Alpha (DXT5 textures)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_FMT_RGBADXT5</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hap_q"</literal></expr>, <expr><literal type="string">"Hap Q (DXT5-YCoCg textures)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_FMT_YCOCGDXT5</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chunks"</literal></expr>, <expr><literal type="string">"chunk count"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opt_chunk_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>HAP_MAX_CHUNKS</name></expr>, <expr><name>FLAGS</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"compressor"</literal></expr>, <expr><literal type="string">"second-stage compressor"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opt_compressor</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_COMP_SNAPPY</name></expr> }</block></expr>, <expr><name>HAP_COMP_NONE</name></expr>, <expr><name>HAP_COMP_SNAPPY</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"compressor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"None"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_COMP_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"compressor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"snappy"</literal></expr>, <expr><literal type="string">"Snappy"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HAP_COMP_SNAPPY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"compressor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hapenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Hap encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hap_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hap"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Vidvox Hap"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HAP</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HapContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hapenc_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>hap_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>hap_encode</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>hap_close</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
