<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libxavs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xavs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_STREAM</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XAVS_PART_I8X8</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XAVS_PART_P8X8</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XAVS_PART_B8X8</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>XavsContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xavs_param_t</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xavs_t</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xavs_picture_t</name></type> <name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sei_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_of_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>crf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cqp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_bias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cplxblur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direct_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fast_pskip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_est</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbtree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mixed_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_frame_strategy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scenechange_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_reduction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pts_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_frame_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>XavsContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>XAVS_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>XAVS_LOG_ERROR</name></expr>]</index> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>,

<expr><index>[<expr><name>XAVS_LOG_WARNING</name></expr>]</index> <operator>=</operator> <name>AV_LOG_WARNING</name></expr>,

<expr><index>[<expr><name>XAVS_LOG_INFO</name></expr>]</index> <operator>=</operator> <name>AV_LOG_INFO</name></expr>,

<expr><index>[<expr><name>XAVS_LOG_DEBUG</name></expr>]</index> <operator>=</operator> <name>AV_LOG_DEBUG</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <name>XAVS_LOG_DEBUG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>level_map</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_nals</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>xavs_nal_t</name> <modifier>*</modifier></type><name>nals</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nnal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XavsContext</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nnal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>nals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nnal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>xavs_nal_encode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nals</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>XAVS_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XavsContext</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xavs_nal_t</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nnal</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xavs_picture_t</name></type> <name>pic_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name>XAVS_CSP_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_plane</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>XAVS_TYPE_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>%</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xavs_encoder_encode</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnal</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>frame</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>pic</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_out</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_nals</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>nal</name></expr></argument>, <argument><expr><name>nnal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>x4</name><operator>-&gt;</operator><name>end_of_stream</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xb1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name><index>[<expr><operator>(</operator><name><name>x4</name><operator>-&gt;</operator><name>out_frame_count</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>-</operator>

<name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name><index>[<expr><operator>(</operator><name><name>x4</name><operator>-&gt;</operator><name>out_frame_count</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>end_of_stream</name></name> <operator>=</operator> <name>END_OF_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pts</name></name> <init>= <expr><name><name>pic_out</name><operator>.</operator><name>i_pts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <init>= <expr><name><name>pic_out</name><operator>.</operator><name>i_pts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>out_frame_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <operator>(</operator><name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name><index>[<expr><operator>(</operator><name><name>x4</name><operator>-&gt;</operator><name>out_frame_count</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>pic_out</name><operator>.</operator><name>i_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>XAVS_TYPE_IDR</name></expr>:</case>

<case>case <expr><name>XAVS_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>XAVS_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>XAVS_TYPE_B</name></expr>:</case>

<case>case <expr><name>XAVS_TYPE_BREF</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>pic_out</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>XAVS_TYPE_I</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>quality</name></name> <init>= <expr><operator>(</operator><name><name>pic_out</name><operator>.</operator><name>i_qpplus1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pic_out</name><operator>.</operator><name>i_qpplus1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>out_frame_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>XAVS_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XavsContext</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xavs_encoder_close</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>XAVS_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XavsContext</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xavs_param_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>pf_log</name></name> <operator>=</operator> <name>XAVS_log</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>p_log_private</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_max</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>XAVS_RC_ABR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_stat_write</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_stat_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>XAVS_RC_CRF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>XAVS_RC_CQP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_constant</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>aud</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_aud</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>aud</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>mbtree</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_mb_tree</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>mbtree</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>direct_pred</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_direct_mv_pred</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>direct_pred</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>fast_pskip</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_fast_pskip</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>fast_pskip</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_method</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>motion_est</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>mixed_refs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_mixed_references</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>mixed_refs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>b_bias</name></name> <operator>!=</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe_bias</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>b_bias</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>cplxblur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_complexity_blur</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>cplxblur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_cabac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe_adaptive</name></name> <init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_min</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_min</name></name> <operator>&gt;</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_max</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_min</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_scenecut_threshold</name></name> <init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_min</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_max</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_step</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_qdiff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_qcompress</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qcompress</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_qblur</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qblur</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_frame_reference</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_num</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>=</operator> <name>XAVS_ANALYSE_I8x8</name> <operator>|</operator><name>XAVS_ANALYSE_PSUB16x16</name><operator>|</operator> <name>XAVS_ANALYSE_BSUB16x16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_range</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_subpel_refine</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_subpel_quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_chroma_me</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>&amp;</operator> <name>FF_CMP_CHROMA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_transform_8x8</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_trellis</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_noise_reduction</name></name> <init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_level_idc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rate_tolerance</name></name> <operator>=</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>&lt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_vbv_buffer_init</name></name> <operator>=</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_vbv_buffer_init</name></name> <operator>=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_ip_factor</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_pb_factor</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>chromaoffset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>chroma_offset</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>chromaoffset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_chroma_qp_offset</name></name> <init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>chroma_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_psnr</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_log_level</name></name> <operator>=</operator> <name>XAVS_LOG_DEBUG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_threads</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_interlaced</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_repeat_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <call><name>xavs_encoder_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>x4</name><operator>-&gt;</operator><name>pts_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>xavs_nal_t</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nnal</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>xavs_encoder_headers</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>==</operator> <name>NAL_SEI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>( <argument><expr><literal type="number">5</literal> <operator>+</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xavs_nal_encode</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nal</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>xavs_nal_encode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nal</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XavsContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"crf"</literal></expr>, <expr><literal type="string">"Select the quality for constant quality mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"Constant quantization parameter rate control method"</literal></expr>,<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cqp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b-bias"</literal></expr>, <expr><literal type="string">"Influences how often B-frames are used"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b_bias</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INT_MIN</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cplxblur"</literal></expr>, <expr><literal type="string">"Reduce fluctuations in QP (before curve compression)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cplxblur</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"direct-pred"</literal></expr>, <expr><literal type="string">"Direct MV prediction mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>direct_pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_DIRECT_PRED_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"spatial"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_DIRECT_PRED_SPATIAL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"temporal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_DIRECT_PRED_TEMPORAL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_DIRECT_PRED_AUTO</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Use access unit delimiters."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mbtree"</literal></expr>, <expr><literal type="string">"Use macroblock tree ratecontrol."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mbtree</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mixed-refs"</literal></expr>, <expr><literal type="string">"One reference per partition, as opposed to one reference per macroblock"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mixed_refs</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fast-pskip"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fast_pskip</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"motion-est"</literal></expr>, <expr><literal type="string">"Set motion estimation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>motion_est</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_ME_DIA</name></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>XAVS_ME_TESA</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"dia"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_ME_DIA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hex"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_ME_HEX</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"umh"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_ME_UMH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"esa"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_ME_ESA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tesa"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>XAVS_ME_TESA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b_strategy"</literal></expr>, <expr><literal type="string">"Strategy to choose between I/P/B-frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b_frame_strategy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"chromaoffset"</literal></expr>, <expr><literal type="string">"QP difference between chroma and luma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sc_threshold"</literal></expr>, <expr><literal type="string">"Scene change threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scenechange_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"noise_reduction"</literal></expr>, <expr><literal type="string">"Noise reduction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise_reduction</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>xavs_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libxavs"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>xavs_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libxavs_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libxavs"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libxavs Chinese AVS (Audio Video Standard)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_CAVS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XavsContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>XAVS_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>XAVS_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>XAVS_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xavs_class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>xavs_defaults</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libxavs"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
