<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\lzw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_MAXBITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_SIZTABLE</name></cpp:macro> <cpp:value>(1&lt;&lt;LZW_MAXBITS)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mask</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">0x0007</literal></expr>,

<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">0x007F</literal></expr>,

<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">0x01FF</literal></expr>, <expr><literal type="number">0x03FF</literal></expr>, <expr><literal type="number">0x07FF</literal></expr>,

<expr><literal type="number">0x0FFF</literal></expr>, <expr><literal type="number">0x1FFF</literal></expr>, <expr><literal type="number">0x3FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0xFFFF</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>LZWState</name> <block>{

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cursize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>curmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clear_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newcodes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>top_slot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>extra_slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fc</name></decl>, <decl><type ref="prev"/><name>oc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><name>LZW_SIZTABLE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>suffix</name><index>[<expr><name>LZW_SIZTABLE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>prefix</name><index>[<expr><name>LZW_SIZTABLE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bs</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lzw_get_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LZWState</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>end_code</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FF_LZW_GIF</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bs</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name> <operator>|=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bbits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bs</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>;</expr_stmt>

<return>return <expr><name>c</name> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>curmask</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_lzw_decode_tail</name><parameter_list>(<parameter><decl><type><name>LZWState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>LZWState</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>LZWState</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FF_LZW_GIF</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bs</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_lzw_decode_open</name><parameter_list>(<parameter><decl><type><name>LZWState</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>LZWState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_lzw_decode_close</name><parameter_list>(<parameter><decl><type><name>LZWState</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_lzw_decode_init</name><parameter_list>(<parameter><decl><type><name>LZWState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>csize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>LZWState</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>LZWState</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>csize</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>csize</name> <operator>&gt;=</operator> <name>LZW_MAXBITS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bbits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codesize</name></name> <operator>=</operator> <name>csize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cursize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codesize</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curmask</name></name> <operator>=</operator> <name><name>mask</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>top_slot</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>codesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_code</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>newcodes</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>oc</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_slot</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FF_LZW_TIFF</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_lzw_decode</name><parameter_list>(<parameter><decl><type><name>LZWState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>oc</name></decl>, <decl><type ref="prev"/><name>fc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>LZWState</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>LZWState</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>end_code</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>oc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fc</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>sp</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>sp</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>--</operator><name>l</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzw_get_code</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_code</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>clear_code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cursize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codesize</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curmask</name></name> <operator>=</operator> <name><name>mask</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>newcodes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>top_slot</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fc</name><operator>=</operator> <name>oc</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>slot</name></name> <operator>&amp;&amp;</operator> <name>fc</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sp</name><operator>++</operator> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>code</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>newcodes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sp</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>suffix</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prefix</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>sp</name><operator>++</operator> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slot</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>top_slot</name></name> <operator>&amp;&amp;</operator> <name>oc</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>suffix</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prefix</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>slot</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fc</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slot</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>top_slot</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_slot</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cursize</name></name> <operator>&lt;</operator> <name>LZW_MAXBITS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>top_slot</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curmask</name></name> <operator>=</operator> <name><name>mask</name><index>[<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>cursize</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_code</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<label><name>the_end</name>:</label>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>oc</name></name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fc</name></name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>

<return>return <expr><name>len</name> <operator>-</operator> <name>l</name></expr>;</return>

</block_content>}</block></function>

</unit>
