<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc_pred.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_pred.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_is.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_quantization.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTORE_PRED</name><parameter_list>(<parameter><type><name>sce</name></type></parameter>, <parameter><type><name>sfb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (sce-&gt;ics.prediction_used[sfb]) {sce-&gt;ics.prediction_used[sfb] = 0;sce-&gt;band_type[sfb] = sce-&gt;band_alt[sfb];}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>flt16_round</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">0x00008000U</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>tmp</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>flt16_even</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">0x00007FFFU</literal> <operator>+</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>&amp;</operator> <literal type="number">0x00010000U</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>tmp</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>flt16_trunc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>pun</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>i</name></name> <operator>&amp;=</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>pun</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>predict</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rcoef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>k2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.953125</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">0.90625</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>k1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>k1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>r0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>cor0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cor1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>var0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>var1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>e0</name> <init>= <expr><operator>*</operator><name>coef</name> <operator>-</operator> <name><name>ps</name><operator>-&gt;</operator><name>x_est</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>e1</name> <init>= <expr><name>e0</name> <operator>-</operator> <name>k1</name> <operator>*</operator> <name>r0</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coef</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>cor1</name> <operator>+</operator> <name>r1</name> <operator>*</operator> <name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>var1</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><name>r1</name> <operator>*</operator> <name>r1</name> <operator>+</operator> <name>e1</name> <operator>*</operator> <name>e1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>cor0</name> <operator>+</operator> <name>r0</name> <operator>*</operator> <name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>var0</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><name>r0</name> <operator>*</operator> <name>r0</name> <operator>+</operator> <name>e0</name> <operator>*</operator> <name>e0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <operator>(</operator><name>r0</name> <operator>-</operator> <name>k1</name> <operator>*</operator> <name>e0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>k1</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name> <operator>*</operator> <call><name>flt16_even</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name><name>ps</name><operator>-&gt;</operator><name>var0</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>=</operator> <ternary><condition><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name> <operator>*</operator> <call><name>flt16_even</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name><name>ps</name><operator>-&gt;</operator><name>var1</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rcoef</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>x_est</name></name> <operator>=</operator> <call><name>flt16_round</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>k1</name></name><operator>*</operator><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name> <operator>+</operator> <name>k2</name><operator>*</operator><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_predict_state</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>k1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>x_est</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_all_predictors</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREDICTORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_predict_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_predictor_group</name><parameter_list>(<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>group_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREDICTORS</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">30</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_predict_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_apply_main_pred</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pmax</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <name>pmax</name></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_reset_group</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_predictor_group</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_reset_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>reset_all_predictors</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>update_counters</name><parameter_list>(<parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>PRED_RESET_FRAME_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_adjust_common_pred</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pmax0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pmax1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pmax</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>pmax0</name></expr></argument>, <argument><expr><name>pmax1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name> <operator>||</operator>

<name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name> <operator>||</operator>

<name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name> <init>= <expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>+</operator> <name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ener0</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ener1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ener01</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AACISError</name></name></type> <name>ph_err1</name></decl>, <decl><type ref="prev"/><name>ph_err2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>erf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sfb</name> <argument_list type="generic">&lt; <argument><expr><name>PRED_SFB_START</name> <operator>||</operator> <name>sfb</name></expr></argument> &gt;</argument_list></name> <name>pmax</name> <operator>||</operator> <name>sum</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RESTORE_PRED</name><argument_list>(<argument><expr><name>sce0</name></expr></argument>, <argument><expr><name>sfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RESTORE_PRED</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>sfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>coef0</name> <init>= <expr><name><name>sce0</name><operator>-&gt;</operator><name>pcoeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>coef1</name> <init>= <expr><name><name>sce1</name><operator>-&gt;</operator><name>pcoeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ener0</name> <operator>+=</operator> <name>coef0</name><operator>*</operator><name>coef0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ener1</name> <operator>+=</operator> <name>coef1</name><operator>*</operator><name>coef1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ener01</name> <operator>+=</operator> <operator>(</operator><name>coef0</name> <operator>+</operator> <name>coef1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>coef0</name> <operator>+</operator> <name>coef1</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>ph_err1</name> <operator>=</operator> <call><name>ff_aac_is_encoding_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>ener0</name></expr></argument>, <argument><expr><name>ener1</name></expr></argument>, <argument><expr><name>ener01</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ph_err2</name> <operator>=</operator> <call><name>ff_aac_is_encoding_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>ener0</name></expr></argument>, <argument><expr><name>ener1</name></expr></argument>, <argument><expr><name>ener01</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>erf</name> <operator>=</operator> <ternary><condition><expr><name><name>ph_err1</name><operator>.</operator><name>error</name></name> <operator>&lt;</operator> <name><name>ph_err2</name><operator>.</operator><name>error</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>ph_err1</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ph_err2</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>erf</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>RESTORE_PRED</name><argument_list>(<argument><expr><name>sce0</name></expr></argument>, <argument><expr><name>sfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RESTORE_PRED</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>sfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_pred_resets</name><parameter_list>(<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_group_id_c</name></decl>, <decl><type ref="prev"/><name>max_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>avg_frame</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>=</operator> <call><name>update_counters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>max_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_group_id_c</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_frame</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avg_frame</name> <operator>=</operator> <operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>avg_frame</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_frame</name> <operator>&gt;</operator> <name>PRED_RESET_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>=</operator> <name>max_group_id_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_search_for_pred</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cost_coeffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cost_pred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pmax</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>O34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>P34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>SENT</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>QERR</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">128</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_all_predictors</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_reset_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_pred_resets</name><argument_list>(<argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <name>PRED_SFB_START</name></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <name>pmax</name></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cost1</name></decl>, <decl><type ref="prev"/><name>cost2</name></decl>, <decl><type ref="prev"/><name>cb_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist1</name></decl>, <decl><type ref="prev"/><name>dist2</name></decl>, <decl><type ref="prev"/><name>dist_spec_err</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cb_n</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>sfb</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cb_min</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>sfb</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cb_max</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>sfb</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>RESERVED_BT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start_coef</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_coeffs</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>start_coef</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_coef</name> <operator>+</operator> <name>num_coeffs</name> <operator>&gt;</operator> <name>MAX_PREDICTORS</name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>&gt;=</operator> <name>INTENSITY_BT2</name><operator>)</operator> <operator>||</operator>

<name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>==</operator> <name>NOISE_BT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>O34</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start_coef</name></expr>]</index></name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>=</operator> <call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start_coef</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>O34</name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>,

<argument><expr><name>cb_n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cost1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cost_coeffs</name> <operator>+=</operator> <name>cost1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>SENT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start_coef</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name><index>[<expr><name>start_coef</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>S34</name></expr></argument>, <argument><expr><name>SENT</name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb_n</name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cb_p</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>find_min_book</name><argument_list>(<argument><expr><call><name>find_max_val</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>, <argument><expr><name>S34</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cb_min</name></expr></argument>, <argument><expr><name>cb_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cb_p</name> <operator>=</operator> <name>cb_n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SENT</name></expr></argument>, <argument><expr><name>QERR</name></expr></argument>, <argument><expr><name>S34</name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>, <argument><expr><name>cb_p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cost2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name><index>[<expr><name>start_coef</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+=</operator> <ternary><condition><expr><name><name>QERR</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name><index>[<expr><name>start_coef</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>QERR</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>P34</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name><index>[<expr><name>start_coef</name></expr>]</index></name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb_n</name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cb_p</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>find_min_book</name><argument_list>(<argument><expr><call><name>find_max_val</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>, <argument><expr><name>P34</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cb_min</name></expr></argument>, <argument><expr><name>cb_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cb_p</name> <operator>=</operator> <name>cb_n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dist2</name> <operator>=</operator> <call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>prcoeffs</name><index>[<expr><name>start_coef</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>P34</name></expr></argument>, <argument><expr><name>num_coeffs</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>,

<argument><expr><name>cb_p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>dist_spec_err</name> <operator>+=</operator> <operator>(</operator><name><name>O34</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>P34</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>O34</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>P34</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dist_spec_err</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <name>dist_spec_err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;=</operator> <name>dist1</name> <operator>&amp;&amp;</operator> <name>cb_p</name> <operator>&lt;=</operator> <name>cb_n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cost_pred</name> <operator>+=</operator> <name>cost2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <name>cb_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <name>cb_p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cost_pred</name> <operator>+=</operator> <name>cost1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <name>cb_p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&amp;&amp;</operator> <name>cost_coeffs</name> <operator>&lt;</operator> <name>cost_pred</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <name>PRED_SFB_START</name></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <name>pmax</name></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RESTORE_PRED</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>sfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_aac_encode_main_pred</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pmax</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_AAC_MAIN</name> <operator>||</operator>

<operator>!</operator><name><name>ics</name><operator>-&gt;</operator><name>predictor_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <name>pmax</name></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

</unit>
