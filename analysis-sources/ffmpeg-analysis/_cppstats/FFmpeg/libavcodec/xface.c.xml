<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\xface.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xface.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_big_add</name><parameter_list>(<parameter><decl><type><name>BigInt</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>words</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>&amp;&amp;</operator> <name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <name>XFACE_BITSPERWORD</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>&lt;</operator> <name>XFACE_MAX_WORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_big_div</name><parameter_list>(<parameter><decl><type><name>BigInt</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>--</operator><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>words</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>w</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>words</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>&lt;&lt;=</operator> <name>XFACE_BITSPERWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><operator>--</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>/</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>%</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_big_mul</name><parameter_list>(<parameter><decl><type><name>BigInt</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>&lt;</operator> <name>XFACE_MAX_WORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>words</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>words</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>*</operator><name>w</name> <operator>*</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>w</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <name>XFACE_BITSPERWORD</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name> <operator>&lt;</operator> <name>XFACE_MAX_WORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>nb_words</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>XFACE_WORDMASK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ProbRange</name></type> <name><name>ff_xface_probranges_per_level</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">251</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">251</literal></expr>}</block></expr> }</block></expr>, 

<expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">200</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">55</literal></expr>, <expr><literal type="number">200</literal></expr>}</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">223</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">159</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">159</literal></expr>}</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{<expr><literal type="number">131</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">125</literal></expr>, <expr><literal type="number">131</literal></expr>}</block></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ProbRange</name></type> <name><name>ff_xface_probranges_2x2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">152</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">38</literal></expr>, <expr><literal type="number">76</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">165</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">178</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">230</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">38</literal></expr>, <expr><literal type="number">114</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">191</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">204</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">236</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">217</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">242</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">248</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">253</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_00</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x17</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1d</literal></expr>,

<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x47</literal></expr>,

<expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,

<expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,

<expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x08</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xdf</literal></expr>,

<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x3e</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

<expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x77</literal></expr>,

<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,

<expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,

<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x57</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

<expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,

<expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xec</literal></expr>,

<expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_01</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_02</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x50</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_10</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x04</literal></expr>,

<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x57</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,

<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,

<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_20</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_30</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x75</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_40</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x4f</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xdd</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,

<expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x50</literal></expr>,

<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xbf</literal></expr>,

<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_11</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_21</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x17</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_31</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_41</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_12</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x40</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_22</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_32</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x10</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>g_42</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x10</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_xface_generate_face</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>XFACE_HEIGHT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>XFACE_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>XFACE_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>&gt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>XFACE_WIDTH</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>k</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l</name> <operator>+</operator> <name>m</name> <operator>*</operator> <name>XFACE_WIDTH</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN</name><parameter_list>(<parameter><type><name>table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[h] ^= (table[k&gt;&gt;3]&gt;&gt;(7-(k&amp;7)))&amp;1</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_22</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>XFACE_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr>:</case>

<switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_42</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_41</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_40</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>XFACE_WIDTH</name></expr>:</case>

<switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_02</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>GEN</name><argument_list>(<argument><expr><name>g_00</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
