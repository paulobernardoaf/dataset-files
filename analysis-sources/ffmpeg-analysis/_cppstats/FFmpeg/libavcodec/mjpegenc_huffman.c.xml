<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mjpegenc_huffman.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc_huffman.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_by_prob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PTable</name></type> <name>a_val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>PTable</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTable</name></type> <name>b_val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>PTable</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>a_val</name><operator>.</operator><name>prob</name></name> <operator>-</operator> <name><name>b_val</name><operator>.</operator><name>prob</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_by_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HuffTable</name></type> <name>a_val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>HuffTable</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HuffTable</name></type> <name>b_val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>HuffTable</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>a_val</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>b_val</name><operator>.</operator><name>length</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpegenc_huffman_compute_bits</name><parameter_list>(<parameter><decl><type><name>PTable</name> <modifier>*</modifier></type><name>prob_table</name></decl></parameter>, <parameter><decl><type><name>HuffTable</name> <modifier>*</modifier></type><name>distincts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PackageMergerList</name></type> <name>list_a</name></decl>, <decl><type ref="prev"/><name>list_b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name> <init>= <expr><operator>&amp;</operator><name>list_a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from</name> <init>= <expr><operator>&amp;</operator><name>list_b</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>times</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>nbits</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>max_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>prob_table</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PTable</name></expr></argument>, <argument><expr><name>compare_by_prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>times</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>times</name> <operator>&lt;=</operator> <name>max_length</name></expr>;</condition> <incr><expr><name>times</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>times</name> <operator>&lt;</operator> <name>max_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>nitems</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>from</name><operator>-&gt;</operator><name>nitems</name></name> <operator>||</operator>

<name><name>prob_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prob</name> <operator>&lt;</operator>

<name><name>from</name><operator>-&gt;</operator><name>probability</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>from</name><operator>-&gt;</operator><name>probability</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>prob_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>probability</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prob_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prob</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>probability</name><index>[<expr><name><name>to</name><operator>-&gt;</operator><name>nitems</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>from</name><operator>-&gt;</operator><name>probability</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>from</name><operator>-&gt;</operator><name>probability</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>nitems</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>from</name><operator>-&gt;</operator><name>nitems</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>item_idx</name><index>[<expr><name>min</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>nbits</name><index>[<expr><name><name>from</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>distincts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>distincts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>nbits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_huffman_init</name><parameter_list>(<parameter><decl><type><name>MJpegEncHuffmanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>val_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>val_count</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_huffman_close</name><parameter_list>(<parameter><decl><type><name>MJpegEncHuffmanContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name><name>val</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_nval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTable</name></type> <name><name>val_counts</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HuffTable</name></type> <name><name>distincts</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>val_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name> <argument_list>(<argument><expr><name>nval</name> <operator>&lt;=</operator> <name>max_nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>val_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val_counts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val_counts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>prob</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>val_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>val_counts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val_counts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>prob</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpegenc_huffman_compute_bits</name><argument_list>(<argument><expr><name>val_counts</name></expr></argument>, <argument><expr><name>distincts</name></expr></argument>, <argument><expr><name>nval</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>distincts</name></expr></argument>, <argument><expr><name>nval</name></expr></argument>, <argument><expr><name>HuffTable</name></expr></argument>, <argument><expr><name>compare_by_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nval</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>distincts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name><name>distincts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
