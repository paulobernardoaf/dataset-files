<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mlpdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlpdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mlp_filter_channel</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>firorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iirorder</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>filter_shift</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>firbuf</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>iirbuf</name> <init>= <expr><name>state</name> <operator>+</operator> <name>MAX_BLOCKSIZE</name> <operator>+</operator> <name>MAX_FIR_ORDER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>fircoeff</name> <init>= <expr><name>coeff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>iircoeff</name> <init>= <expr><name>coeff</name> <operator>+</operator> <name>MAX_FIR_ORDER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocksize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>residual</name> <init>= <expr><operator>*</operator><name>sample_buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>result</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>order</name> <operator>&lt;</operator> <name>firorder</name></expr>;</condition> <incr><expr><name>order</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>firbuf</name><index>[<expr><name>order</name></expr>]</index></name> <operator>*</operator> <name><name>fircoeff</name><index>[<expr><name>order</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>order</name> <operator>&lt;</operator> <name>iirorder</name></expr>;</condition> <incr><expr><name>order</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>iirbuf</name><index>[<expr><name>order</name></expr>]</index></name> <operator>*</operator> <name><name>iircoeff</name><index>[<expr><name>order</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>accum</name> <operator>=</operator> <name>accum</name> <operator>&gt;&gt;</operator> <name>filter_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>accum</name> <operator>+</operator> <name>residual</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>firbuf</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>iirbuf</name> <operator>=</operator> <name>result</name> <operator>-</operator> <name>accum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sample_buffer</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_buffer</name> <operator>+=</operator> <name>MAX_CHANNELS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mlp_rematrix_channel</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bypassed_lsbs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>noise_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dest_ch</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>blockpos</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>maxchan</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>matrix_noise_shift</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>access_unit_size_pow2</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>src_ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockpos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>src_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>src_ch</name> <operator>&lt;=</operator> <name>maxchan</name></expr>;</condition> <incr><expr><name>src_ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>samples</name><index>[<expr><name>src_ch</name></expr>]</index></name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>src_ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>matrix_noise_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>&amp;=</operator> <name>access_unit_size_pow2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <name><name>noise_buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>matrix_noise_shift</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>index2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>dest_ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>accum</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>*</operator><name>bypassed_lsbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bypassed_lsbs</name> <operator>+=</operator> <name>MAX_CHANNELS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>MAX_CHANNELS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>int32_t</name> <argument_list>(<argument>*mlp_select_pack_output(uint8_t *ch_assign,

int8_t *output_shift,

uint8_t max_matrix_channel,

int is32)</argument>)</argument_list></macro><operator>(</operator><name>int32_t</name><operator>,</operator> <name>uint16_t</name><operator>,</operator> <call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[]</index><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>uint8_t</name><operator>*</operator><operator>,</operator> <name>int8_t</name> <operator>*</operator><operator>,</operator> <name>uint8_t</name><operator>,</operator> <name>int</name><operator>)</operator>

<block>{

<return>return <expr><name>ff_mlp_pack_output</name></expr>;</return>

}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ff_mlp_pack_output</name><argument_list>(<argument><expr><name>int32_t</name> <name>lossless_check_data</name></expr></argument>,

<argument><expr><name>uint16_t</name> <name>blockpos</name></expr></argument>,

<argument><expr><call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator><name>sample_buffer</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></expr></argument>,

<argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>ch_assign</name></expr></argument>,

<argument><expr><name>int8_t</name> <operator>*</operator><name>output_shift</name></expr></argument>,

<argument><expr><name>uint8_t</name> <name>max_matrix_channel</name></expr></argument>,

<argument><expr><name>int</name> <name>is32</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>out_ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>data_32</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data_16</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockpos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>out_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>out_ch</name> <operator>&lt;=</operator> <name>max_matrix_channel</name></expr>;</condition> <incr><expr><name>out_ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mat_ch</name> <init>= <expr><name><name>ch_assign</name><index>[<expr><name>out_ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sample</name> <init>= <expr><name><name>sample_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>mat_ch</name></expr>]</index></name> <operator>*</operator>

<operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>output_shift</name><index>[<expr><name>mat_ch</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lossless_check_data</name> <operator>^=</operator> <operator>(</operator><name>sample</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>mat_ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>data_32</name><operator>++</operator> <operator>=</operator> <name>sample</name> <operator>*</operator> <literal type="number">256U</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>data_16</name><operator>++</operator> <operator>=</operator> <name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>lossless_check_data</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mlpdsp_init</name><parameter_list>(<parameter><decl><type><name>MLPDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_filter_channel</name></name> <operator>=</operator> <name>mlp_filter_channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_rematrix_channel</name></name> <operator>=</operator> <name>ff_mlp_rematrix_channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_select_pack_output</name></name> <operator>=</operator> <name>mlp_select_pack_output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_pack_output</name></name> <operator>=</operator> <name>ff_mlp_pack_output</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mlpdsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mlpdsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
