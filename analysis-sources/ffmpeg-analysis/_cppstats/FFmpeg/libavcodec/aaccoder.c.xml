<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aaccoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenctab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_quantization.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_is.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_tns.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_ltp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_pred.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aaccoder_twoloop.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_SPREAD_THRESHOLD</name></cpp:macro> <cpp:value>0.9f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_LAMBDA_REPLACE</name></cpp:macro> <cpp:value>1.948f</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aaccoder_trellis.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>BandCodingPath</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>prev_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>cost</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

}</block></struct></type> <name>BandCodingPath</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_window_bands_info</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BandCodingPath</name></type> <name><name>path</name><index>[<expr><literal type="number">120</literal></expr>]</index><index>[<expr><name>CB_TOT_ALL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>swb</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_sfb</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>run_bits</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>run_esc</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>run_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ppos</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>stackrun</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>stackcb</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>stack_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>next_minrd</name> <init>= <expr><name>INFINITY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_mincb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>win</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>swb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>swb</name> <operator>&lt;</operator> <name>max_sfb</name></expr>;</condition> <incr><expr><name>swb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>swb</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>swb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>minrd</name> <init>= <expr><name>next_minrd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mincb</name> <init>= <expr><name>next_mincb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next_minrd</name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_mincb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cost_stay_here</name></decl>, <decl><type ref="prev"/><name>cost_get_here</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rd</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name> <operator>&lt;</operator> <name><name>aac_cb_out_map</name><index>[<expr><name>cb</name></expr>]</index></name> <operator>||</operator>

<name><name>cb</name> <argument_list type="generic">&lt; <argument><expr><name><name>aac_cb_in_map</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <name><name>aac_cb_out_map</name><index>[<expr><name>cb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>group_len</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>win</name><operator>+</operator><name>w</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><name>start</name> <operator>+</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><operator>(</operator><name>win</name><operator>+</operator><name>w</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>aac_cb_out_map</name><index>[<expr><name>cb</name></expr>]</index></name></expr></argument>,

<argument><expr><name>lambda</name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cost_stay_here</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>+</operator> <name>rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cost_get_here</name> <operator>=</operator> <name>minrd</name> <operator>+</operator> <name>rd</name> <operator>+</operator> <name>run_bits</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>run_value_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name></expr>]</index></name>

<operator>!=</operator> <name><name>run_value_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost_stay_here</name> <operator>+=</operator> <name>run_bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cost_get_here</name> <operator>&lt;</operator> <name>cost_stay_here</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <name>mincb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost_get_here</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost_stay_here</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>&lt;</operator> <name>next_minrd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_minrd</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_mincb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>swb</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>stack_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>max_sfb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>&lt;</operator> <name><name>path</name><index>[<expr><name>max_sfb</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>ppos</name> <operator>=</operator> <name>max_sfb</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ppos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stackrun</name><index>[<expr><name>stack_len</name></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><name>ppos</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stackcb</name> <index>[<expr><name>stack_len</name></expr>]</index></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>ppos</name><operator>-</operator><name><name>path</name><index>[<expr><name>ppos</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ppos</name> <operator>-=</operator> <name><name>path</name><index>[<expr><name>ppos</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stack_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>stack_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>aac_cb_out_map</name><index>[<expr><name><name>stackcb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>stackrun</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name></name> <operator>+</operator> <name>win</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><operator>!</operator><name>cb</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>start</name></expr>]</index></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>run_esc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>run_bits</name></expr></argument>, <argument><expr><name>run_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>run_esc</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>run_bits</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>TrellisPath</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>;</decl_stmt>

}</block></struct></type> <name>TrellisPath</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRELLIS_STAGES</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRELLIS_STATES</name></cpp:macro> <cpp:value>(SCALE_MAX_DIFF+1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_special_band_scalefactors</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevscaler_n</name> <init>= <expr><operator>-</operator><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>prevscaler_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bands</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT</name> <operator>||</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>roundf</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>is_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">155</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bands</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>==</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>+</operator><call><name>ceilf</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>pns_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">155</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prevscaler_n</name> <operator>==</operator> <operator>-</operator><literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevscaler_n</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bands</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bands</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT</name> <operator>||</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>prevscaler_i</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>prevscaler_i</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name></expr></argument>, <argument><expr><name>prevscaler_i</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>==</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>prevscaler_n</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>prevscaler_n</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name></expr></argument>, <argument><expr><name>prevscaler_n</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_quantizers_anmr</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TrellisPath</name></type> <name><name>paths</name><index>[<expr><name>TRELLIS_STAGES</name></expr>]</index><index>[<expr><name>TRELLIS_STATES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bandaddr</name><index>[<expr><name>TRELLIS_STAGES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mincost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>q0f</name> <init>= <expr><name>FLT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>q1f</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>qnrgf</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>qcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q0f</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>q0f</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1f</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>q1f</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qnrgf</name> <operator>+=</operator> <name>t</name><operator>*</operator><name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qcnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qcnt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>coef2minsf</name><argument_list>(<argument><expr><name>q0f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>coef2maxsf</name><argument_list>(<argument><expr><name>q1f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q1</name> <operator>-</operator> <name>q0</name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q0low</name> <init>= <expr><name>q0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q1high</name> <init>= <expr><name>q1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qnrg</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>qnrgf</name><operator>/</operator><name>qcnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">31</literal> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>qnrg</name> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <name>qnrg</name> <operator>-</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q0</name> <operator>&lt;</operator> <name>q0low</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q1</name> <operator>+=</operator> <name>q0low</name> <operator>-</operator> <name>q0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <name>q0low</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>q1</name> <operator>&gt;</operator> <name>q1high</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q0</name> <operator>-=</operator> <name>q1</name> <operator>-</operator> <name>q1high</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>q1high</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q0</name> <operator>==</operator> <name>q1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>q0</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>q1</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRELLIS_STATES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>paths</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paths</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TRELLIS_STAGES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRELLIS_STATES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qmin</name></decl>, <decl><type ref="prev"/><name>qmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bandaddr</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qmin</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&lt;=</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>coefs</name><index>[<expr><name>w2</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qmin</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>qmin</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>qmax</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nz</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>minscale</name></decl>, <decl><type ref="prev"/><name>maxscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minrd</name> <init>= <expr><name>INFINITY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>maxval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>minscale</name> <operator>=</operator> <call><name>coef2minsf</name><argument_list>(<argument><expr><name>qmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxscale</name> <operator>=</operator> <call><name>coef2maxsf</name><argument_list>(<argument><expr><name>qmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minscale</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minscale</name> <operator>-</operator> <name>q0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRELLIS_STATES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxscale</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>maxscale</name> <operator>-</operator> <name>q0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRELLIS_STATES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minscale</name> <operator>==</operator> <name>maxscale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxscale</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minscale</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRELLIS_STATES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minscale</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>maxscale</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRELLIS_STATES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <call><name>find_max_val</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name><operator>+</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>minscale</name></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>maxscale</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name> <init>= <expr><call><name>find_min_book</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>coefs</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <name>start</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>q</name> <operator>+</operator> <name>q0</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>minrd</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minrd</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q1</name> <operator>-</operator> <name>q0</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cost</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <name><name>paths</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>+</operator> <name>dist</name>

<operator>+</operator> <name><name>ff_aac_scalefactor_bits</name><index>[<expr><name>q</name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>SCALE_DIFF_ZERO</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>q1</name> <operator>-</operator> <name>q0</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name><name>paths</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>prev</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mincost</name> <operator>=</operator> <name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRELLIS_STATES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>&lt;</operator> <name>mincost</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mincost</name> <operator>=</operator> <name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minq</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name><name>bandaddr</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>minq</name> <operator>+</operator> <name>q0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minq</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>minq</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_quantizers_fast</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>destbits</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">1024.0</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><name>lambda</name> <operator>/</operator> <literal type="number">120.f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>dists</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>uplims</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>maxvals</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fflag</name></decl>, <decl><type ref="prev"/><name>minscaler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>its</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minthr</name> <init>= <expr><name>INFINITY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>destbits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>destbits</name></expr></argument>, <argument><expr><literal type="number">5800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>uplim</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>uplim</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>energy</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&lt;=</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>uplim</name> <operator>*</operator><literal type="number">512</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name>nz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nz</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>minthr</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minthr</name></expr></argument>, <argument><expr><name>uplim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>allz</name> <operator>|=</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>SCALE_ONE_POS</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>/</operator><name>minthr</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allz</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_quantize_band_cost_cache_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>find_max_val</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tbits</name></decl>, <decl><type ref="prev"/><name>qstep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qstep</name> <operator>=</operator> <ternary><condition><expr><name>its</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">218</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>quantize_band_cost_cached</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>coefs</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name>scaled</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist</name> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>ff_aac_scalefactor_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>-</operator> <name>prev</name> <operator>+</operator> <name>SCALE_DIFF_ZERO</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tbits</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tbits</name> <operator>&gt;</operator> <name>destbits</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">218</literal> <operator>-</operator> <name>qstep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>qstep</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">60</literal> <operator>-</operator> <name>qstep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>qstep</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>qstep</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qstep</name> <operator>&amp;&amp;</operator> <name>tbits</name> <operator>&gt;</operator> <name>destbits</name><operator>*</operator><literal type="number">1.02</literal> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">217</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qstep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>qstep</name></expr>)</condition>;</do>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minscaler</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">255</literal> <operator>-</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prevsc</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name>minscaler</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">219</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>prevsc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>its</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>fflag</name> <operator>&amp;&amp;</operator> <name>its</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_pns</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><literal type="number">1024</literal> <operator>/</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name></decl>, <decl><type ref="prev"/><name>cutoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>PNS</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>PNS34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>NOR34</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nextband</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq_mult</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>/</operator><name>wlen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>thr_mult</name> <init>= <expr><name>NOISE_LAMBDA_REPLACE</name><operator>*</operator><operator>(</operator><literal type="number">100.0f</literal><operator>/</operator><name>lambda</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>spread_threshold</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><name>NOISE_SPREAD_THRESHOLD</name><operator>*</operator><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>lambda</name><operator>/</operator><literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>dist_bias</name> <init>= <expr><call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">4.f</literal> <operator>*</operator> <literal type="number">120</literal> <operator>/</operator> <name>lambda</name></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">4.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>pns_transient_energy_r</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0.7f</literal></expr></argument>, <argument><expr><name>lambda</name> <operator>/</operator> <literal type="number">140.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refbits</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">1024.0</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name>

<operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2.0f</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>lambda</name> <operator>/</operator> <literal type="number">120.f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate_bandwidth_multiplier</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><operator>-</operator><literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_sf</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bit_rate</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>refbits</name> <operator>*</operator> <name>rate_bandwidth_multiplier</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>frame_bit_rate</name> <operator>*=</operator> <literal type="number">1.15f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>AAC_CUTOFF_FROM_BITRATE</name><argument_list>(<argument><expr><name>frame_bit_rate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name>bandwidth</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>wlen</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>nextband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wstart</name> <init>= <expr><name>w</name><operator>*</operator><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>noise_sfi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dist2</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>noise_amp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pns_energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>pns_tgt_energy</name></decl>, <decl><type ref="prev"/><name>energy_ratio</name></decl>, <decl><type ref="prev"/><name>dist_thresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sfb_energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>threshold</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>spread</name> <init>= <expr><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>min_energy</name> <init>= <expr><operator>-</operator><literal type="number">1.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name>wstart</name><operator>+</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq</name> <init>= <expr><operator>(</operator><name>start</name><operator>-</operator><name>wstart</name><operator>)</operator><operator>*</operator><name>freq_mult</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq_boost</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.88f</literal><operator>*</operator><name>freq</name><operator>/</operator><name>NOISE_LOW_LIMIT</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;</operator> <name>NOISE_LOW_LIMIT</name> <operator>||</operator> <operator>(</operator><name>start</name><operator>-</operator><name>wstart</name><operator>)</operator> <operator>&gt;=</operator> <name>cutoff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_sf</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>band</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sfb_energy</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>spread</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>spread</name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>spread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_energy</name> <operator>=</operator> <name>max_energy</name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>min_energy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_energy</name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_energy</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_energy</name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dist_thresh</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">2.5f</literal><operator>*</operator><name>NOISE_LOW_LIMIT</name><operator>/</operator><name>freq</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">2.5f</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>dist_bias</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ff_sfdelta_can_remove_band</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>nextband</name></expr></argument>, <argument><expr><name>prev_sf</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>sfb_energy</name> <operator>&lt;</operator> <name>threshold</name><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal><operator>/</operator><name>freq_boost</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>spread</name> <operator>&lt;</operator> <name>spread_threshold</name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_alt</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sfb_energy</name> <operator>&gt;</operator> <name>threshold</name><operator>*</operator><name>thr_mult</name><operator>*</operator><name>freq_boost</name><operator>)</operator> <operator>||</operator>

<name>min_energy</name> <operator>&lt;</operator> <name>pns_transient_energy_r</name> <operator>*</operator> <name>max_energy</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>pns_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>sfb_energy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_sf</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pns_tgt_energy</name> <operator>=</operator> <name>sfb_energy</name><operator>*</operator><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>spread</name><operator>*</operator><name>spread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>noise_sfi</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>roundf</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><name>pns_tgt_energy</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">155</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>noise_amp</name> <operator>=</operator> <operator>-</operator><name><name>ff_aac_pow2sf_tab</name><index>[<expr><name>noise_sfi</name> <operator>+</operator> <name>POW_SF2_ZERO</name></expr>]</index></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>noise_sfdiff</name> <init>= <expr><name>noise_sfi</name> <operator>-</operator> <name>prev</name> <operator>+</operator> <name>SCALE_DIFF_ZERO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>noise_sfdiff</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>noise_sfdiff</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal><operator>*</operator><name>SCALE_MAX_DIFF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_sf</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>band_energy</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>pns_senergy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start_c</name> <init>= <expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>band</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>random_state</name></name> <operator>=</operator> <call><name>lcg_random</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>PNS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>random_state</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band_energy</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>scalarproduct_float</name></name><argument_list>(<argument><expr><name>PNS</name></expr></argument>, <argument><expr><name>PNS</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>noise_amp</name><operator>/</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>band_energy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><name>PNS</name></expr></argument>, <argument><expr><name>PNS</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pns_senergy</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>scalarproduct_float</name></name><argument_list>(<argument><expr><name>PNS</name></expr></argument>, <argument><expr><name>PNS</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pns_energy</name> <operator>+=</operator> <name>pns_senergy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>NOR34</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start_c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>PNS34</name></expr></argument>, <argument><expr><name>PNS</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start_c</name></expr>]</index></name></expr></argument>,

<argument><expr><name>NOR34</name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>lambda</name><operator>/</operator><name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name><operator>/</operator><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>spread</name></name><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>spread</name></name><operator>)</operator><operator>*</operator><name>lambda</name><operator>*</operator><name>dist_thresh</name><operator>/</operator><name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>energy_ratio</name> <operator>=</operator> <name>pns_tgt_energy</name><operator>/</operator><name>pns_energy</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>pns_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>energy_ratio</name><operator>*</operator><name>pns_tgt_energy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>energy_ratio</name> <operator>&gt;</operator> <literal type="number">0.85f</literal> <operator>&amp;&amp;</operator> <name>energy_ratio</name> <operator>&lt;</operator> <literal type="number">1.25f</literal> <operator>&amp;&amp;</operator> <name>dist2</name> <operator>&lt;</operator> <name>dist1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>NOISE_BT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>noise_sfi</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_sf</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_pns</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><literal type="number">1024</literal> <operator>/</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name></decl>, <decl><type ref="prev"/><name>cutoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq_mult</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>/</operator><name>wlen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>spread_threshold</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><name>NOISE_SPREAD_THRESHOLD</name><operator>*</operator><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>lambda</name><operator>/</operator><literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>pns_transient_energy_r</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0.7f</literal></expr></argument>, <argument><expr><name>lambda</name> <operator>/</operator> <literal type="number">140.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refbits</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">1024.0</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name>

<operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2.0f</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>lambda</name> <operator>/</operator> <literal type="number">120.f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate_bandwidth_multiplier</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bit_rate</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>refbits</name> <operator>*</operator> <name>rate_bandwidth_multiplier</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>frame_bit_rate</name> <operator>*=</operator> <literal type="number">1.15f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>AAC_CUTOFF_FROM_BITRATE</name><argument_list>(<argument><expr><name>frame_bit_rate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name>bandwidth</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>wlen</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_alt</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sfb_energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>threshold</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>spread</name> <init>= <expr><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>min_energy</name> <init>= <expr><operator>-</operator><literal type="number">1.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq</name> <init>= <expr><name>start</name><operator>*</operator><name>freq_mult</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq_boost</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.88f</literal><operator>*</operator><name>freq</name><operator>/</operator><name>NOISE_LOW_LIMIT</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;</operator> <name>NOISE_LOW_LIMIT</name> <operator>||</operator> <name>start</name> <operator>&gt;=</operator> <name>cutoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>band</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sfb_energy</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>spread</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>spread</name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>spread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_energy</name> <operator>=</operator> <name>max_energy</name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>min_energy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_energy</name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_energy</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_energy</name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>pns_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>sfb_energy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sfb_energy</name> <operator>&lt;</operator> <name>threshold</name><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.5f</literal><operator>/</operator><name>freq_boost</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>spread</name> <operator>&lt;</operator> <name>spread_threshold</name> <operator>||</operator> <name>min_energy</name> <operator>&lt;</operator> <name>pns_transient_energy_r</name> <operator>*</operator> <name>max_energy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_ms</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>sid_sf_boost</name></decl>, <decl><type ref="prev"/><name>prev_mid</name></decl>, <decl><type ref="prev"/><name>prev_side</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nextband0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nextband1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>M</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>L34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>R34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>M34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>mslambda</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>lambda</name> <operator>/</operator> <literal type="number">120.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce0</name></expr></argument>, <argument><expr><name>nextband0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>nextband1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_mid</name> <operator>=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_side</name> <operator>=</operator> <name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>bmax</name> <init>= <expr><call><name>bval2bmax</name><argument_list>(<argument><expr><name>g</name> <operator>*</operator> <literal type="number">17.0f</literal> <operator>/</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">0.0045f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce0</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sce1</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>Mmax</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>Smax</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>M</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name>

<operator>+</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>-</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>M34</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>S34</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name>Mmax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>Mmax</name></expr></argument>, <argument><expr><name><name>M34</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Smax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>Smax</name></expr></argument>, <argument><expr><name><name>S34</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>sid_sf_boost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sid_sf_boost</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sid_sf_boost</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>dist1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dist2</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>B0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>B1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minidx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mididx</name></decl>, <decl><type ref="prev"/><name>sididx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midcb</name></decl>, <decl><type ref="prev"/><name>sidcb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>minidx</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mididx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minidx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sididx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minidx</name> <operator>-</operator> <name>sid_sf_boost</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name>

<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><call><name>ff_sfdelta_can_replace</name><argument_list>(<argument><expr><name>sce0</name></expr></argument>, <argument><expr><name>nextband0</name></expr></argument>, <argument><expr><name>prev_mid</name></expr></argument>, <argument><expr><name>mididx</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>ff_sfdelta_can_replace</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>nextband1</name></expr></argument>, <argument><expr><name>prev_side</name></expr></argument>, <argument><expr><name>sididx</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>midcb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name>Mmax</name></expr></argument>, <argument><expr><name>mididx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sidcb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name>Smax</name></expr></argument>, <argument><expr><name>sididx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>midcb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>midcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sidcb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>sidcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band0</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band1</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minthr</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>band0</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name><name>band1</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>,<decl><type ref="prev"/><name>b4</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>M</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name>

<operator>+</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>-</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>L34</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>R34</name></expr></argument>, <argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>M34</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name>S34</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>L34</name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>lambda</name> <operator>/</operator> <name><name>band0</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>R34</name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>lambda</name> <operator>/</operator> <name><name>band1</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,

<argument><expr><name>M34</name></expr></argument>,

<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>mididx</name></expr></argument>,

<argument><expr><name>midcb</name></expr></argument>,

<argument><expr><name>lambda</name> <operator>/</operator> <name>minthr</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S</name></expr></argument>,

<argument><expr><name>S34</name></expr></argument>,

<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>sididx</name></expr></argument>,

<argument><expr><name>sidcb</name></expr></argument>,

<argument><expr><name>mslambda</name> <operator>/</operator> <operator>(</operator><name>minthr</name> <operator>*</operator> <name>bmax</name><operator>)</operator></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B0</name> <operator>+=</operator> <name>b1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>B1</name> <operator>+=</operator> <name>b3</name><operator>+</operator><name>b4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist1</name> <operator>-=</operator> <name>b1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>-=</operator> <name>b3</name><operator>+</operator><name>b4</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist2</name> <operator>&lt;=</operator> <name>dist1</name> <operator>&amp;&amp;</operator> <name>B1</name> <operator>&lt;</operator> <name>B0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>mididx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>sididx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>midcb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>sidcb</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>B1</name> <operator>&gt;</operator> <name>B0</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce0</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_mid</name> <operator>=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce1</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_side</name> <operator>=</operator> <name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AACCoefficientsEncoder</name></type> <name><name>ff_aac_coders</name><index>[<expr><name>AAC_CODER_NB</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>AAC_CODER_ANMR</name></expr>]</index> <operator>=</operator> <block>{

<expr><name>search_for_quantizers_anmr</name></expr>,

<expr><name>encode_window_bands_info</name></expr>,

<expr><name>quantize_and_encode_band</name></expr>,

<expr><name>ff_aac_encode_tns_info</name></expr>,

<expr><name>ff_aac_encode_ltp_info</name></expr>,

<expr><name>ff_aac_encode_main_pred</name></expr>,

<expr><name>ff_aac_adjust_common_pred</name></expr>,

<expr><name>ff_aac_adjust_common_ltp</name></expr>,

<expr><name>ff_aac_apply_main_pred</name></expr>,

<expr><name>ff_aac_apply_tns</name></expr>,

<expr><name>ff_aac_update_ltp</name></expr>,

<expr><name>ff_aac_ltp_insert_new_frame</name></expr>,

<expr><name>set_special_band_scalefactors</name></expr>,

<expr><name>search_for_pns</name></expr>,

<expr><name>mark_pns</name></expr>,

<expr><name>ff_aac_search_for_tns</name></expr>,

<expr><name>ff_aac_search_for_ltp</name></expr>,

<expr><name>search_for_ms</name></expr>,

<expr><name>ff_aac_search_for_is</name></expr>,

<expr><name>ff_aac_search_for_pred</name></expr>,

}</block></expr>,

<expr><index>[<expr><name>AAC_CODER_TWOLOOP</name></expr>]</index> <operator>=</operator> <block>{

<expr><name>search_for_quantizers_twoloop</name></expr>,

<expr><name>codebook_trellis_rate</name></expr>,

<expr><name>quantize_and_encode_band</name></expr>,

<expr><name>ff_aac_encode_tns_info</name></expr>,

<expr><name>ff_aac_encode_ltp_info</name></expr>,

<expr><name>ff_aac_encode_main_pred</name></expr>,

<expr><name>ff_aac_adjust_common_pred</name></expr>,

<expr><name>ff_aac_adjust_common_ltp</name></expr>,

<expr><name>ff_aac_apply_main_pred</name></expr>,

<expr><name>ff_aac_apply_tns</name></expr>,

<expr><name>ff_aac_update_ltp</name></expr>,

<expr><name>ff_aac_ltp_insert_new_frame</name></expr>,

<expr><name>set_special_band_scalefactors</name></expr>,

<expr><name>search_for_pns</name></expr>,

<expr><name>mark_pns</name></expr>,

<expr><name>ff_aac_search_for_tns</name></expr>,

<expr><name>ff_aac_search_for_ltp</name></expr>,

<expr><name>search_for_ms</name></expr>,

<expr><name>ff_aac_search_for_is</name></expr>,

<expr><name>ff_aac_search_for_pred</name></expr>,

}</block></expr>,

<expr><index>[<expr><name>AAC_CODER_FAST</name></expr>]</index> <operator>=</operator> <block>{

<expr><name>search_for_quantizers_fast</name></expr>,

<expr><name>codebook_trellis_rate</name></expr>,

<expr><name>quantize_and_encode_band</name></expr>,

<expr><name>ff_aac_encode_tns_info</name></expr>,

<expr><name>ff_aac_encode_ltp_info</name></expr>,

<expr><name>ff_aac_encode_main_pred</name></expr>,

<expr><name>ff_aac_adjust_common_pred</name></expr>,

<expr><name>ff_aac_adjust_common_ltp</name></expr>,

<expr><name>ff_aac_apply_main_pred</name></expr>,

<expr><name>ff_aac_apply_tns</name></expr>,

<expr><name>ff_aac_update_ltp</name></expr>,

<expr><name>ff_aac_ltp_insert_new_frame</name></expr>,

<expr><name>set_special_band_scalefactors</name></expr>,

<expr><name>search_for_pns</name></expr>,

<expr><name>mark_pns</name></expr>,

<expr><name>ff_aac_search_for_tns</name></expr>,

<expr><name>ff_aac_search_for_ltp</name></expr>,

<expr><name>search_for_ms</name></expr>,

<expr><name>ff_aac_search_for_is</name></expr>,

<expr><name>ff_aac_search_for_pred</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
