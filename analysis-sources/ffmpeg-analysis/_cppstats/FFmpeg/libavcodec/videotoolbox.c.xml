<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\videotoolbox.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videotoolbox.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_videotoolbox.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vt_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>kVTVideoDecoderSpecification_RequireHardwareAcceleratedVideoDecoder</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kVTVideoDecoderSpecification_RequireHardwareAcceleratedVideoDecoder</name></cpp:macro> <cpp:value>CFSTR("RequireHardwareAcceleratedVideoDecoder")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder</name></cpp:macro> <cpp:value>CFSTR("EnableHardwareAcceleratedVideoDecoder")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_KCMVIDEOCODECTYPE_HEVC</name></expr></cpp:if>

<enum>enum <block>{ <decl><name>kCMVideoCodecType_HEVC</name> <init>= <expr><literal type="char">'hvc1'</literal></expr></init></decl> }</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEOTOOLBOX_ESDS_EXTRADATA_PADDING</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VTHWFrame</name> <block>{

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>VTHWFrame</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>videotoolbox_buffer_release</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTHWFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>(</operator><name>VTHWFrame</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CVPixelBufferRelease</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>pixbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_buffer_copy</name><parameter_list>(<parameter><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>allocated_size</name></name></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_postproc_frame</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTHWFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>(</operator><name>VTHWFrame</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>pixbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No frame decoded?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>ref</name><operator>-&gt;</operator><name>pixbuf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_videotoolbox_alloc_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VTHWFrame</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_attach_decode_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>videotoolbox_buffer_release</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fdd</name> <operator>=</operator> <operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdd</name><operator>-&gt;</operator><name>post_process</name></name> <operator>=</operator> <name>videotoolbox_postproc_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_W8</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(p) = (v)</cpp:value></cpp:define>

<function><type><name>CFDataRef</name></type> <name>ff_videotoolbox_avcc_extradata_create</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_extradata_size</name> <init>= <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vt_extradata</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>vt_extradata_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vt_extradata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>vt_extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0xe1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>vt_extradata</name> <operator>==</operator> <name>vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vtctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>vt_extradata</name></expr></argument>, <argument><expr><name>vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>vt_extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CFDataRef</name></type> <name>ff_videotoolbox_hvcc_extradata_create</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_vps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_sps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_pps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCVPS</name> <modifier>*</modifier></type><name>vps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>vps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTLCommon</name></type> <name>ptlc</name> <init>= <expr><name><name>vps</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>general_ptl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VUI</name></type> <name>vui</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>parallelismType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_extradata_size</name> <init>= <expr><literal type="number">23</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vt_extradata</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_SIZE_PS</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = 0; i &lt; HEVC_MAX_##T##PS_COUNT; i++) { if (h-&gt;ps.t##ps_list[i]) { const HEVC##T##PS *lps = (const HEVC##T##PS *)h-&gt;ps.t##ps_list[i]-&gt;data; vt_extradata_size += 2 + lps-&gt;data_size; num_##t##ps++; } }</cpp:value></cpp:define>

<macro><name>COUNT_SIZE_PS</name><argument_list>(<argument>V</argument>, <argument>v</argument>)</argument_list></macro>

<macro><name>COUNT_SIZE_PS</name><argument_list>(<argument>S</argument>, <argument>s</argument>)</argument_list></macro>

<macro><name>COUNT_SIZE_PS</name><argument_list>(<argument>P</argument>, <argument>p</argument>)</argument_list></macro>

<expr_stmt><expr><name>vt_extradata</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vt_extradata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>vt_extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ptlc</name><operator>.</operator><name>profile_space</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>ptlc</name><operator>.</operator><name>tier_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<name><name>ptlc</name><operator>.</operator><name>profile_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ptlc</name><operator>.</operator><name>profile_compatibility_flag</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>ptlc</name><operator>.</operator><name>progressive_source_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>|</operator>

<name><name>ptlc</name><operator>.</operator><name>interlaced_source_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>ptlc</name><operator>.</operator><name>non_packed_constraint_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<name><name>ptlc</name><operator>.</operator><name>frame_only_constraint_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>ptlc</name><operator>.</operator><name>level_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0xf0</literal> <operator>|</operator> <operator>(</operator><name><name>vui</name><operator>.</operator><name>min_spatial_segmentation_idc</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>vui</name><operator>.</operator><name>min_spatial_segmentation_idc</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vui</name><operator>.</operator><name>min_spatial_segmentation_idc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parallelismType</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name> <operator>&amp;&amp;</operator> <name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parallelismType</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parallelismType</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parallelismType</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>parallelismType</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0xfc</literal> <operator>|</operator> <name>parallelismType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>|</operator> <literal type="number">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>

<name><name>sps</name><operator>-&gt;</operator><name>temporal_id_nesting_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator>

<literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_W8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_PS</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_W8(p, 1 &lt;&lt; 7 | HEVC_NAL_##T##PS &amp; 0x3f); AV_WB16(p + 1, num_##t##ps); p += 3; for (i = 0; i &lt; HEVC_MAX_##T##PS_COUNT; i++) { if (h-&gt;ps.t##ps_list[i]) { const HEVC##T##PS *lps = (const HEVC##T##PS *)h-&gt;ps.t##ps_list[i]-&gt;data; AV_WB16(p, lps-&gt;data_size); memcpy(p + 2, lps-&gt;data, lps-&gt;data_size); p += 2 + lps-&gt;data_size; } }</cpp:value></cpp:define>

<macro><name>APPEND_PS</name><argument_list>(<argument>V</argument>, <argument>v</argument>)</argument_list></macro>

<macro><name>APPEND_PS</name><argument_list>(<argument>S</argument>, <argument>s</argument>)</argument_list></macro>

<macro><name>APPEND_PS</name><argument_list>(<argument>P</argument>, <argument>p</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>vt_extradata</name> <operator>==</operator> <name>vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>vt_extradata</name></expr></argument>, <argument><expr><name>vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>vt_extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_videotoolbox_h264_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>is_avc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>videotoolbox_buffer_copy</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_h264_decode_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>sps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>H264_NAL_SPS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>reconfig_needed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_videotoolbox_h264_decode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_common_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>allocated_size</name></name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name><operator>+</operator><name>size</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>+</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>+</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>+=</operator> <name>size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_videotoolbox_h264_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>is_avc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>videotoolbox_common_decode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_videotoolbox_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vtctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CVPixelBufferRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VIDEOTOOLBOX</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>videotoolbox_get_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_buffer_create</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixbuf</name> <init>= <expr><operator>(</operator><name>CVPixelBufferRef</name><operator>)</operator><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSType</name></type> <name>pixel_format</name> <init>= <expr><call><name>CVPixelBufferGetPixelFormatType</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>sw_format</name> <init>= <expr><call><name>av_map_videotoolbox_format_to_pixfmt</name><argument_list>(<argument><expr><name>pixel_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>CVPixelBufferGetWidth</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>CVPixelBufferGetHeight</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>cached_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTHWFrame</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"videotoolbox: invalid state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>(</operator><name>VTHWFrame</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>pixbuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CVPixelBufferRelease</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>pixbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pixbuf</name></name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cached_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cached_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>!=</operator> <name>sw_format</name> <operator>||</operator>

<name><name>cached_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name>width</name> <operator>||</operator>

<name><name>cached_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name> <init>= <expr><call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>cached_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hw_frames</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_frames_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hw_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>cached_frames</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name>sw_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name> <operator>=</operator> <name>hw_frames_ctx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>videotoolbox_write_mp4_descr_length</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFDataRef</name></type> <name>videotoolbox_esds_extradata_create</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rw_extradata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>full_size</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>config_size</name> <init>= <expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rw_extradata</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>full_size</name> <operator>+</operator> <name>VIDEOTOOLBOX_ESDS_EXTRADATA_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>rw_extradata</name></expr></argument>, <argument><expr><name>full_size</name> <operator>+</operator> <name>VIDEOTOOLBOX_ESDS_EXTRADATA_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_ne24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>videotoolbox_write_mp4_descr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>full_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_ne16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>videotoolbox_write_mp4_descr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>config_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_ne24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_ne32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_ne32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>videotoolbox_write_mp4_descr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bytestream2_size_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>rw_extradata</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rw_extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CMSampleBufferRef</name></type> <name>videotoolbox_sample_buffer_create</name><parameter_list>(<parameter><decl><type><name>CMFormatDescriptionRef</name></type> <name>fmt_desc</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMBlockBufferRef</name></type> <name>block_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMBlockBufferCreateWithMemoryBlock</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, 

<argument><expr><name>size</name></expr></argument>, 

<argument><expr><name>kCFAllocatorNull</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>size</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>block_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMSampleBufferCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, 

<argument><expr><name>block_buf</name></expr></argument>, 

<argument><expr><name>TRUE</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>fmt_desc</name></expr></argument>, 

<argument><expr><literal type="number">1</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>sample_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>block_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sample_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>videotoolbox_decoder_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sourceFrameRefCon</name></decl></parameter>,

<parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>VTDecodeInfoFlags</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>CVImageBufferRef</name></type> <name>image_buffer</name></decl></parameter>,

<parameter><decl><type><name>CMTime</name></type> <name>pts</name></decl></parameter>,

<parameter><decl><type><name>CMTime</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CVPixelBufferRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"vt decoder cb: output image buffer is null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>CVPixelBufferRetain</name><argument_list>(<argument><expr><name>image_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>videotoolbox_session_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>videotoolbox</name> <init>= <expr><call><name>videotoolbox_get_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sample_buf</name> <operator>=</operator> <call><name>videotoolbox_sample_buffer_create</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample_buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTDecompressionSessionDecodeFrame</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>sample_buf</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTDecompressionSessionWaitForAsynchronousFrames</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>sample_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CMVideoFormatDescriptionRef</name></type> <name>videotoolbox_format_desc_create</name><parameter_list>(<parameter><decl><type><name>CMVideoCodecType</name></type> <name>codec_type</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>decoder_spec</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMFormatDescriptionRef</name></type> <name>cm_fmt_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMVideoFormatDescriptionCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>codec_type</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>,

<argument><expr><name>decoder_spec</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>cm_fmt_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>cm_fmt_desc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFDictionaryRef</name></type> <name>videotoolbox_buffer_attributes_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>OSType</name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>buffer_attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>io_surface_properties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>cv_pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cv_pix_fmt</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_attributes</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>io_surface_properties</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>buffer_attributes</name></expr></argument>, <argument><expr><name>kCVPixelBufferPixelFormatTypeKey</name></expr></argument>, <argument><expr><name>cv_pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>buffer_attributes</name></expr></argument>, <argument><expr><name>kCVPixelBufferIOSurfacePropertiesKey</name></expr></argument>, <argument><expr><name>io_surface_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>buffer_attributes</name></expr></argument>, <argument><expr><name>kCVPixelBufferWidthKey</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>buffer_attributes</name></expr></argument>, <argument><expr><name>kCVPixelBufferHeightKey</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>buffer_attributes</name></expr></argument>, <argument><expr><name>kCVPixelBufferOpenGLESCompatibilityKey</name></expr></argument>, <argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>buffer_attributes</name></expr></argument>, <argument><expr><name>kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey</name></expr></argument>, <argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>io_surface_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cv_pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer_attributes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFDictionaryRef</name></type> <name>videotoolbox_decoder_config_create</name><parameter_list>(<parameter><decl><type><name>CMVideoCodecType</name></type> <name>codec_type</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>config_info</name> <init>= <expr><call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>config_info</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>codec_type</name> <operator>==</operator> <name>kCMVideoCodecType_HEVC</name></expr> ?</condition><then>

<expr><name>kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder</name></expr> </then><else>:

<expr><name>kVTVideoDecoderSpecification_RequireHardwareAcceleratedVideoDecoder</name></expr></else></ternary></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>avc_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>avc_info</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>codec_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kCMVideoCodecType_MPEG4Video</name></expr> :</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>videotoolbox_esds_extradata_create</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>avc_info</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"esds"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>kCMVideoCodecType_H264</name></expr> :</case>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ff_videotoolbox_avcc_extradata_create</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>avc_info</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"avcC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>kCMVideoCodecType_HEVC</name></expr> :</case>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ff_videotoolbox_hvcc_extradata_create</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>avc_info</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"hvcC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>config_info</name></expr></argument>,

<argument><expr><name>kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms</name></expr></argument>,

<argument><expr><name>avc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>avc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>config_info</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_start</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>videotoolbox</name> <init>= <expr><call><name>videotoolbox_get_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTDecompressionOutputCallbackRecord</name></type> <name>decoder_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>decoder_spec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>buf_attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>videotoolbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"hwaccel context is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr> :</case>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name> <operator>=</operator> <name>kCMVideoCodecType_H263</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr> :</case>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name> <operator>=</operator> <name>kCMVideoCodecType_H264</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr> :</case>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name> <operator>=</operator> <name>kCMVideoCodecType_HEVC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr> :</case>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name> <operator>=</operator> <name>kCMVideoCodecType_MPEG1Video</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr> :</case>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name> <operator>=</operator> <name>kCMVideoCodecType_MPEG2Video</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr> :</case>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name> <operator>=</operator> <name>kCMVideoCodecType_MPEG4Video</name></expr>;</expr_stmt>

<break>break;</break>

<default>default :</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>decoder_spec</name> <operator>=</operator> <call><name>videotoolbox_decoder_config_create</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decoder_spec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decoder specification creation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name> <operator>=</operator> <call><name>videotoolbox_format_desc_create</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_codec_type</name></name></expr></argument>,

<argument><expr><name>decoder_spec</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>decoder_spec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoder_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"format description creation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_attr</name> <operator>=</operator> <call><name>videotoolbox_buffer_attributes_create</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cv_pix_fmt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder_cb</name><operator>.</operator><name>decompressionOutputCallback</name></name> <operator>=</operator> <name>videotoolbox_decoder_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder_cb</name><operator>.</operator><name>decompressionOutputRefCon</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTDecompressionSessionCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name></expr></argument>, 

<argument><expr><name>decoder_spec</name></expr></argument>, 

<argument><expr><name>buf_attr</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>decoder_cb</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>decoder_spec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoder_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_attr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>buf_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kVTVideoDecoderNotAvailableNowErr</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VideoToolbox session not available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>kVTVideoDecoderUnsupportedDataFormatErr</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VideoToolbox does not support this format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>kVTCouldNotFindVideoDecoderErr</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VideoToolbox decoder for this format not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>kVTVideoDecoderMalfunctionErr</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VideoToolbox malfunction.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>kVTVideoDecoderBadDataErr</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VideoToolbox reported invalid data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Unknown VideoToolbox session creation error %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>videotoolbox_stop</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>videotoolbox</name> <init>= <expr><call><name>videotoolbox_get_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>videotoolbox</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>cm_fmt_desc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VTDecompressionSessionInvalidate</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>videotoolbox_error_string</name><parameter_list>(<parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kVTVideoDecoderBadDataErr</name></expr>:</case>

<return>return <expr><literal type="string">"bad data"</literal></expr>;</return>

<case>case <expr><name>kVTVideoDecoderMalfunctionErr</name></expr>:</case>

<return>return <expr><literal type="string">"decoder malfunction"</literal></expr>;</return>

<case>case <expr><name>kVTInvalidSessionErr</name></expr>:</case>

<return>return <expr><literal type="string">"invalid session"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_common_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>videotoolbox</name> <init>= <expr><call><name>videotoolbox_get_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>reconfig_needed</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>reconfig_needed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VideoToolbox decoder needs reconfig, restarting..\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>videotoolbox_stop</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>videotoolbox_start</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>videotoolbox</name><operator>-&gt;</operator><name>session</name></name> <operator>||</operator> <operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>||</operator> <operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>videotoolbox_session_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>kVTVideoDecoderMalfunctionErr</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>kVTInvalidSessionErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>reconfig_needed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to decode frame (%s, %d)\n"</literal></expr></argument>, <argument><expr><call><name>videotoolbox_error_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>reconfig_needed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>videotoolbox_buffer_create</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_h264_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>videotoolbox_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_hevc_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_hevc_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>videotoolbox_common_decode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_hevc_decode_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>videotoolbox_common_decode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_hevc_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>output_frame</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>output_frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>output_frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>output_frame</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>videotoolbox_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_mpeg_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>videotoolbox_buffer_copy</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_mpeg_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_mpeg_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>videotoolbox_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_videotoolbox_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>videotoolbox_stop</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>videotoolbox_best_pixel_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>descriptor</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>descriptor</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AV_PIX_FMT_NV12</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><name><name>descriptor</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AV_PIX_FMT_P010</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>AV_PIX_FMT_NV12</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_common_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hw_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Either hw_frames_ctx or hw_device_ctx must be set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name></name> <operator>=</operator> <call><name>av_videotoolbox_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hw_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hw_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <call><name>videotoolbox_best_pixel_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cached_hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>full_range</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name><operator>-&gt;</operator><name>cv_pix_fmt_type</name></name> <operator>=</operator>

<call><name>av_map_videotoolbox_format_from_pixfmt2</name><argument_list>(<argument><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>full_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>vt_ctx</name><operator>-&gt;</operator><name>cv_pix_fmt_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown sw_format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>videotoolbox_start</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>videotoolbox_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <call><name>videotoolbox_best_pixel_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h263_videotoolbox_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h263_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H263</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><operator>.</operator><name>alloc_frame</name> <operator>=</operator> <name>ff_videotoolbox_alloc_frame</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>videotoolbox_mpeg_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>videotoolbox_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>videotoolbox_common_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_videotoolbox_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><operator>.</operator><name>alloc_frame</name> <operator>=</operator> <name>ff_videotoolbox_alloc_frame</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>videotoolbox_hevc_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>videotoolbox_hevc_decode_slice</name></expr>,

<expr><operator>.</operator><name>decode_params</name> <operator>=</operator> <name>videotoolbox_hevc_decode_params</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>videotoolbox_hevc_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>videotoolbox_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>videotoolbox_common_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_videotoolbox_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><operator>.</operator><name>alloc_frame</name> <operator>=</operator> <name>ff_videotoolbox_alloc_frame</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>ff_videotoolbox_h264_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>ff_videotoolbox_h264_decode_slice</name></expr>,

<expr><operator>.</operator><name>decode_params</name> <operator>=</operator> <name>videotoolbox_h264_decode_params</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>videotoolbox_h264_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>videotoolbox_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>videotoolbox_common_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg1_videotoolbox_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg1_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><operator>.</operator><name>alloc_frame</name> <operator>=</operator> <name>ff_videotoolbox_alloc_frame</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>videotoolbox_mpeg_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>videotoolbox_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>videotoolbox_common_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg2_videotoolbox_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg2_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><operator>.</operator><name>alloc_frame</name> <operator>=</operator> <name>ff_videotoolbox_alloc_frame</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>videotoolbox_mpeg_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>videotoolbox_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>videotoolbox_common_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg4_videotoolbox_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg4_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><operator>.</operator><name>alloc_frame</name> <operator>=</operator> <name>ff_videotoolbox_alloc_frame</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>videotoolbox_mpeg_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>videotoolbox_mpeg_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>videotoolbox_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>videotoolbox_common_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>av_videotoolbox_alloc_context_with_pix_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>full_range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>output_callback</name></name> <operator>=</operator> <name>videotoolbox_decoder_callback</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OSType</name></type> <name>cv_pix_fmt_type</name> <init>= <expr><call><name>av_map_videotoolbox_format_from_pixfmt2</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>full_range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cv_pix_fmt_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cv_pix_fmt_type</name> <operator>=</operator> <name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>cv_pix_fmt_type</name></name> <operator>=</operator> <name>cv_pix_fmt_type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>av_videotoolbox_alloc_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_videotoolbox_alloc_context_with_pix_fmt</name><argument_list>(<argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_videotoolbox_default_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_videotoolbox_default_init2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_videotoolbox_default_init2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><call><name>videotoolbox_best_pixel_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>full_range</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <ternary><condition><expr><name>vtctx</name></expr> ?</condition><then/><else>: <expr><call><name>av_videotoolbox_alloc_context_with_pix_fmt</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>full_range</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>videotoolbox_start</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_videotoolbox_default_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>videotoolbox_stop</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
