<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\snow_dwt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow_dwt.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_slice_buffer_init</name><parameter_list>(<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_allocated_lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_width</name></decl></parameter>,

<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>base_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base_buffer</name></name> <operator>=</operator> <name>base_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <name>line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>line_width</name></name> <operator>=</operator> <name>line_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_count</name></name> <operator>=</operator> <name>max_allocated_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>line_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>max_allocated_lines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_allocated_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>line_width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>--</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack_top</name></name> <operator>=</operator> <name>max_allocated_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>ff_slice_buffer_load_line</name><parameter_list>(<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack_top</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>line</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>line</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data_stack</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack_top</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack_top</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>line</name></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_slice_buffer_release</name><parameter_list>(<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>line</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>line</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>line</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack_top</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack_top</name></name></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>line</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_slice_buffer_flush</name><parameter_list>(<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>line_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_slice_buffer_release</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_slice_buffer_destroy</name><parameter_list>(<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_slice_buffer_flush</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>data_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>lift</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_step</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mul</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>highpass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mirror_left</name> <init>= <expr><operator>!</operator><name>highpass</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mirror_right</name> <init>= <expr><operator>(</operator><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>highpass</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>highpass</name> <operator>&amp;</operator> <name>width</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIFT</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>, <parameter><type><name>inv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((src) + ((inv) ? -(ref) : +(ref)))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>mirror_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LIFT</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>mul</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_step</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>dst_step</name></expr>]</index></name> <operator>=</operator> <call><name>LIFT</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <name>src_step</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>mul</name> <operator>*</operator> <operator>(</operator><name><name>ref</name><index>[<expr><name>i</name> <operator>*</operator> <name>ref_step</name></expr>]</index></name> <operator>+</operator>

<name><name>ref</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ref_step</name></expr>]</index></name><operator>)</operator> <operator>+</operator>

<name>add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr></argument>,

<argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>mirror_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>w</name> <operator>*</operator> <name>dst_step</name></expr>]</index></name> <operator>=</operator> <call><name>LIFT</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>w</name> <operator>*</operator> <name>src_step</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>mul</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><name>w</name> <operator>*</operator> <name>ref_step</name></expr>]</index></name> <operator>+</operator> <name>add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr></argument>,

<argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>liftS</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_step</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mul</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>highpass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mirror_left</name> <init>= <expr><operator>!</operator><name>highpass</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mirror_right</name> <init>= <expr><operator>(</operator><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>highpass</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>highpass</name> <operator>&amp;</operator> <name>width</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>shift</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIFTS</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>, <parameter><type><name>inv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((inv) ? (src) + (((ref) + 4 * (src)) &gt;&gt; shift) : -((-16 * (src) + (ref) + add / 4 + 1 + (5 &lt;&lt; 25)) / (5 * 4) - (1 &lt;&lt; 23)))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>mirror_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LIFTS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mul</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_step</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>dst_step</name></expr>]</index></name> <operator>=</operator> <call><name>LIFTS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <name>src_step</name></expr>]</index></name></expr></argument>,

<argument><expr><name>mul</name> <operator>*</operator> <operator>(</operator><name><name>ref</name><index>[<expr><name>i</name> <operator>*</operator> <name>ref_step</name></expr>]</index></name> <operator>+</operator>

<name><name>ref</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ref_step</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>add</name></expr></argument>,

<argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>mirror_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>w</name> <operator>*</operator> <name>dst_step</name></expr>]</index></name> <operator>=</operator> <call><name>LIFTS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>w</name> <operator>*</operator> <name>src_step</name></expr>]</index></name></expr></argument>,

<argument><expr><name>mul</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><name>w</name> <operator>*</operator> <name>ref_step</name></expr>]</index></name> <operator>+</operator> <name>add</name></expr></argument>,

<argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horizontal_decompose53i</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width2</name> <init>= <expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lift</name><argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_decompose53iH0</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_decompose53iL0</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_decompose53i</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_decompose53i</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_decompose53i</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_decompose53iH0</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_decompose53iL0</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>b3</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horizontal_decompose97i</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lift</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>W_AM</name></expr></argument>, <argument><expr><name>W_AO</name></expr></argument>, <argument><expr><name>W_AS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>liftS</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>W_BM</name></expr></argument>, <argument><expr><name>W_BO</name></expr></argument>, <argument><expr><name>W_BS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lift</name><argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>W_CM</name></expr></argument>, <argument><expr><name>W_CO</name></expr></argument>, <argument><expr><name>W_CS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>W_DM</name></expr></argument>, <argument><expr><name>W_DO</name></expr></argument>, <argument><expr><name>W_DS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_decompose97iH0</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_AM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_AO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_AS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_decompose97iH1</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_CM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_CO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_CS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_decompose97iL0</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_BO</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <operator>(</operator><literal type="number">5</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>/</operator>

<operator>(</operator><literal type="number">5</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_decompose97iL1</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_DM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_DO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_DS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_decompose97i</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>b5</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_decompose97i</name><argument_list>(<argument><expr><name>b4</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_decompose97i</name><argument_list>(<argument><expr><name>b5</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_decompose97iH0</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_decompose97iL0</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_decompose97iH1</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_decompose97iL1</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>b4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b3</name> <operator>=</operator> <name>b5</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_spatial_dwt</name><parameter_list>(<parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name>decomposition_count</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DWT_97</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_decompose97i</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,

<argument><expr><name>width</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_53</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_decompose53i</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,

<argument><expr><name>width</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horizontal_compose53i</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width2</name> <init>= <expr><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_compose53iH0</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_compose53iL0</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose53i_buffered_init</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,

<argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose53i_init</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose53i_dy_buffered</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,

<argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<name>stride_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,

<argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<name>stride_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name><name>b1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>b3</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose53iL0</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose53iH0</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_compose53i</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_compose53i</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose53i_dy</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose53iL0</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose53iH0</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_compose53i</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>horizontal_compose53i</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_snow_horizontal_compose97i</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name> <init>= <expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>b</name><index>[<expr><name>w2</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>temp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_compose97iH0</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_AM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_AO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_AS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_compose97iH1</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_CM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_CO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_CS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_compose97iL0</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_BM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>W_BO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_BS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vertical_compose97iL1</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_DM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_DO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_DS</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_snow_vertical_compose97i</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>,

<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b4</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b5</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_DM</name> <operator>*</operator> <operator>(</operator><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b5</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_DO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_DS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_CM</name> <operator>*</operator> <operator>(</operator><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_CO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_CS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_BM</name> <operator>*</operator> <operator>(</operator><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>W_BO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_BS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_AM</name> <operator>*</operator> <operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>W_AO</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_AS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose97i_buffered_init</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose97i_init</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose97i_dy_buffered</name><parameter_list>(<parameter><decl><type><name>SnowDWTContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,

<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,

<argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<name>stride_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b5</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,

<argument><expr><call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<name>stride_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vertical_compose97i</name></name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iL1</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iH1</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iL0</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iH0</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>horizontal_compose97i</name></name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>horizontal_compose97i</name></name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>b4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <name>b5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_compose97i_dy</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>b3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b4</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b5</name> <init>= <expr><name>buffer</name> <operator>+</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iL1</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iH1</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iL0</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vertical_compose97iH0</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_snow_horizontal_compose97i</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_snow_horizontal_compose97i</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>b4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <name>b5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_spatial_idwt_buffered_init</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <name>decomposition_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DWT_97</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose97i_buffered_init</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride_line</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_53</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose53i_buffered_init</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride_line</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_spatial_idwt_buffered_slice</name><parameter_list>(<parameter><decl><type><name>SnowDWTContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,

<parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type><name>slice_buf</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride_line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>support</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <name>decomposition_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<while>while <condition>(<expr><name><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name>level</name><operator>)</operator> <operator>+</operator> <name>support</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DWT_97</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose97i_dy_buffered</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>slice_buf</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,

<argument><expr><name>width</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride_line</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_53</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose53i_dy_buffered</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>slice_buf</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,

<argument><expr><name>width</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride_line</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_idwt_init</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <name>decomposition_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DWT_97</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose97i_init</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_53</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose53i_init</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>stride</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spatial_idwt_slice</name><parameter_list>(<parameter><decl><type><name>DWTCompose</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>support</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <name>decomposition_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<while>while <condition>(<expr><name><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name>level</name><operator>)</operator> <operator>+</operator> <name>support</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DWT_97</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose97i_dy</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>, <argument><expr><name>stride</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DWT_53</name></expr>:</case>

<expr_stmt><expr><call><name>spatial_compose53i_dy</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>,

<argument><expr><name>height</name> <operator>&gt;&gt;</operator> <name>level</name></expr></argument>, <argument><expr><name>stride</name> <operator>&lt;&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_spatial_idwt</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWTCompose</name></type> <name><name>cs</name><index>[<expr><name>MAX_DECOMPOSITIONS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spatial_idwt_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>decomposition_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spatial_idwt_slice</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>decomposition_count</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>w_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dec_count</name> <init>= <expr><ternary><condition><expr><name>w</name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>ori</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><block>{ 

<expr><block>{ <expr><literal type="number">268</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">213</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">152</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">110</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ 

<expr><block>{ <expr><literal type="number">344</literal></expr>, <expr><literal type="number">310</literal></expr>, <expr><literal type="number">310</literal></expr>, <expr><literal type="number">280</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">228</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">136</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">102</literal></expr> }</block></expr>,

}</block></expr>

}</block></expr>,

<expr><block>{

<expr><block>{ 

<expr><block>{ <expr><literal type="number">275</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">218</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">156</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">113</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ 

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">317</literal></expr>, <expr><literal type="number">317</literal></expr>, <expr><literal type="number">286</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">328</literal></expr>, <expr><literal type="number">328</literal></expr>, <expr><literal type="number">233</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">140</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">105</literal></expr> }</block></expr>,

}</block></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pix1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pix1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pix1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pix1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_spatial_dwt</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dec_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>w</name> <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name>dec_count</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ori</name> <operator>=</operator> <ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>ori</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ori</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>dec_count</name> <operator>-</operator> <name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ori</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><literal type="number">32</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>dec_count</name> <operator>-</operator> <name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ori</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>stride</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>tmp</name><index>[<expr><name>sx</name> <operator>+</operator> <name>sy</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator>

<name><name>scale</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>dec_count</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>ori</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>w53_8_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>w_c</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>w97_8_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>w_c</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>w53_16_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>w_c</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>w97_16_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>w_c</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_w53_32_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>w_c</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_w97_32_c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>w_c</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dsputil_init_dwt</name><parameter_list>(<parameter><decl><type><name>MECmpContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>w53</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w53_16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>w53</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w53_8_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>w97</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w97_16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>w97</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w97_8_c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dwt_init</name><parameter_list>(<parameter><decl><type><name>SnowDWTContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vertical_compose97i</name></name> <operator>=</operator> <name>ff_snow_vertical_compose97i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>horizontal_compose97i</name></name> <operator>=</operator> <name>ff_snow_horizontal_compose97i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>inner_add_yblock</name></name> <operator>=</operator> <name>ff_snow_inner_add_yblock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_MMX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dwt_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
