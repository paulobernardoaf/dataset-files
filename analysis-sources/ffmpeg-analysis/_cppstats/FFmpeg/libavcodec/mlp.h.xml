<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mlp.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATRIX_CHANNEL_MLP</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATRIX_CHANNEL_TRUEHD</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATRICES_MLP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATRICES_TRUEHD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATRICES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUBSTREAMS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RATEFACTOR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SAMPLERATE</name></cpp:macro> <cpp:value>(MAX_RATEFACTOR * 48000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLOCKSIZE</name></cpp:macro> <cpp:value>(40 * MAX_RATEFACTOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLOCKSIZE_POW2</name></cpp:macro> <cpp:value>(64 * MAX_RATEFACTOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_FILTERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FIR_ORDER</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IIR_ORDER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_STREAM</name></cpp:macro> <cpp:value>0xd234d234</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IIR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FilterParams</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>state</name><index>[<expr><name>MAX_FIR_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coeff_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coeff_shift</name></decl>;</decl_stmt>

}</block></struct></type> <name>FilterParams</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ChannelParams</name> <block>{

<decl_stmt><decl><type><name>FilterParams</name></type> <name><name>filter_params</name><index>[<expr><name>NUM_FILTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>coeff</name><index>[<expr><name>NUM_FILTERS</name></expr>]</index><index>[<expr><name>MAX_FIR_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>huff_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>sign_huff_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>codebook</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>huff_lsbs</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ChannelParams</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_mlp_huffman_tables</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">18</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>channel_occupancy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>group1_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>group2_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>summary_info</name></decl>;</decl_stmt>

}</block></struct></type> <name>ChannelInformation</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ChannelInformation</name></type> <name><name>ff_mlp_ch_info</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>ff_mlp_channel_layouts</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>uint8_t</name></type> <name>ff_mlp_checksum8</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>ff_mlp_checksum16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name></type> <name>ff_mlp_restart_checksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name></type> <name>ff_mlp_calculate_parity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mlp_init_crc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>xor_32_to_8</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>^=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>^=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>THDChannelModifier</name> <block>{

<decl><name>THD_CH_MODIFIER_NOTINDICATED</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,

<decl><name>THD_CH_MODIFIER_STEREO</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>THD_CH_MODIFIER_LTRT</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>THD_CH_MODIFIER_LBINRBIN</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

<decl><name>THD_CH_MODIFIER_MONO</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>, 

<decl><name>THD_CH_MODIFIER_NOTSURROUNDEX</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, 

<decl><name>THD_CH_MODIFIER_SURROUNDEX</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, 

}</block></enum></type> <name>THDChannelModifier</name>;</typedef>

</unit>
