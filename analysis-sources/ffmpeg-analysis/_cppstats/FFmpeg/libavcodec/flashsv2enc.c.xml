<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\flashsv2enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_IFRAME_IMAGE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_PALLET_INFO</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORSPACE_BGR</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORSPACE_15_7</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_DIFF_BLOCKS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_PRIME_COMPRESS_CURRENT</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_PRIME_COMPRESS_PREVIOUS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASHSV2_DUMB</name></cpp:macro></cpp:define>

<typedef>typedef <type><struct>struct <name>Block</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sl_begin</name></decl>, <modifier>*</modifier><name>sl_end</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enc_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>start</name></decl>, <name>len</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>col</name></decl>, <name>row</name>, <name>width</name>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>Block</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Palette</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>colors</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>index</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>Palette</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FlashSV2Context</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>key_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>encbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>keybuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>databuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blockbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockbuffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>frame_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>key_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocks_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use15_7</name></decl>, <name>dist</name>, <name>comp</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <name>cols</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_key_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>image_width</name></decl>, <name>image_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name></decl>, <name>block_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>use_custom_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>palette_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Palette</name></type> <name>palette</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>tot_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>diff_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>tot_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>diff_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>raw_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>comp_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>uncomp_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>total_bits</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>FlashSV2Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>databuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blockbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_blocks</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>blocks</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>encbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>databuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>blocks</name> <operator>+</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>

<expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>-</operator> <name>col</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>

<expr><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>-</operator> <name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <name>encbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>databuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>encbuf</name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>databuf</name> <operator>+=</operator> <ternary><condition><expr><operator>!</operator><name>databuf</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_stats</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>diff_blocks</name></name> <operator>=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tot_blocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>diff_lines</name></name> <operator>=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tot_lines</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>raw_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uncomp_size</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flashsv2_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>comp</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>comp</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>comp</name></name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Compression level should be 0-9, not %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Input dimensions too large, input must be max 4095x4095 !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Input dimensions too small, input must be at least 16x16 !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>/</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>/</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>databuffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockbuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blockbuffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>databuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_stats</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_custom_palette</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_type</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>databuffer</name></name>

<operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name>

<operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>new_key_frame</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sl_begin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sl_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_palette</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_header</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_pos</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_PALLET_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>write_palette</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_pos</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>buf_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf_pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_block</name><parameter_list>(<parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>block_size</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_DIFF_BLOCKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ZLIB_PRIME_COMPRESS_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>block_size</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>block_size</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buf_pos</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_DIFF_BLOCKS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ZLIB_PRIME_COMPRESS_CURRENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>col</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>row</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buf_pos</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_pos</name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<return>return <expr><name>buf_pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_zlib</name><parameter_list>(<parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>compress2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>sl_begin</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>sl_end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>sl_begin</name></name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name>Z_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_zlibprime</name><parameter_list>(<parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>prime</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>z_stream</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>prime</name><operator>-&gt;</operator><name>enc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>prime</name><operator>-&gt;</operator><name>enc_size</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>.</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>*</operator><name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>sl_begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>sl_end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>sl_begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>*</operator><name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>-=</operator> <name><name>s</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_bgr</name><parameter_list>(<parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sl_begin</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sl_end</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>enc_size</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>enc</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>enc_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>pixel_color15</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>chroma_diff</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSDIFF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(abs((int)(a)-(int)(b)))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t1</name> <init>= <expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t2</name> <init>= <expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ABSDIFF</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ABSDIFF</name><argument_list>(<argument><expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal></expr></argument>, <argument><expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>ABSDIFF</name><argument_list>(<argument><expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument> , <argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>ABSDIFF</name><argument_list>(<argument><expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pixel_color7_fast</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>c15</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>palette</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>c15</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pixel_color7_slow</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>palette</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>chroma_diff</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>minc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>pixel_bgr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_pixel_15_7</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>c15</name> <init>= <expr><call><name>pixel_color15</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>color</name> <init>= <expr><call><name>pixel_bgr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d15</name> <init>= <expr><call><name>chroma_diff</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>color</name> <operator>&amp;</operator> <literal type="number">0x00f8f8f8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c7</name> <init>= <expr><call><name>pixel_color7_fast</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>c15</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d7</name> <init>= <expr><call><name>chroma_diff</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>palette</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>c7</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>+</operator> <name>d15</name> <operator>&gt;=</operator> <name>d7</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c7</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>c15</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c15</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_palette_index</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bgr</name></decl>, <decl><type ref="prev"/><name>c15</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>r</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>g</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bgr</name> <operator>=</operator> <name>b</name> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c15</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>pixel_color7_slow</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>bgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>palette</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>c15</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>default_screen_video_v2_palette</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00333333</literal></expr>, <expr><literal type="number">0x00666666</literal></expr>, <expr><literal type="number">0x00999999</literal></expr>, <expr><literal type="number">0x00CCCCCC</literal></expr>, <expr><literal type="number">0x00FFFFFF</literal></expr>,

<expr><literal type="number">0x00330000</literal></expr>, <expr><literal type="number">0x00660000</literal></expr>, <expr><literal type="number">0x00990000</literal></expr>, <expr><literal type="number">0x00CC0000</literal></expr>, <expr><literal type="number">0x00FF0000</literal></expr>, <expr><literal type="number">0x00003300</literal></expr>,

<expr><literal type="number">0x00006600</literal></expr>, <expr><literal type="number">0x00009900</literal></expr>, <expr><literal type="number">0x0000CC00</literal></expr>, <expr><literal type="number">0x0000FF00</literal></expr>, <expr><literal type="number">0x00000033</literal></expr>, <expr><literal type="number">0x00000066</literal></expr>,

<expr><literal type="number">0x00000099</literal></expr>, <expr><literal type="number">0x000000CC</literal></expr>, <expr><literal type="number">0x000000FF</literal></expr>, <expr><literal type="number">0x00333300</literal></expr>, <expr><literal type="number">0x00666600</literal></expr>, <expr><literal type="number">0x00999900</literal></expr>,

<expr><literal type="number">0x00CCCC00</literal></expr>, <expr><literal type="number">0x00FFFF00</literal></expr>, <expr><literal type="number">0x00003333</literal></expr>, <expr><literal type="number">0x00006666</literal></expr>, <expr><literal type="number">0x00009999</literal></expr>, <expr><literal type="number">0x0000CCCC</literal></expr>,

<expr><literal type="number">0x0000FFFF</literal></expr>, <expr><literal type="number">0x00330033</literal></expr>, <expr><literal type="number">0x00660066</literal></expr>, <expr><literal type="number">0x00990099</literal></expr>, <expr><literal type="number">0x00CC00CC</literal></expr>, <expr><literal type="number">0x00FF00FF</literal></expr>,

<expr><literal type="number">0x00FFFF33</literal></expr>, <expr><literal type="number">0x00FFFF66</literal></expr>, <expr><literal type="number">0x00FFFF99</literal></expr>, <expr><literal type="number">0x00FFFFCC</literal></expr>, <expr><literal type="number">0x00FF33FF</literal></expr>, <expr><literal type="number">0x00FF66FF</literal></expr>,

<expr><literal type="number">0x00FF99FF</literal></expr>, <expr><literal type="number">0x00FFCCFF</literal></expr>, <expr><literal type="number">0x0033FFFF</literal></expr>, <expr><literal type="number">0x0066FFFF</literal></expr>, <expr><literal type="number">0x0099FFFF</literal></expr>, <expr><literal type="number">0x00CCFFFF</literal></expr>,

<expr><literal type="number">0x00CCCC33</literal></expr>, <expr><literal type="number">0x00CCCC66</literal></expr>, <expr><literal type="number">0x00CCCC99</literal></expr>, <expr><literal type="number">0x00CCCCFF</literal></expr>, <expr><literal type="number">0x00CC33CC</literal></expr>, <expr><literal type="number">0x00CC66CC</literal></expr>,

<expr><literal type="number">0x00CC99CC</literal></expr>, <expr><literal type="number">0x00CCFFCC</literal></expr>, <expr><literal type="number">0x0033CCCC</literal></expr>, <expr><literal type="number">0x0066CCCC</literal></expr>, <expr><literal type="number">0x0099CCCC</literal></expr>, <expr><literal type="number">0x00FFCCCC</literal></expr>,

<expr><literal type="number">0x00999933</literal></expr>, <expr><literal type="number">0x00999966</literal></expr>, <expr><literal type="number">0x009999CC</literal></expr>, <expr><literal type="number">0x009999FF</literal></expr>, <expr><literal type="number">0x00993399</literal></expr>, <expr><literal type="number">0x00996699</literal></expr>,

<expr><literal type="number">0x0099CC99</literal></expr>, <expr><literal type="number">0x0099FF99</literal></expr>, <expr><literal type="number">0x00339999</literal></expr>, <expr><literal type="number">0x00669999</literal></expr>, <expr><literal type="number">0x00CC9999</literal></expr>, <expr><literal type="number">0x00FF9999</literal></expr>,

<expr><literal type="number">0x00666633</literal></expr>, <expr><literal type="number">0x00666699</literal></expr>, <expr><literal type="number">0x006666CC</literal></expr>, <expr><literal type="number">0x006666FF</literal></expr>, <expr><literal type="number">0x00663366</literal></expr>, <expr><literal type="number">0x00669966</literal></expr>,

<expr><literal type="number">0x0066CC66</literal></expr>, <expr><literal type="number">0x0066FF66</literal></expr>, <expr><literal type="number">0x00336666</literal></expr>, <expr><literal type="number">0x00996666</literal></expr>, <expr><literal type="number">0x00CC6666</literal></expr>, <expr><literal type="number">0x00FF6666</literal></expr>,

<expr><literal type="number">0x00333366</literal></expr>, <expr><literal type="number">0x00333399</literal></expr>, <expr><literal type="number">0x003333CC</literal></expr>, <expr><literal type="number">0x003333FF</literal></expr>, <expr><literal type="number">0x00336633</literal></expr>, <expr><literal type="number">0x00339933</literal></expr>,

<expr><literal type="number">0x0033CC33</literal></expr>, <expr><literal type="number">0x0033FF33</literal></expr>, <expr><literal type="number">0x00663333</literal></expr>, <expr><literal type="number">0x00993333</literal></expr>, <expr><literal type="number">0x00CC3333</literal></expr>, <expr><literal type="number">0x00FF3333</literal></expr>,

<expr><literal type="number">0x00003366</literal></expr>, <expr><literal type="number">0x00336600</literal></expr>, <expr><literal type="number">0x00660033</literal></expr>, <expr><literal type="number">0x00006633</literal></expr>, <expr><literal type="number">0x00330066</literal></expr>, <expr><literal type="number">0x00663300</literal></expr>,

<expr><literal type="number">0x00336699</literal></expr>, <expr><literal type="number">0x00669933</literal></expr>, <expr><literal type="number">0x00993366</literal></expr>, <expr><literal type="number">0x00339966</literal></expr>, <expr><literal type="number">0x00663399</literal></expr>, <expr><literal type="number">0x00996633</literal></expr>,

<expr><literal type="number">0x006699CC</literal></expr>, <expr><literal type="number">0x0099CC66</literal></expr>, <expr><literal type="number">0x00CC6699</literal></expr>, <expr><literal type="number">0x0066CC99</literal></expr>, <expr><literal type="number">0x009966CC</literal></expr>, <expr><literal type="number">0x00CC9966</literal></expr>,

<expr><literal type="number">0x0099CCFF</literal></expr>, <expr><literal type="number">0x00CCFF99</literal></expr>, <expr><literal type="number">0x00FF99CC</literal></expr>, <expr><literal type="number">0x0099FFCC</literal></expr>, <expr><literal type="number">0x00CC99FF</literal></expr>, <expr><literal type="number">0x00FFCC99</literal></expr>,

<expr><literal type="number">0x00111111</literal></expr>, <expr><literal type="number">0x00222222</literal></expr>, <expr><literal type="number">0x00444444</literal></expr>, <expr><literal type="number">0x00555555</literal></expr>, <expr><literal type="number">0x00AAAAAA</literal></expr>, <expr><literal type="number">0x00BBBBBB</literal></expr>,

<expr><literal type="number">0x00DDDDDD</literal></expr>, <expr><literal type="number">0x00EEEEEE</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_default_palette</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>palette</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><name>default_screen_video_v2_palette</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>default_screen_video_v2_palette</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_palette_index</name><argument_list>(<argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_optimum_palette</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>image</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>encode_15_7_sl</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>write_pixel_15_7</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_15_7</name><parameter_list>(<parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>encode_15_7_sl</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sl_begin</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>encode_15_7_sl</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sl_end</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>encode_15_7_sl</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>enc_size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>enc</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>enc_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_block</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Palette</name> <modifier>*</modifier></type> <name>palette</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>,

<parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>prev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>buf_size</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>blockbuffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COLORSPACE_15_7</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encode_15_7</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>encode_bgr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>encode_zlib</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>encode_zlibprime</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ZLIB_PRIME_COMPRESS_PREVIOUS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_sl</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>diff_lines</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_all_blocks</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sl</name></decl>, <decl><type ref="prev"/><name>rsl</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>possl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>sl</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rsl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>-</operator> <name>sl</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name> <operator>+</operator> <name>col</name> <operator>+</operator> <name>rsl</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>possl</name> <operator>=</operator> <name>stride</name> <operator>*</operator> <name>sl</name> <operator>+</operator> <name>col</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>*</operator> <name>rsl</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>col</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compare_sl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>possl</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>+</operator> <name>pos</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>rsl</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tot_lines</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_all_blocks</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name> <operator>+</operator> <operator>(</operator><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>+</operator> <name>col</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name> <operator>+</operator> <operator>(</operator><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>+</operator> <name>col</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>use15_7</name></name></expr> ?</condition><then> <expr><name>COLORSPACE_15_7</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HAS_DIFF_BLOCKS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>*</operator> <name>row</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>*</operator> <name>col</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>diff_blocks</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uncomp_size</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>enc_size</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>raw_size</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tot_blocks</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_all_blocks</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>buf_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name> <operator>+</operator> <name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>write_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_pos</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>buf_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>buf_pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_bitstream</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_pos</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mark_all_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>encode_all_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_pos</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_all_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_pos</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>buf_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_pos</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>buf_pos</name><operator>)</operator> <operator>*</operator> <literal type="number">8.0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>buf_pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recommend_keyframe</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>block_ratio</name></decl>, <decl><type ref="prev"/><name>line_ratio</name></decl>, <decl><type ref="prev"/><name>enc_ratio</name></decl>, <decl><type ref="prev"/><name>comp_ratio</name></decl>, <decl><type ref="prev"/><name>data_ratio</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_ratio</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>diff_blocks</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tot_blocks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_ratio</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>diff_lines</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tot_lines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_ratio</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uncomp_size</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>raw_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>comp_ratio</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>uncomp_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_ratio</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>raw_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>block_ratio</name> <operator>&gt;=</operator> <literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <name>line_ratio</name> <operator>/</operator> <name>block_ratio</name> <operator>&lt;=</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>||</operator> <name>line_ratio</name> <operator>&gt;=</operator> <literal type="number">0.95</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>block_size_fraction</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">300</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>use15_7_threshold</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>color15_7_factor</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optimum_block_width</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>save</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>diff_lines</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>diff_blocks</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>comp_size</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>tot_blocks</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>width</name> <init>= <expr><name>block_size_fraction</name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>save</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>image_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pwidth</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>width</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFCLIP</name><argument_list>(<argument><expr><name>pwidth</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">64</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optimum_block_height</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>save</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>diff_lines</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>diff_blocks</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>comp_size</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>tot_blocks</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>height</name> <init>= <expr><name>block_size_fraction</name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>save</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>image_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pheight</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>height</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFCLIP</name><argument_list>(<argument><expr><name>pheight</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">64</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optimum_use15_7</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>ideal</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name><operator>)</operator><operator>)</operator> <operator>/</operator>

<operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ideal</name> <operator>+</operator> <name>use15_7_threshold</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optimum_dist</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASHSV2_DUMB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>ideal</name> <init>=

<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>/</operator> <name>ideal</name><operator>)</operator> <operator>*</operator> <name>color15_7_factor</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"dist: %d\n"</literal></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dist</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">15</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reconfigure_at_keyframe</name><parameter_list>(<parameter><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>image</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>update_palette</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>optimum_block_width</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>optimum_block_height</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name> <operator>+</operator> <name>block_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name> <operator>+</operator> <name>block_width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_width</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>||</operator> <name>block_height</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>=</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>=</operator> <name>block_height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks_size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>encbuffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>databuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>key_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>keybuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blockbuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blockbuffer_size</name></name></expr></argument>, <argument><expr><name>block_width</name> <operator>*</operator> <name>block_height</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>blockbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate block buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use15_7</name></name> <operator>=</operator> <call><name>optimum_use15_7</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use15_7</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>use_custom_palette</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>palette_type</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>update_palette</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>generate_optimum_palette</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_height</name></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Generated optimum palette\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>use_custom_palette</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>palette_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>generate_default_palette</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Generated default palette\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reset_stats</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flashsv2_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlashSV2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_key_frame</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyframe</name>

<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_key_frame</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>recommend_keyframe</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Recommending key frame at frame %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>reconfigure_at_keyframe</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use15_7</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <call><name>optimum_dist</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>new_key_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_key_frame</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Inserting key frame at frame %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flashsv2_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlashSV2Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_flashsv2_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"flashsv2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Flash Screen Video Version 2"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FLASHSV2</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FlashSV2Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>flashsv2_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>flashsv2_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>flashsv2_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
