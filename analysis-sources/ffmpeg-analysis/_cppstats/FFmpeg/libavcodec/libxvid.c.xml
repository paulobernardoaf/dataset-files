<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libxvid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xvid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libxvid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_IO_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_REMAINING</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BUFFER_SIZE - strlen(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_CAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;((x)[strlen(x)]))</cpp:value></cpp:define>

<struct>struct <name>xvid_context</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>encoder_handle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ysize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vop_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vol_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>me_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>quicktime_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>twopassbuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_twopassbuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>twopassfile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>twopassfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>intra_matrix</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inter_matrix</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lumi_aq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>variance_aq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ssim</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ssim_acc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>gmc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_quality</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mpeg_quant</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>xvid_ff_pass1</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xvid_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xvid_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_ff_2pass_create</name><parameter_list>(<parameter><decl><type><name>xvid_plg_create_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>xvid_ff_pass1</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator>struct <name>xvid_ff_pass1</name> <operator>*</operator><operator>)</operator> <name><name>param</name><operator>-&gt;</operator><name>param</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>XVID_ERR_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>log</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><call><name>BUFFER_REMAINING</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"#ffmpeg 2-pass log file, using xvid codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>BUFFER_CAT</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFFER_REMAINING</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"#Do not modify. libxvidcore version: %d.%d.%d\n\n"</literal></expr></argument>,

<argument><expr><call><name>XVID_VERSION_MAJOR</name><argument_list>(<argument><expr><name>XVID_VERSION</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>XVID_VERSION_MINOR</name><argument_list>(<argument><expr><name>XVID_VERSION</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>XVID_VERSION_PATCH</name><argument_list>(<argument><expr><name>XVID_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_ff_2pass_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>xvid_plg_destroy_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>twopassbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_ff_2pass_before</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>xvid_plg_data_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>motion_remove</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_replacements</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vop_remove</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>zone</name></name> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>zone</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>XVID_ZONE_QUANT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>quant</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_remove</name> <operator>=</operator> <operator>~</operator><name>XVID_ME_CHROMA_PVOP</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_ME_CHROMA_BVOP</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_ME_EXTSEARCH16</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_ME_ADVANCEDDIAMOND16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_replacements</name> <operator>=</operator> <name>XVID_ME_FAST_MODEINTERPOLATE</name> <operator>|</operator>

<name>XVID_ME_SKIP_DELTASEARCH</name> <operator>|</operator>

<name>XVID_ME_FASTREFINE16</name> <operator>|</operator>

<name>XVID_ME_BFRAME_EARLYSTOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vop_remove</name> <operator>=</operator> <operator>~</operator><name>XVID_VOP_MODEDECISION_RD</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_VOP_FAST_MODEDECISION_RD</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_VOP_TRELLISQUANT</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_VOP_INTER4V</name> <operator>&amp;</operator>

<operator>~</operator><name>XVID_VOP_HQACPRED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vol_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>XVID_VOL_GMC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>&amp;=</operator> <name>vop_remove</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>motion_flags</name></name> <operator>&amp;=</operator> <name>motion_remove</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>motion_flags</name></name> <operator>|=</operator> <name>motion_replacements</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_ff_2pass_after</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name>xvid_plg_data_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frame_types</name> <init>= <expr><literal type="string">" ipbs"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>frame_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>XVID_ERR_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_type</name> <operator>=</operator> <name><name>frame_types</name><index>[<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>XVID_ERR_FAIL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>BUFFER_CAT</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFFER_REMAINING</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"%c %d %d %d %d %d %d\n"</literal></expr></argument>,

<argument><expr><name>frame_type</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>kblks</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>mblks</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>ublks</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>hlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_ff_2pass</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>XVID_PLG_INFO</name></expr>:</case>

<case>case <expr><name>XVID_PLG_FRAME</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>XVID_PLG_BEFORE</name></expr>:</case>

<return>return <expr><call><name>xvid_ff_2pass_before</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>XVID_PLG_CREATE</name></expr>:</case>

<return>return <expr><call><name>xvid_ff_2pass_create</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>XVID_PLG_AFTER</name></expr>:</case>

<return>return <expr><call><name>xvid_ff_2pass_after</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>XVID_PLG_DESTROY</name></expr>:</case>

<return>return <expr><call><name>xvid_ff_2pass_destroy</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>XVID_ERR_FAIL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_strip_vol_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>header_len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vo_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>header_len</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xB6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vo_len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vo_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>vo_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>vo_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>vo_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>vo_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>frame_len</name> <operator>-</operator> <name>vo_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>frame_len</name> <operator>-</operator> <name>vo_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xvid_correct_framerate</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frate</name></decl>, <decl><type ref="prev"/><name>fbase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>est_frate</name></decl>, <decl><type ref="prev"/><name>est_fbase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gcd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>est_fps</name></decl>, <decl><type ref="prev"/><name>fps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frate</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fbase</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name>frate</name></expr></argument>, <argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gcd</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frate</name> <operator>/=</operator> <name>gcd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fbase</name> <operator>/=</operator> <name>gcd</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frate</name> <operator>&lt;=</operator> <literal type="number">65000</literal> <operator>&amp;&amp;</operator> <name>fbase</name> <operator>&lt;=</operator> <literal type="number">65000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>frate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>fbase</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>frate</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>fbase</name></expr>;</expr_stmt>

<expr_stmt><expr><name>est_fps</name> <operator>=</operator> <call><name>roundf</name><argument_list>(<argument><expr><name>fps</name> <operator>*</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>est_frate</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>est_fps</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>est_fps</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>est_fps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>est_frate</name> <operator>=</operator> <operator>(</operator><name>est_frate</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>est_fbase</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>roundf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>est_frate</name> <operator>/</operator> <name>est_fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>est_fbase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name>est_frate</name></expr></argument>, <argument><expr><name>est_fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gcd</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>est_frate</name> <operator>/=</operator> <name>gcd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>est_fbase</name> <operator>/=</operator> <name>gcd</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fbase</name> <operator>&gt;</operator> <name>est_fbase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>est_frate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>est_fbase</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Xvid: framerate re-estimated: %.2f, %.3f%% correction\n"</literal></expr></argument>,

<argument><expr><name>est_fps</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>est_fps</name> <operator>-</operator> <name>fps</name><operator>)</operator> <operator>/</operator> <name>fps</name><operator>)</operator> <operator>*</operator> <literal type="number">100.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>frate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>fbase</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xvid_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xerr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xvid_flags</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>intra</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_plugin_single_t</name></type> <name>single</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xvid_ff_pass1</name></name></type> <name>rc2pass1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_plugin_2pass2_t</name></type> <name>rc2pass2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_plugin_lumimasking_t</name></type> <name>masking_l</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>xvid_plugin_lumimasking_t</name></type> <name>masking_v</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>xvid_plugin_ssim_t</name></type> <name>ssim</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_gbl_init_t</name></type> <name>xvid_gbl_init</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_enc_create_t</name></type> <name>xvid_enc_create</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_enc_plugin_t</name></type> <name><name>plugins</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>=</operator> <name>XVID_VOP_HALFPEL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_4MV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>|=</operator> <name>XVID_VOP_INTER4V</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>|=</operator> <name>XVID_VOP_TRELLISQUANT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_AC_PRED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>|=</operator> <name>XVID_VOP_HQACPRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>|=</operator> <name>XVID_VOP_GREYSCALE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>me_quality</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_EXTSEARCH16</name> <operator>|</operator>

<name>XVID_ME_EXTSEARCH8</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_ADVANCEDDIAMOND8</name> <operator>|</operator>

<name>XVID_ME_HALFPELREFINE8</name> <operator>|</operator>

<name>XVID_ME_CHROMA_PVOP</name> <operator>|</operator>

<name>XVID_ME_CHROMA_BVOP</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_ADVANCEDDIAMOND16</name> <operator>|</operator>

<name>XVID_ME_HALFPELREFINE16</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>|=</operator> <name>XVID_VOP_MODEDECISION_RD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_HALFPELREFINE8_RD</name> <operator>|</operator>

<name>XVID_ME_QUARTERPELREFINE8_RD</name> <operator>|</operator>

<name>XVID_ME_EXTSEARCH_RD</name> <operator>|</operator>

<name>XVID_ME_CHECKPREDICTION_RD</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>&amp;</operator> <name>XVID_VOP_MODEDECISION_RD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>|=</operator> <name>XVID_VOP_FAST_MODEDECISION_RD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_HALFPELREFINE16_RD</name> <operator>|</operator>

<name>XVID_ME_QUARTERPELREFINE16_RD</name></expr>;</expr_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vol_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>gmc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vol_flags</name></name> <operator>|=</operator> <name>XVID_VOL_GMC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_GME_REFINE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vol_flags</name></name> <operator>|=</operator> <name>XVID_VOL_QUARTERPEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_QUARTERPELREFINE16</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name> <operator>&amp;</operator> <name>XVID_VOP_INTER4V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>XVID_ME_QUARTERPELREFINE8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xvid_gbl_init</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_gbl_init</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_gbl_init</name><operator>.</operator><name>cpu_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xvid_global</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XVID_GBL_INIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xvid_gbl_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>width</name></name> <operator>=</operator>

<name><name>x</name><operator>-&gt;</operator><name>xsize</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>height</name></name> <operator>=</operator>

<name><name>x</name><operator>-&gt;</operator><name>ysize</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>zones</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_zones</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_threads</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XVID_VERSION</name> <operator>&lt;=</operator> <literal type="number">0x010303</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>XVID_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010300</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_threads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Too small height for threads &gt; 1."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>plugins</name></name> <operator>=</operator> <name>plugins</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc2pass1</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc2pass1</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name> <operator>||</operator> <operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Xvid: Cannot allocate 2-pass log buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>xvid_ff_2pass</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>param</name> <operator>=</operator> <operator>&amp;</operator><name>rc2pass1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc2pass2</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc2pass2</name><operator>.</operator><name>bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>avpriv_tempfile</name><argument_list>(<argument><expr><literal type="string">"xvidff."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>twopassfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Xvid: Cannot write 2-pass pipe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassfd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Xvid: No 2-pass information loaded for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Xvid: Cannot write to 2-pass pipe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rc2pass2</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>twopassfile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>xvid_plugin_2pass2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>param</name> <operator>=</operator> <operator>&amp;</operator><name>rc2pass2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>single</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>single</name><operator>.</operator><name>bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>xvid_plugin_single</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>param</name> <operator>=</operator> <operator>&amp;</operator><name>single</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>lumi_masking</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>lumi_aq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>lumi_aq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>masking_l</name><operator>.</operator><name>method</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>xvid_plugin_lumimasking</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>param</name> <operator>=</operator>

<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>lumi_masking</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>masking_l</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>variance_aq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>masking_v</name><operator>.</operator><name>method</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>xvid_plugin_lumimasking</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>param</name> <operator>=</operator> <operator>&amp;</operator><name>masking_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>lumi_aq</name></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>variance_aq</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"Both lumi_aq and variance_aq are enabled. The resulting quality"</literal>

<literal type="string">"will be the worse one of the two effects made by the AQ.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>ssim</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>xvid_plugin_ssim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ssim</name><operator>.</operator><name>b_printstat</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>ssim</name></name> <operator>==</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ssim</name><operator>.</operator><name>acc</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>ssim_acc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ssim</name><operator>.</operator><name>cpu_flags</name></name> <operator>=</operator> <name><name>xvid_gbl_init</name><operator>.</operator><name>cpu_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ssim</name><operator>.</operator><name>b_visualize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugins</name><index>[<expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name></expr>]</index></name><operator>.</operator><name>param</name> <operator>=</operator> <operator>&amp;</operator><name>ssim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xvid_correct_framerate</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>fincr</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>fbase</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>max_key_interval</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>max_key_interval</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>min_quant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>min_quant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>min_quant</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>max_quant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>max_quant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>max_quant</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>intra_matrix</name></name> <operator>=</operator>

<name><name>x</name><operator>-&gt;</operator><name>inter_matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>mpeg_quant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>mpeg_quant</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>mpeg_quant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vol_flags</name></name> <operator>|=</operator> <name>XVID_VOL_MPEGQUANT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>inter_matrix</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>vol_flags</name></name> <operator>|=</operator> <name>XVID_VOL_MPEGQUANT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>intra</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>intra_matrix</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>intra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inter</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>inter_matrix</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>inter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>intra</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>intra</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>inter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>frame_drop_ratio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>global</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>global</name></name> <operator>|=</operator> <name>XVID_GLOBAL_CLOSED_GOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xvid_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quicktime_format</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quicktime_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"xvid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>max_bframes</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>bquant_offset</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>bquant_ratio</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>quicktime_format</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xvid_enc_create</name><operator>.</operator><name>global</name></name> <operator>|=</operator> <name>XVID_GLOBAL_PACKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>xvid_enc_create</name><operator>.</operator><name>num_plugins</name></name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>ssim</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>variance_aq</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>lumi_aq</name></name><operator>)</operator> <operator>&lt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>plugins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quicktime_format</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>got_packet</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xerr</name> <operator>=</operator> <call><name>xvid_encore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XVID_ENC_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xvid_enc_create</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>xerr</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Xvid: Could not create encoder reference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name> <operator>=</operator> <name><name>xvid_enc_create</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>size</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xvid_encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>got_packet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xvid_encore</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name></expr></argument>, <argument><expr><name>XVID_ENC_DESTROY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xerr</name> <operator>=</operator> <call><name>xvid_encore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>XVID_ENC_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xvid_enc_create</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Xvid: Could not create encoder reference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name> <operator>=</operator> <name><name>xvid_enc_create</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xvid_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xerr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>user_packet</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name> <init>= <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name> <init>= <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_enc_frame_t</name></type> <name>xvid_enc_frame</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xvid_enc_stats_t</name></type> <name>xvid_enc_stats</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>mb_width</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>mb_height</name><operator>*</operator><name>MAX_MB_BYTES</name> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_stats</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>XVID_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>bitstream</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Xvid: Color spaces other than 420P not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>input</name><operator>.</operator><name>csp</name></name> <operator>=</operator> <name>XVID_CSP_PLANAR</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>input</name><operator>.</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>input</name><operator>.</operator><name>stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>vop_flags</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>vop_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>vol_flags</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>vol_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>motion</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>me_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>type</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr> ?</condition><then> <expr><name>XVID_TYPE_IVOP</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr> ?</condition><then> <expr><name>XVID_TYPE_PVOP</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr> ?</condition><then> <expr><name>XVID_TYPE_BVOP</name></expr> </then><else>:

<expr><name>XVID_TYPE_AUTO</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid pixel aspect ratio %i/%i, limit is 255/255 reducing\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>par</name></name> <operator>=</operator> <name>XVID_PAR_EXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>par_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>par_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>quant</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>quality</name></name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>quant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>quant_intra_matrix</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xvid_enc_frame</name><operator>.</operator><name>quant_inter_matrix</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xerr</name> <operator>=</operator> <call><name>xvid_encore</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name></expr></argument>, <argument><expr><name>XVID_ENC_ENCODE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>xvid_enc_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xvid_enc_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xerr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xvid_enc_stats</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>XVID_TYPE_PVOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>xvid_enc_stats</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>XVID_TYPE_BVOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>xvid_enc_stats</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>XVID_TYPE_SVOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_S</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>xvid_enc_stats</name><operator>.</operator><name>quant</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>xvid_enc_stats</name><operator>.</operator><name>quant</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xvid_enc_frame</name><operator>.</operator><name>out_flags</name></name> <operator>&amp;</operator> <name>XVID_KEYFRAME</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quicktime_format</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xvid_strip_vol_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>,

<argument><expr><name><name>xvid_enc_stats</name><operator>.</operator><name>hlength</name></name></expr></argument>, <argument><expr><name>xerr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>xerr</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>user_packet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xerr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Xvid: Encoding Error Occurred: %i\n"</literal></expr></argument>, <argument><expr><name>xerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xvid_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>xvid_context</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xvid_encore</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name></expr></argument>, <argument><expr><name>XVID_ENC_DESTROY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>encoder_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>twopassbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>old_twopassbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>twopassfd</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>twopassfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>twopassfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>twopassfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>twopassfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct xvid_context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"lumi_aq"</literal></expr>, <expr><literal type="string">"Luminance masking AQ"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lumi_aq</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"variance_aq"</literal></expr>, <expr><literal type="string">"Variance AQ"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>variance_aq</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ssim"</literal></expr>, <expr><literal type="string">"Show SSIM information to stdout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ssim</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"ssim"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"off"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"ssim"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"avg"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"ssim"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frame"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"ssim"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ssim_acc"</literal></expr>, <expr><literal type="string">"SSIM accuracy"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ssim_acc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gmc"</literal></expr>, <expr><literal type="string">"use GMC"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gmc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"me_quality"</literal></expr>, <expr><literal type="string">"Motion estimation quality"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>me_quality</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mpeg_quant"</literal></expr>, <expr><literal type="string">"Use MPEG quantizers instead of H.263"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mpeg_quant</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>xvid_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libxvid"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libxvid_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libxvid"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libxvidcore MPEG-4 part 2"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>xvid_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>xvid_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>xvid_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>xvid_encode_close</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xvid_class</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libxvid"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
