<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\snowenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow_dwt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangecoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name> <operator>==</operator> <name>DWT_97</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The 9/7 wavelet is incompatible with lossless mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pred</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_4MV</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>diag_mc</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>htaps</name><operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>hcoeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>hcoeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>hcoeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>fast_mc</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_snow_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_snow_alloc_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>bit_rate</name></name><operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lmin</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>mb_lmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lmax</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>mb_lmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_num</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>temp</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>scratchpad</name></name><operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>+</operator><literal type="number">64</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>map</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>ME_MAP_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>score_map</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>ME_MAP_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name><operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>MB_SIZE</name><operator>*</operator><name>MB_SIZE</name><operator>*</operator><literal type="number">12</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>scratchpad</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>map</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>score_map</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h263_encode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_REF_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PASS2</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rate_control_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pass1_rc</name></name><operator>=</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_FLAG_QSCALE</name><operator>|</operator><name>AV_CODEC_FLAG_PASS2</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_type</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel format not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel format invalid or unknown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_cmp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_snow_get_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>==</operator> <name>FF_ME_ITER</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int16_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_scores</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ref_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_sum</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name> <operator>-</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_norm1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sq</name> <init>= <expr><name>ff_square_tab</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name> <operator>-</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_penalty_factor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lambda2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{<block_content>

<switch>switch<condition>(<expr><name>type</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<default>default:</default>

<case>case <expr><name>FF_CMP_SAD</name></expr>:</case>

<return>return <expr><name>lambda</name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</return>

<case>case <expr><name>FF_CMP_DCT</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>FF_CMP_W53</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator></expr>;</return>

<case>case <expr><name>FF_CMP_W97</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator></expr>;</return>

<case>case <expr><name>FF_CMP_SATD</name></expr>:</case>

<case>case <expr><name>FF_CMP_DCT264</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</return>

<case>case <expr><name>FF_CMP_RD</name></expr>:</case>

<case>case <expr><name>FF_CMP_PSNR</name></expr>:</case>

<case>case <expr><name>FF_CMP_SSE</name></expr>:</case>

<case>case <expr><name>FF_CMP_NSSE</name></expr>:</case>

<return>return <expr><name>lambda2</name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</return>

<case>case <expr><name>FF_CMP_BIT</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_LEFT</name></cpp:macro> <cpp:value>P[1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_TOP</name></cpp:macro> <cpp:value>P[2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_TOPRIGHT</name></cpp:macro> <cpp:value>P[3]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_MEDIAN</name></cpp:macro> <cpp:value>P[4]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_MV1</name></cpp:macro> <cpp:value>P[9]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_QPEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_q_branch</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_state</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_state</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbbak</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbbak_start</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>score2</name></decl>, <decl><type ref="prev"/><name>iscore</name></decl>, <decl><type ref="prev"/><name>i_len</name></decl>, <decl><type ref="prev"/><name>p_len</name></decl>, <decl><type ref="prev"/><name>block_s</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>base_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rem_depth</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>-</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>w</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_w</name><init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>LOG2_MB_SIZE</name> <operator>-</operator> <name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trx</name><init>= <expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>try</name><init>= <expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><ternary><condition><expr><name>trx</name><operator>&lt;</operator><name>w</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>bottom</name><init>= <expr><ternary><condition><expr><name>try</name><operator>&lt;</operator><name>h</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>+</operator><name>w</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tl</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>trx</name><operator>&lt;</operator><name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>level</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>rem_depth</name><operator>)</operator></expr>]</index></name></expr> </then><else>: <expr><name>tl</name></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pl</name> <init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcb</name><init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcr</name><init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pmx</name></decl>, <decl><type ref="prev"/><name>pmy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>my</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>cr</name></decl>,<decl><type ref="prev"/><name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvstride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>current_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>= <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator> <name>stride</name><operator>)</operator><operator>*</operator><name>block_w</name></expr>,

<expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>*</operator><name>block_w</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>*</operator><name>uvstride</name><operator>*</operator><name>block_w</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>)</operator></expr>,

<expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>*</operator><name>block_w</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>*</operator><name>uvstride</name><operator>*</operator><name>block_w</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>last_mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpel</name><init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name><init>= <expr><literal type="number">1</literal><operator>+</operator><name>qpel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>left</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>top</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>mx</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>mx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>my</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>my</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_context</name><init>= <expr><literal type="number">2</literal><operator>*</operator><name><name>left</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>top</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <name><name>tl</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <name><name>tr</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref</name></decl>, <decl><type ref="prev"/><name>best_ref</name></decl>, <decl><type ref="prev"/><name>ref_score</name></decl>, <decl><type ref="prev"/><name>ref_mx</name></decl>, <decl><type ref="prev"/><name>ref_my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK_INTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>tr</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>tr</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>bottom</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>bottom</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_stride</name></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_x</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_y</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator> <name>stride</name></name> <operator>==</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name> <operator>==</operator> <name>uvstride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_penalty_factor</name></name><operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>f_code</name></name><operator>=</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <operator>-</operator> <name>x</name><operator>*</operator><name>block_w</name> <operator>-</operator> <literal type="number">16</literal><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <operator>-</operator> <name>y</name><operator>*</operator><name>block_w</name> <operator>-</operator> <literal type="number">16</literal><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>block_w</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>&lt;&lt;</operator><operator>(</operator><name>LOG2_MB_SIZE</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>block_w</name> <operator>+</operator> <operator>(</operator><name>h</name><operator>&lt;&lt;</operator><operator>(</operator><name>LOG2_MB_SIZE</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>score</name><operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_ref</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ref</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ref</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name></expr>;</condition> <incr><expr><name>ref</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>init_ref</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>current_data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>ref</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>block_w</name><operator>*</operator><name>x</name></expr></argument>, <argument><expr><name>block_w</name><operator>*</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_score</name><operator>=</operator> <call><name>ff_epzs_motion_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_my</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_mv</name></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><name>shift</name></expr></argument>, <argument><expr><name>level</name><operator>-</operator><name>LOG2_MB_SIZE</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>block_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>ref_mx</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>ref_mx</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>ref_my</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>ref_my</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_score</name><operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_my</name></expr></argument>, <argument><expr><name>ref_score</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>level</name><operator>-</operator><name>LOG2_MB_SIZE</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>block_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_score</name><operator>=</operator> <call><name>ff_get_mb_score</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>ref_mx</name></expr></argument>, <argument><expr><name>ref_my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>level</name><operator>-</operator><name>LOG2_MB_SIZE</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_score</name><operator>+=</operator> <literal type="number">2</literal><operator>*</operator><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>ref</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>penalty_factor</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>ref</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>ref</name></expr>]</index><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>ref_mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>ref</name></expr>]</index><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>ref_my</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_scores</name><index>[<expr><name>ref</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>=</operator> <name>ref_score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&gt;</operator> <name>ref_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name><operator>=</operator> <name>ref_score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_ref</name><operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name><operator>=</operator> <name>ref_mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name><operator>=</operator> <name>ref_my</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>base_bits</name><operator>=</operator> <call><name>get_rac_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pc</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>bytestream_start</name></name><operator>=</operator>

<name><name>pc</name><operator>.</operator><name>bytestream</name></name><operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>!=</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_state</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>s_context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_state</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <name><name>top</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>ref_context</name></expr>]</index></name></expr></argument>, <argument><expr><name>best_ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmy</name></expr></argument>, <argument><expr><name>best_ref</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><operator>(</operator><name>mx_context</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>!</operator><operator>!</operator><name>best_ref</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>mx</name> <operator>-</operator> <name>pmx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><operator>(</operator><name>my_context</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>!</operator><operator>!</operator><name>best_ref</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>my</name> <operator>-</operator> <name>pmy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_len</name><operator>=</operator> <name><name>pc</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>pc</name><operator>.</operator><name>bytestream_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>*</operator><operator>(</operator><call><name>get_rac_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call><operator>-</operator><name>base_bits</name><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_s</name><operator>=</operator> <name>block_w</name><operator>*</operator><name>block_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>pix_sum</name><argument_list>(<argument><expr><name><name>current_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>=</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name>block_s</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><name>block_s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>iscore</name> <operator>=</operator> <call><name>pix_norm1</name><argument_list>(<argument><expr><name><name>current_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>l</name><operator>*</operator><name>sum</name> <operator>+</operator> <name>l</name><operator>*</operator><name>l</name><operator>*</operator><name>block_s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_s</name><operator>=</operator> <name>block_w</name><operator>*</operator><name>block_w</name><operator>&gt;&gt;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>pix_sum</name><argument_list>(<argument><expr><name><name>current_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvstride</name></expr></argument>, <argument><expr><name>block_w</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name>block_w</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name><operator>=</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name>block_s</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><name>block_s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>pix_sum</name><argument_list>(<argument><expr><name><name>current_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvstride</name></expr></argument>, <argument><expr><name>block_w</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name>block_w</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name><operator>=</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name>block_s</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><name>block_s</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>cr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ic</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>.</operator><name>bytestream_start</name></name><operator>=</operator>

<name><name>ic</name><operator>.</operator><name>bytestream</name></name><operator>=</operator> <name>i_buffer</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>i_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>!=</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>i_state</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>s_context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>i_state</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <name><name>top</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>i_state</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name>l</name><operator>-</operator><name>pl</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>i_state</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cb</name><operator>-</operator><name>pcb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>i_state</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cr</name><operator>-</operator><name>pcr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name><operator>=</operator> <name><name>ic</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>ic</name><operator>.</operator><name>bytestream_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iscore</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>*</operator><operator>(</operator><call><name>get_rac_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>)</argument_list></call><operator>-</operator><name>base_bits</name><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>iscore</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>*</operator><literal type="number">255</literal><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>iscore</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>l</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name><operator>&lt;=</operator><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>pl</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pl</name><operator>&lt;=</operator><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>varc</name><init>= <expr><name>iscore</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vard</name><init>= <expr><name>score</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vard</name> <operator>&lt;=</operator> <literal type="number">64</literal> <operator>||</operator> <name>vard</name> <operator>&lt;</operator> <name>varc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scene_change_score</name></name><operator>+=</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>vard</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>varc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scene_change_score</name></name><operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>qscale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>!=</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>s_context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name> <operator>=</operator> <call><name>encode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name><operator>+=</operator> <call><name>encode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name><operator>+=</operator> <call><name>encode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name><operator>+=</operator> <call><name>encode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name><operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>score2</name> <operator>&lt;</operator> <name>score</name> <operator>&amp;&amp;</operator> <name>score2</name> <operator>&lt;</operator> <name>iscore</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>score2</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>iscore</name> <operator>&lt;</operator> <name>score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pbbak</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name><operator>=</operator> <name>ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>=</operator> <name>pbbak_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name><operator>=</operator> <name>pbbak</name> <operator>+</operator> <name>i_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>, <argument><expr><name>pmx</name></expr></argument>, <argument><expr><name>pmy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK_INTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><name>i_state</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>iscore</name></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pbbak</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>p_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name><operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>=</operator> <name>pbbak_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name><operator>=</operator> <name>pbbak</name> <operator>+</operator> <name>p_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>best_ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><name>p_state</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>score</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_q_branch2</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rem_depth</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>-</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>w</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trx</name><init>= <expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tl</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>trx</name><operator>&lt;</operator><name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>level</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>rem_depth</name><operator>)</operator></expr>]</index></name></expr> </then><else>: <expr><name>tl</name></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pl</name> <init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcb</name><init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcr</name><init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pmx</name></decl>, <decl><type ref="prev"/><name>pmy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>left</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>top</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>mx</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>mx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>my</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>my</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_context</name><init>= <expr><literal type="number">2</literal><operator>*</operator><name><name>left</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>top</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <name><name>tl</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <name><name>tr</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK_INTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>!=</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>same_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>same_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><name>w</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>same_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>s_context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>s_context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_q_branch2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_q_branch2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_q_branch2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_q_branch2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>BLOCK_INTRA</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>type</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>top</name><operator>-&gt;</operator><name>type</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name>pl</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>pcb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name>pcr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pmx</name></expr></argument>, <argument><expr><name>pmy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK_INTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmy</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>type</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>top</name><operator>-&gt;</operator><name>type</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>ref_context</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>mx_context</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mx</name></name> <operator>-</operator> <name>pmx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>my_context</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>my</name></name> <operator>-</operator> <name>pmy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mx</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>my</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_dc</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_index</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_w</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>obmc_stride</name><init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>block_size</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">2</literal><operator>*</operator><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ref_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><name><name>s</name><operator>-&gt;</operator> <name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>dst</name><init>= <expr><operator>(</operator><name>IDWTELEM</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name> <operator>+</operator> <name>plane_index</name><operator>*</operator><name>block_size</name><operator>*</operator><name>block_size</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name>b_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name></type> <name>backup</name><init>= <expr><operator>*</operator><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ab</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aa</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>type</name></name><operator>|=</operator> <name>BLOCK_INTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obmc_stride</name><operator>*</operator><name>obmc_stride</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x2</name><init>= <expr><name>mb_x</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y2</name><init>= <expr><name>mb_y</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>= <expr><name>block_w</name><operator>*</operator><name>mb_x2</name> <operator>+</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>= <expr><name>block_h</name><operator>*</operator><name>mb_y2</name> <operator>+</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_yblock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>block_w</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>obmc_stride</name><operator>*</operator><name>block_h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obmc</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>mb_x2</name></expr></argument>, <argument><expr><name>mb_y2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y2</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>y2</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>block_h</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y2</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x2</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x2</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>block_w</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x2</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><name>x2</name><operator>-</operator><operator>(</operator><name>block_w</name><operator>*</operator><name>mb_x</name> <operator>-</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y2</name><operator>-</operator><operator>(</operator><name>block_h</name><operator>*</operator><name>mb_y</name> <operator>-</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>obmc_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obmc_v</name><init>= <expr><name><name>obmc</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>obmc_v</name> <operator>+=</operator> <name><name>obmc</name><index>[<expr><name>index</name> <operator>+</operator> <name>block_h</name><operator>*</operator><name>obmc_stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>obmc_v</name> <operator>+=</operator> <name><name>obmc</name><index>[<expr><name>index</name> <operator>+</operator> <name>block_w</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name><operator>+</operator><name>block_h</name><operator>&gt;</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>obmc_v</name> <operator>+=</operator> <name><name>obmc</name><index>[<expr><name>index</name> <operator>-</operator> <name>block_h</name><operator>*</operator><name>obmc_stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>+</operator><name>block_w</name><operator>&gt;</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>obmc_v</name> <operator>+=</operator> <name><name>obmc</name><index>[<expr><name>index</name> <operator>-</operator> <name>block_w</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name><name>dst</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>FRAC_BITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ab</name> <operator>+=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x2</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>d</name><operator>&gt;&gt;</operator><name>FRAC_BITS</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>obmc_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aa</name> <operator>+=</operator> <name>obmc_v</name> <operator>*</operator> <name>obmc_v</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>b</name><operator>=</operator> <name>backup</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip_uint8</name><argument_list>( <argument><expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>ab</name><operator>&lt;&lt;</operator><name>LOG2_OBMC_MAX</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_block_bits</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name><operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>b_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>b_stride</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tl</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>b_stride</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><name>w</name><operator>&lt;</operator><name>b_stride</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>b_stride</name><operator>+</operator><name>w</name></expr>]</index></name></expr> </then><else>: <expr><name>tl</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmx</name></decl>, <decl><type ref="prev"/><name>dmy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>x</name><operator>&gt;=</operator><name>b_stride</name> <operator>||</operator> <name>y</name><operator>&gt;=</operator><name>b_height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>BLOCK_INTRA</name></expr>)</condition><block>{<block_content>

<return>return <expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmy</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dmx</name><operator>-=</operator> <name><name>b</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dmy</name><operator>-=</operator> <name><name>b</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>dmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> 

<operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>dmy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>get_block_rd</name><argument_list>(<argument><expr><name>SnowContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>mb_x</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>, <argument><expr><name>int</name> <name>plane_index</name></expr></argument>, <argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>obmc_edged</name></expr></argument>)</argument_list></call><index>[<expr><name>MB_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_w</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>obmc_stride</name><init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>block_size</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">2</literal><operator>*</operator><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ref_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><name><name>s</name><operator>-&gt;</operator> <name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>pred</name><init>= <expr><operator>(</operator><name>IDWTELEM</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name> <operator>+</operator> <name>plane_index</name><operator>*</operator><name>block_size</name><operator>*</operator><name>block_size</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>emu_edge_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name><operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>distortion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>penalty_factor</name><init>= <expr><call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name><init>= <expr><name>block_w</name><operator>*</operator><name>mb_x</name> <operator>-</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sy</name><init>= <expr><name>block_h</name><operator>*</operator><name>mb_y</name> <operator>-</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x0</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><name>sx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y0</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><name>sy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>block_w</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><name>sx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y1</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>block_h</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name><operator>-</operator><name>sy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_snow_pred_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>block_w</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>block_h</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name>b_stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>y0</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>y1</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc1</name><init>= <expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IDWTELEM</name> <modifier>*</modifier></type><name>pred1</name> <init>= <expr><name>pred</name> <operator>+</operator> <name>y</name><operator>*</operator><name>obmc_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur1</name> <init>= <expr><name>cur</name> <operator>+</operator> <name>y</name><operator>*</operator><name>ref_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <operator>(</operator><name>sy</name><operator>+</operator><name>y</name><operator>)</operator><operator>*</operator><name>ref_stride</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><name>x0</name></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>x1</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FRAC_BITS</name> <operator>&gt;=</operator> <name>LOG2_OBMC_MAX</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name><name>cur1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>obmc1</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>FRAC_BITS</name> <operator>-</operator> <name>LOG2_OBMC_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name><name>cur1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>obmc1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>LOG2_OBMC_MAX</name> <operator>-</operator> <name>FRAC_BITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>LOG2_OBMC_MAX</name> <operator>-</operator> <name>FRAC_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>+</operator> <name><name>pred1</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name><operator>=</operator> <operator>~</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>LOG2_OBMC_MAX</name> <operator>==</operator> <literal type="number">8</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>mb_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mb_x</name> <operator>==</operator> <name>b_stride</name><operator>-</operator><literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>mb_y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mb_y</name> <operator>==</operator> <name>b_height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mb_x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>block_w</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>block_w</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>block_h</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>block_h</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>y0</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>y1</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sx</name><operator>+</operator><name>x0</name> <operator>+</operator> <operator>(</operator><name>sy</name><operator>+</operator><name>y</name><operator>)</operator><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>x0</name> <operator>+</operator> <name>y</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>x1</name><operator>-</operator><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block_w</name><operator>==</operator><literal type="number">16</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>==</operator> <name>FF_CMP_W97</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>distortion</name> <operator>=</operator> <call><name>ff_w97_32_c</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>==</operator> <name>FF_CMP_W53</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>distortion</name> <operator>=</operator> <call><name>ff_w53_32_c</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name>distortion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>sx</name><operator>+</operator><literal type="number">16</literal><operator>*</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sy</name><operator>+</operator><literal type="number">16</literal><operator>*</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>ref_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>distortion</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name><operator>,</operator> <name>src</name> <operator>+</operator> <name>off</name><operator>,</operator> <name>dst</name> <operator>+</operator> <name>off</name><operator>,</operator> <name>ref_stride</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>block_w</name><operator>==</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>distortion</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name><operator>,</operator> <name>src</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>ref_stride</name><operator>,</operator> <name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>ref_stride</name><operator>,</operator> <name>ref_stride</name><operator>,</operator> <name>block_w</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>plane_index</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>rate</name> <operator>+=</operator> <call><name>get_block_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>mb_y</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>mb_x</name> <operator>==</operator> <name>b_stride</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rate</name> <operator>+=</operator> <call><name>get_block_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>distortion</name> <operator>+</operator> <name>rate</name><operator>*</operator><name>penalty_factor</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_4block_rd</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_index</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_w</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>obmc_stride</name><init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>block_size</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">2</literal><operator>*</operator><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ref_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><name><name>s</name><operator>-&gt;</operator> <name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>IDWTELEM</name></type> <name><name>zero_dst</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>distortion</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>penalty_factor</name><init>= <expr><call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x2</name><init>= <expr><name>mb_x</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>%</operator><literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y2</name><init>= <expr><name>mb_y</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>/</operator><literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>= <expr><name>block_w</name><operator>*</operator><name>mb_x2</name> <operator>+</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>= <expr><name>block_h</name><operator>*</operator><name>mb_y2</name> <operator>+</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_yblock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>zero_dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>obmc</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>mb_x2</name></expr></argument>, <argument><expr><name>mb_y2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y2</name><operator>=</operator> <name>y</name></expr>;</init> <condition><expr><name>y2</name><operator>&lt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>y2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>y2</name><operator>=</operator> <name>h</name></expr>;</init> <condition><expr><name>y2</name><operator>&lt;</operator><name>y</name><operator>+</operator><name>block_h</name></expr>;</condition> <incr><expr><name>y2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y2</name><operator>=</operator> <name>y</name></expr>;</init> <condition><expr><name>y2</name><operator>&lt;</operator><name>y</name><operator>+</operator><name>block_h</name></expr>;</condition> <incr><expr><name>y2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>+</operator><name>block_w</name> <operator>&gt;</operator> <name>w</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y2</name><operator>=</operator> <name>y</name></expr>;</init> <condition><expr><name>y2</name><operator>&lt;</operator><name>y</name><operator>+</operator><name>block_h</name></expr>;</condition> <incr><expr><name>y2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>y2</name><operator>*</operator><name>ref_stride</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>block_w</name> <operator>-</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>block_w</name><operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>block_w</name><operator>==</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>distortion</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_cmp</name><index>[<expr><name>block_w</name><operator>==</operator><literal type="number">8</literal></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name><operator>,</operator> <name>src</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>ref_stride</name><operator>,</operator> <name>dst</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>ref_stride</name><operator>,</operator> <name>ref_stride</name><operator>,</operator> <name>block_h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>plane_index</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>mb_x</name><operator>+</operator><name>mb_y</name><operator>*</operator><name>b_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>merged</name><init>= <expr><call><name>same_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>same_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><name>b_stride</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>same_block</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><name>b_stride</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>merged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>get_block_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><ternary><condition><expr><name>merged</name></expr>?</condition><then><expr><literal type="number">4</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dxy</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rate</name> <operator>+=</operator> <call><name>get_block_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>+</operator> <name><name>dxy</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_y</name> <operator>+</operator> <name><name>dxy</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>distortion</name> <operator>+</operator> <name>rate</name><operator>*</operator><name>penalty_factor</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_subband_c0run</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IDWTELEM</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>runs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>run_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run_index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_index</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>t</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>lt</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>w</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>rt</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>l</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>px</name><init>= <expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>py</name><init>= <expr><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>px</name><operator>&lt;</operator><name><name>b</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name>py</name><operator>&lt;</operator><name><name>b</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>parent</name><index>[<expr><name>px</name> <operator>+</operator> <name>py</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>l</name><operator>|</operator><name>lt</name><operator>|</operator><name>t</name><operator>|</operator><name>rt</name><operator>|</operator><name>p</name><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>v</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>runs</name><index>[<expr><name>run_index</name><operator>++</operator></expr>]</index></name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>max_index</name><operator>=</operator> <name>run_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>runs</name><index>[<expr><name>run_index</name><operator>++</operator></expr>]</index></name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run_index</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator> <name><name>runs</name><index>[<expr><name>run_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>, <argument><expr><name>max_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>run_index</name> <operator>&lt;=</operator> <name>max_index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_symbol2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>&lt;</operator> <name>w</name><operator>*</operator><literal type="number">40</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoded frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>t</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>lt</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>w</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>rt</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>l</name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>px</name><init>= <expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>py</name><init>= <expr><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>px</name><operator>&lt;</operator><name><name>b</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name>py</name><operator>&lt;</operator><name><name>b</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>parent</name><index>[<expr><name>px</name> <operator>+</operator> <name>py</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name><operator>|</operator><name>lt</name><operator>|</operator><name>t</name><operator>|</operator><name>rt</name><operator>|</operator><name>p</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>context</name></expr>]</index></name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>run</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>run</name><operator>=</operator> <name><name>runs</name><index>[<expr><name>run_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>run_index</name> <operator>&lt;=</operator> <name>max_index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_symbol2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>run</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l2</name><init>= <expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>l</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t2</name><init>= <expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>t</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_symbol2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>context</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>context</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>ff_quant3bA</name><index>[<expr><name>l2</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>ff_quant3bA</name><index>[<expr><name>t2</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name><operator>&lt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_subband</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IDWTELEM</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><call><name>encode_subband_c0run</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>check_block</name><argument_list>(<argument><expr><name>SnowContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>mb_x</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>, <argument><expr><name>int</name> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>int</name> <name>intra</name></expr></argument>, <argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>obmc_edged</name></expr></argument>)</argument_list></call><index>[<expr><name>MB_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>best_rd</name></expr></argument>)</argument_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>block</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>b_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name></type> <name>backup</name><init>= <expr><operator>*</operator><name>block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mb_x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_y</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mb_x</name><operator>&lt;</operator><name>b_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>intra</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>BLOCK_INTRA</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>index</name><operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>*</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>ME_CACHE_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>me_cache_generation</name></name> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>ref</name></name><operator>&lt;&lt;</operator><literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name><index>[<expr><name>index</name></expr>]</index></name><operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mx</name></name><operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>my</name></name><operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_INTRA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rd</name><operator>=</operator> <call><name>get_block_rd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_penalty</name></name> <operator>*</operator> <operator>!</operator><operator>!</operator><name>intra</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rd</name> <operator>&lt;</operator> <operator>*</operator><name>best_rd</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>best_rd</name><operator>=</operator> <name>rd</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name><operator>=</operator> <name>backup</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>check_block_inter</name><argument_list>(<argument><expr><name>SnowContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>mb_x</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>, <argument><expr><name>int</name> <name>p0</name></expr></argument>, <argument><expr><name>int</name> <name>p1</name></expr></argument>, <argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>obmc_edged</name></expr></argument>)</argument_list></call><index>[<expr><name>MB_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>best_rd</name></expr></argument>)</argument_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>p0</name></expr>, <expr><name>p1</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>check_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>check_4block_inter</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>best_rd</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>block</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>b_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name></type> <name><name>backup</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>backup</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>b_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>b_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mb_x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_y</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mb_x</name><operator>&lt;</operator><name>b_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>mb_x</name><operator>|</operator><name>mb_y</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>=</operator> <operator>(</operator><name>p0</name> <operator>+</operator> <literal type="number">31</literal><operator>*</operator><name>p1</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>ME_CACHE_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>me_cache_generation</name></name> <operator>+</operator> <operator>(</operator><name>p0</name><operator>&gt;&gt;</operator><literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>p1</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>ref</name></name><operator>&lt;&lt;</operator><literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name><index>[<expr><name>index</name></expr>]</index></name><operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mx</name></name><operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>my</name></name><operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name><operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_INTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>block</name><index>[<expr><name>b_stride</name></expr>]</index></name><operator>=</operator> <name><name>block</name><index>[<expr><name>b_stride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>*</operator><name>block</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rd</name><operator>=</operator> <call><name>get_4block_rd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rd</name> <operator>&lt;</operator> <operator>*</operator><name>best_rd</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>best_rd</name><operator>=</operator> <name>rd</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>backup</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>backup</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>b_stride</name></expr>]</index></name><operator>=</operator> <name><name>backup</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>b_stride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>backup</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iterative_me</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_height</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name><init>= <expr><name>b_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>RangeCoder</name></type> <name>r</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>mb_y</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<for>for<control>(<init><expr><name>pass</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name><operator>&lt;</operator><literal type="number">25</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>change</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>mb_y</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name><operator>&lt;</operator><name>b_height</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name><operator>&lt;</operator><name>b_width</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dia_change</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_rd</name><init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>ref_rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name></type> <name>backup</name></decl>, <decl><type ref="prev"/><name>ref_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>b_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>block</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>b_stride</name></expr> ]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><ternary><condition><expr><name>mb_x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><ternary><condition><expr><name>mb_x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b_width</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><ternary><condition><expr><name>mb_y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b_height</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>+</operator><name>b_stride</name></expr> ]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>tlb</name><init>= <expr><ternary><condition><expr><name>mb_x</name> <operator>&amp;&amp;</operator> <name>mb_y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>b_stride</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>trb</name><init>= <expr><ternary><condition><expr><name>mb_x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b_width</name> <operator>&amp;&amp;</operator> <name>mb_y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>b_stride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>blb</name><init>= <expr><ternary><condition><expr><name>mb_x</name> <operator>&amp;&amp;</operator> <name>mb_y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b_height</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>+</operator><name>b_stride</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>brb</name><init>= <expr><ternary><condition><expr><name>mb_x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b_width</name> <operator>&amp;&amp;</operator> <name>mb_y</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>b_height</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>+</operator><name>b_stride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_w</name><init>= <expr><operator>(</operator><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>obmc_edged</name><index>[<expr><name>MB_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>MB_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>BLOCK_OPT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>BLOCK_OPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backup</name><operator>=</operator> <operator>*</operator><name>block</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>me_cache_generation</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache_generation</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_w</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>b_w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>b_w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>mb_x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>b_w</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>b_w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_x</name><operator>==</operator><name>b_stride</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>b_w</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>b_w</name></expr></argument>, <argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>b_w</name></expr>]</index></name> <operator>+</operator> <name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>b_w</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>b_w</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obmc_edged</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>obmc_edged</name><index>[<expr><name>b_w</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>b_w</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>obmc_edged</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_w</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_y</name><operator>==</operator><name>b_height</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>b_w</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obmc_edged</name><index>[<expr><name>b_w</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>obmc_edged</name><index>[<expr><name>b_w</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>b_w</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>b_w</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>obmc_edged</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>obmc_edged</name><index>[<expr><name>b_w</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_w</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name>mb_x</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>mb_y</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>mb_x</name><operator>==</operator><name>b_width</name><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>mb_y</name><operator>==</operator><name>b_height</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><name><name>s</name><operator>-&gt;</operator> <name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_w</name><init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name><init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sx</name><init>= <expr><name>block_w</name><operator>*</operator><name>mb_x</name> <operator>-</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sy</name><init>= <expr><name>block_h</name><operator>*</operator><name>mb_y</name> <operator>-</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>sy</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>block_w</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>h</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>sy</name><operator>+</operator><name>block_h</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>block_w</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>sx</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>sy</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>sy</name><operator>+</operator><name>block_h</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sx</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>-</operator><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sx</name><operator>+</operator><name>block_w</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>w</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>sy</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>sy</name><operator>+</operator><name>block_h</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>sx</name><operator>+</operator><name>block_w</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>get_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>type</name></name><operator>&amp;</operator><name>BLOCK_INTRA</name><operator>)</operator></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>color0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>= <expr><block>{<expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>color0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>mx</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>my</name></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ref_b</name><operator>=</operator> <operator>*</operator><name>block</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_rd</name><operator>=</operator> <name>best_rd</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ref</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ref</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name></expr>;</condition> <incr><expr><name>ref</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mvr</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>ref</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_scores</name><index>[<expr><name>ref</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ref_scores</name><index>[<expr><name><name>ref_b</name><operator>.</operator><name>ref</name></name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name><operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_rd</name><operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><operator>-</operator><name>b_stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><operator>-</operator><name>b_stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>lb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><name>b_stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mvr</name><index>[<expr><name>b_stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newx</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>mx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newy</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>my</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dia_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>iterative_dia_size</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>iterative_dia_size</name></name></expr> </then><else>: <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dia_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dia_change</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dia_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dia_change</name> <operator>|=</operator> <call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>newx</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>newy</name><operator>+</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dia_change</name> <operator>|=</operator> <call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>newx</name><operator>-</operator><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>newy</name><operator>-</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dia_change</name> <operator>|=</operator> <call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>newx</name><operator>-</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>newy</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dia_change</name> <operator>|=</operator> <call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>newx</name><operator>+</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>newy</name><operator>-</operator><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><name>j</name><operator>)</operator></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block>while<condition>(<expr><name>dia_change</name></expr>)</condition>;</do>

<do>do<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>square</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>= <expr><block>{<expr><block>{<expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><operator>+</operator><literal type="number">1</literal></expr>,<expr><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><operator>+</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>,}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dia_change</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>dia_change</name> <operator>|=</operator> <call><name>check_block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>mx</name></name><operator>+</operator><name><name>square</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>my</name></name><operator>+</operator><name><name>square</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>while<condition>(<expr><name>dia_change</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>mvr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>mx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>my</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ref_rd</name> <operator>&gt;</operator> <name>best_rd</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ref_rd</name><operator>=</operator> <name>best_rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_b</name><operator>=</operator> <operator>*</operator><name>block</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>best_rd</name><operator>=</operator> <name>ref_rd</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>block</name><operator>=</operator> <name>ref_b</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>obmc_edged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>same_block</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>tb</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tb</name> <operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>lb</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lb</name> <operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rb</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rb</name> <operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bb</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bb</name> <operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>tlb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tlb</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>trb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>trb</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>blb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>blb</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>brb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>brb</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_OPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>change</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pass:%d changed:%d\n"</literal></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>change</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>change</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>mb_y</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name><operator>&lt;</operator><name>b_height</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name><operator>&lt;</operator><name>b_width</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_rd</name></decl>, <decl><type ref="prev"/><name>init_rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name>b_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name>b_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>same_block</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>same_block</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>same_block</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>me_cache_generation</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me_cache_generation</name></name> <operator>+=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>init_rd</name><operator>=</operator> <name>best_rd</name><operator>=</operator> <call><name>get_4block_rd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_4block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>mx</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>mx</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>mx</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>mx</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>my</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>my</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>my</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>my</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name><operator>&amp;</operator><name>BLOCK_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_4block_inter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>mx</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>my</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>init_rd</name> <operator>!=</operator> <name>best_rd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>change</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pass:4mv changed:%d\n"</literal></expr></argument>, <argument><expr><name>change</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_blocks</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>==</operator> <name>FF_ME_ITER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <name>search</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>iterative_me</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>&lt;</operator> <name>w</name><operator>*</operator><name>MB_SIZE</name><operator>*</operator><name>MB_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoded frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>==</operator> <name>FF_ME_ITER</name> <operator>||</operator> <operator>!</operator><name>search</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_q_branch2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_q_branch</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bias</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qlog</name><init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>qlog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QROOT</name><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qmul</name><init>= <expr><name><name>ff_qexp</name><index>[<expr><name>qlog</name><operator>&amp;</operator><operator>(</operator><name>QROOT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name>qlog</name><operator>&gt;&gt;</operator><name>QSHIFT</name><operator>)</operator> <operator>+</operator> <name>ENCODER_EXTRA_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>thres1</name></decl>, <decl><type ref="prev"/><name>thres2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bias</name><operator>=</operator> <ternary><condition><expr><name>bias</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>qmul</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>thres1</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>qmul</name> <operator>-</operator> <name>bias</name><operator>)</operator><operator>&gt;&gt;</operator><name>QEXPSHIFT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>thres2</name><operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>thres1</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bias</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><name>thres1</name><operator>)</operator> <operator>&gt;</operator> <name>thres2</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i</name><operator>&lt;&lt;=</operator> <name>QEXPSHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>/=</operator> <name>qmul</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>i</name><operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>&lt;&lt;=</operator> <name>QEXPSHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>/=</operator> <name>qmul</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><name>thres1</name><operator>)</operator> <operator>&gt;</operator> <name>thres2</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i</name><operator>&lt;&lt;=</operator> <name>QEXPSHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>bias</name><operator>)</operator> <operator>/</operator> <name>qmul</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>i</name><operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>&lt;&lt;=</operator> <name>QEXPSHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>bias</name><operator>)</operator> <operator>/</operator> <name>qmul</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequantize</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qlog</name><init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>qlog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QROOT</name><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qmul</name><init>= <expr><name><name>ff_qexp</name><index>[<expr><name>qlog</name><operator>&amp;</operator><operator>(</operator><name>QROOT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><name>qlog</name><operator>&gt;&gt;</operator><name>QSHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qadd</name><init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name><operator>*</operator><name>qmul</name><operator>)</operator><operator>&gt;&gt;</operator><name>QBIAS_SHIFT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name>i</name><operator>*</operator><name>qmul</name> <operator>+</operator> <name>qadd</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>QEXPSHIFT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator> <name>i</name><operator>*</operator><name>qmul</name> <operator>+</operator> <name>qadd</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>QEXPSHIFT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorrelate</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_median</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>h</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>use_median</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>correlate</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_median</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>use_median</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_qlogs</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>.</operator><name>qlog</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_header</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>kstate</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>kstate</name></expr></argument>, <argument><expr><name>MID_STATE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>kstate</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>always_reset</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_snow_reset_contexts</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_spatial_decomposition_type</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_qlog</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_qbias</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_mv_scale</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_block_max_depth</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_htaps</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_diag_mc</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_hcoeff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_hcoeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>always_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temporal_decomposition_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temporal_decomposition_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_scalability</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_qlogs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>update_mc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>update_mc</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>last_htaps</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>htaps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>update_mc</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>last_diag_mc</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>diag_mc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>update_mc</name> <operator>|=</operator> <operator>!</operator><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_hcoeff</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name>update_mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>update_mc</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>diag_mc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>htaps</name></name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>htaps</name></name><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_spatial_decomposition_count</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_qlogs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_spatial_decomposition_type</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_qlog</name></name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_mv_scale</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_qbias</name></name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_block_max_depth</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_last_header_values</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_diag_mc</name></name><operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>diag_mc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_htaps</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>htaps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_hcoeff</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_spatial_decomposition_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_qlog</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qlog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_qbias</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qbias</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv_scale</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_block_max_depth</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_spatial_decomposition_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qscale2qlog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name>QROOT</name><operator>*</operator><call><name>log2</name><argument_list>(<argument><expr><name>qscale</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>FF_QP2LAMBDA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <literal type="number">61</literal><operator>*</operator><name>QROOT</name><operator>/</operator><literal type="number">8</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ratecontrol_1pass</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>coef_sum</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>, <decl><type ref="prev"/><name>delta_qlog</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>buf</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qlog</name><init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>QROOT</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>qlog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QROOT</name><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qmul</name><init>= <expr><name><name>ff_qexp</name><index>[<expr><name>qlog</name><operator>&amp;</operator><operator>(</operator><name>QROOT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><name>qlog</name><operator>&gt;&gt;</operator><name>QSHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qdiv</name><init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>/</operator><name>qmul</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorrelate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>coef_sum</name><operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>qdiv</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>coef_sum</name> <operator>&lt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coef_sum</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>coef_sum</name> <operator>*</operator> <name>coef_sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pict</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>mb_var_sum</name></name><operator>=</operator> <name>coef_sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var_sum</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var_sum</name></name><operator>=</operator> <name>coef_sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>mb_var_sum</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pict</name><operator>-&gt;</operator><name>quality</name></name><operator>=</operator> <call><name>ff_rate_estimate_qscale</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pict</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>quality</name></name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_qlog</name><operator>=</operator> <call><name>qscale2qlog</name><argument_list>(<argument><expr><name><name>pict</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>qlog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name><operator>+=</operator> <name>delta_qlog</name></expr>;</expr_stmt>

<return>return <expr><name>delta_qlog</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_visual_weight</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>ibuf</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>error</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ibuf</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr>]</index></name><operator>=</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_spatial_idwt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>d</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>width</name></expr>]</index></name><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>+=</operator> <name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>qlog</name></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>QROOT</name> <operator>*</operator> <call><name>log2</name><argument_list>(<argument><expr><literal type="number">352256.0</literal><operator>/</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>, <decl><type ref="prev"/><name>plane_index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rc_header_bak</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rc_block_bak</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name><operator>*</operator><name>MB_SIZE</name><operator>*</operator><name>MB_SIZE</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_init_range_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_build_rac_states</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>/</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">256</literal><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hshift</name><init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vshift</name><init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>pict</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>hshift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>hshift</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></argument>, <argument><expr><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></argument>,

<argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>picture_number</name></name><operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PASS2</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>rc_context</name><operator>.</operator><name>entry</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>]</index></name><operator>.</operator><name>new_pict_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <call><name>ff_rate_estimate_qscale</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name><operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>%</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass1_rc</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>FF_QP2LAMBDA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>=</operator> <call><name>qscale2qlog</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>quality</name></name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>quality</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name><operator>=</operator> <name>LOSSLESS_QLOG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument> , <argument><expr><name>h</name></expr></argument> ,

<argument><expr><name>EDGE_WIDTH</name></expr></argument> , <argument><expr><name>EDGE_WIDTH</name></expr></argument> , <argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name>EDGE_WIDTH</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>, <argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name>EDGE_WIDTH</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>, <argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_snow_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name>av_frame_unref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture_ptr</name></name><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><operator>(</operator><name>width</name> <operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name><init>= <expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>avctx</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator> <name>last_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator> <name>new_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator> <name>last_picture_ptr</name></name><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator> <name>last_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>linesize</name></name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>uvlinesize</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>height</name></name><operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name> <operator>=</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_height</name></name><operator>=</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_stride</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>b8_stride</name></name><operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mb_width</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>f_code</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>motion_est</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>scene_change_score</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>dia_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>dia_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>quarter_sample</name></name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>out_format</name></name><operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>unrestricted_mv</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lambda</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>qscale</name></name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lambda</name></name><operator>*</operator><literal type="number">139</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name><operator>*</operator><literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lambda2</name></name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lambda</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>lambda</name></name> <operator>+</operator> <name>FF_LAMBDA_SCALE</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mecc</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>qdsp</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>hdsp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_me</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>hdsp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mecc</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass1_rc</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rc_header_bak</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rc_block_bak</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>redo_frame</name>:</label>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name><operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>height</name><operator>&gt;&gt;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Resolution too low\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_snow_common_init_after_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_spatial_decomposition_count</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>calculate_visual_weight</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>encode_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>misc_bits</name></name> <operator>=</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mv_bits</name></name> <operator>=</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>misc_bits</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>memc_only</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name><index>[<expr><name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>pict</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>&lt;&lt;</operator><name>FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>predict_plane</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>plane_index</name><operator>==</operator><literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PASS2</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>scene_change_score</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_init_range_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_build_rac_states</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>/</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">256</literal><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name><operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>key_frame</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>redo_frame</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name><index>[<expr><name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name><index>[<expr><name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>FRAC_BITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><name>FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name><index>[<expr><name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name><index>[<expr><name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ENCODER_EXTRA_BITS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_spatial_dwt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_dwt_buffer</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass1_rc</name></name> <operator>&amp;&amp;</operator> <name>plane_index</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta_qlog</name> <init>= <expr><call><name>ratecontrol_1pass</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_qlog</name> <operator>&lt;=</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>delta_qlog</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_init_range_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name>rc_header_bak</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><name>rc_block_bak</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorrelate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>no_bitstream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_subband</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>ibuf</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>parent</name></name><operator>==</operator><name>NULL</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>stride</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>stride</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>correlate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dequantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_spatial_idwt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name><index>[<expr><name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>&lt;&lt;=</operator><name>FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>predict_plane</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>=</operator>

<name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>pict</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>w</name><operator>*</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>predict_plane</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PSNR</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>error</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator> <name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>pict</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>+=</operator> <name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+=</operator> <name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>encoding_error</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_last_header_values</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_snow_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>frame_bits</name></name> <operator>=</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>p_tex_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>frame_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>misc_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>display_picture_number</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>total_bits</name></name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_start</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass1_rc</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_rate_estimate_qscale</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_write_pass1_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>last_pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>pict_type</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STAT_BITS</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>frame_bits</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>misc_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>misc_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>p_tex_bits</name></name></expr>;</expr_stmt>

<function_decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>emms_c</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PSNR</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ERROR_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <init>= <expr><call><name>ff_rac_terminate</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_snow_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_rate_control_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SnowContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"motion_est"</literal></expr>, <expr><literal type="string">"motion estimation algorithm"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>motion_est</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_ME_EPZS</name></expr> }</block></expr>, <expr><name>FF_ME_ZERO</name></expr>, <expr><name>FF_ME_ITER</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion_est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"zero"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_ME_ZERO</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion_est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"epzs"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_ME_EPZS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion_est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"xone"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_ME_XONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion_est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"iter"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_ME_ITER</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion_est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"memc_only"</literal></expr>, <expr><literal type="string">"Only do ME/MC (I frames -&gt; ref, P frame -&gt; ME+MC)."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>memc_only</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"no_bitstream"</literal></expr>, <expr><literal type="string">"Skip final bitstream writeout."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>no_bitstream</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"intra_penalty"</literal></expr>, <expr><literal type="string">"Penalty for intra blocks in block decission"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>intra_penalty</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"iterative_dia_size"</literal></expr>, <expr><literal type="string">"Dia size for the iterative ME"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>iterative_dia_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sc_threshold"</literal></expr>, <expr><literal type="string">"Scene change threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scenechange_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pred"</literal></expr>, <expr><literal type="string">"Spatial decomposition type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>DWT_97</name></expr>, <expr><name>DWT_53</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dwt97"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dwt53"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>snowenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"snow encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_snow_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"snow"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Snow"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SNOW</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SnowContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>snowenc_class</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
