<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cinepakenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVID_HEADER_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIP_HEADER_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_HEADER_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_AREA</name></cpp:macro> <cpp:value>(MB_SIZE * MB_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VECTOR_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEBOOK_MAX</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRIPS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_STRIPS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <name>CinepakMode</name> <block>{

<decl><name>MODE_V1_ONLY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MODE_V1_V4</name></decl>,

<decl><name>MODE_MC</name></decl>,

<decl><name>MODE_COUNT</name></decl>,

}</block></enum></type> <name>CinepakMode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>mb_encoding</name> <block>{

<decl><name>ENC_V1</name></decl>,

<decl><name>ENC_V4</name></decl>,

<decl><name>ENC_SKIP</name></decl>,

<decl><name>ENC_UNCERTAIN</name></decl>

}</block></enum></type> <name>mb_encoding</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mb_info</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>v1_vector</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>v1_error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>v4_vector</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>v4_error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>skip_error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mb_encoding</name></type> <name>best_encoding</name></decl>;</decl_stmt> 

}</block></struct></type> <name>mb_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>strip_info</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>v1_codebook</name><index>[<expr><name>CODEBOOK_MAX</name> <operator>*</operator> <name>VECTOR_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>v4_codebook</name><index>[<expr><name>CODEBOOK_MAX</name> <operator>*</operator> <name>VECTOR_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v1_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v4_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CinepakMode</name></type> <name>mode</name></decl>;</decl_stmt>

}</block></struct></type> <name>strip_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CinepakEncContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>pict_bufs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <modifier>*</modifier><name>strip_buf</name>, <modifier>*</modifier><name>frame_buf</name>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>best_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>scratch_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curframe</name></decl>, <name>keyint</name>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>randctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>lambda</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook_closest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mb_info</name> <modifier>*</modifier></type><name>mb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>min_strips</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_strips</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_extra_cb_iterations</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_empty_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_min_strips</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_max_strips</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>strip_number_delta_range</name></decl>;</decl_stmt>

}</block></struct></type> <name>CinepakEncContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CinepakEncContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"max_extra_cb_iterations"</literal></expr>, <expr><literal type="string">"Max extra codebook recalculation passes, more is better and slower"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_extra_cb_iterations</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"skip_empty_cb"</literal></expr>, <expr><literal type="string">"Avoid wasting bytes, ignore vintage MacOS decoder"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>skip_empty_cb</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_strips"</literal></expr>, <expr><literal type="string">"Limit strips/frame, vintage compatible is 1..3, otherwise the more the better"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_max_strips</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr> }</block></expr>, <expr><name>MIN_STRIPS</name></expr>, <expr><name>MAX_STRIPS</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"min_strips"</literal></expr>, <expr><literal type="string">"Enforce min strips/frame, more is worse and faster, must be &lt;= max_strips"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>min_min_strips</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MIN_STRIPS</name></expr> }</block></expr>, <expr><name>MIN_STRIPS</name></expr>, <expr><name>MAX_STRIPS</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strip_number_adaptivity"</literal></expr>, <expr><literal type="string">"How fast the strip number adapts, more is slightly better, much slower"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>strip_number_delta_range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_STRIPS</name> <operator>-</operator> <name>MIN_STRIPS</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>cinepak_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"cinepak"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cinepak_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>mb_count</name></decl>, <decl><type ref="prev"/><name>strip_buf_size</name></decl>, <decl><type ref="prev"/><name>frame_buf_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width and height must be multiples of four (got %ix%i)\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"minimum number of strips must not exceed maximum (got %i and %i)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>best_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>input_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>mb_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name>MB_AREA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>strip_buf_size</name> <operator>=</operator> <name>STRIP_HEADER_SIZE</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>CHUNK_HEADER_SIZE</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>VECTOR_MAX</name> <operator>*</operator> <name>CODEBOOK_MAX</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>mb_count</name> <operator>+</operator> <operator>(</operator><name>mb_count</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>CODEBOOK_MAX</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_buf_size</name> <operator>=</operator> <name>CVID_HEADER_SIZE</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name> <operator>*</operator> <name>strip_buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strip_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>strip_buf_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>frame_buf_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>mb_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mb_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>enomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_buf_size</name></name> <operator>=</operator> <name>frame_buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyint</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>best_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>enomem</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>calculate_mode_score</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>strip_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>report</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>training_set_v1_shrunk</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>training_set_v4_shrunk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>h</name> <operator>/</operator> <name>MB_AREA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mb_info</name> <modifier>*</modifier></type><name>mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>score1</name></decl>, <decl><type ref="prev"/><name>score2</name></decl>, <decl><type ref="prev"/><name>score3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>v1_size</name></name></expr> ?</condition><then> <expr><name>CHUNK_HEADER_SIZE</name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_size</name></name> <operator>*</operator> <name>entry_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>v4_size</name></name></expr> ?</condition><then> <expr><name>CHUNK_HEADER_SIZE</name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_size</name></name> <operator>*</operator> <name>entry_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<name>CHUNK_HEADER_SIZE</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_V1_ONLY</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>mb_count</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_V1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MODE_V1_V4</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>report</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>training_set_v1_shrunk</name> <operator>=</operator> <operator>*</operator><name>training_set_v4_shrunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mberr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <operator>(</operator><name>mberr</name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">33</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <operator>(</operator><name>mberr</name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_error</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score1</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">33</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_error</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score1</name> <operator>&lt;=</operator> <name>score2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_V1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_V4</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>MODE_MC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>report</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v1_shrunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v4_shrunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>skip_error</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_SKIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score1</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>score2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name><operator>)</operator> <operator>&gt;=</operator> <name>score1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_SKIP</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>v1_shrunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>score3</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">34</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_error</name></name><operator>)</operator> <operator>&gt;=</operator> <name>score1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_SKIP</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>v4_shrunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score3</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>training_set_v1_shrunk</name> <operator>=</operator> <name>v1_shrunk</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>training_set_v4_shrunk</name> <operator>=</operator> <name>v4_shrunk</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>skip_error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score3</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">34</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_error</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score1</name> <operator>&lt;=</operator> <name>score2</name> <operator>&amp;&amp;</operator> <name>score1</name> <operator>&lt;=</operator> <name>score3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>score2</name> <operator>&lt;=</operator> <name>score3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_V1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>score3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>=</operator> <name>ENC_V4</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_chunk_header</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunk_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunk_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>chunk_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chunk_size</name> <operator>+</operator> <name>CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CHUNK_HEADER_SIZE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_codebook</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chunk_type_yuv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunk_type_gray</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>entry_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incremental_codebook_replacement_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_chunk_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then>

<expr><name>chunk_type_yuv</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>incremental_codebook_replacement_mode</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:

<expr><name>chunk_type_gray</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>incremental_codebook_replacement_mode</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><name>entry_size</name> <operator>*</operator> <name>size</name> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name>incremental_codebook_replacement_mode</name></expr> ?</condition><then> <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incremental_codebook_replacement_mode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flagsind</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flagsind</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>entry_size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>codebook</name><index>[<expr><name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>entry_size</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><ternary><condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>flagsind</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>flagsind</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>entry_size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>codebook</name><index>[<expr><name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>entry_size</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><ternary><condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_sub_picture</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name><name>in_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>in_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>out_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>out_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>in_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>in_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_v1_vector</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1_vector</name></decl></parameter>, <parameter><decl><type><name>strip_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>entry_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name><index>[<expr><name>v1_vector</name> <operator>*</operator> <name>entry_size</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name><index>[<expr><name>v1_vector</name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">3</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name><index>[<expr><name>v1_vector</name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name><index>[<expr><name>v1_vector</name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name><index>[<expr><name>v1_vector</name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[ <expr><name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name><index>[<expr><name>v1_vector</name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_v4_vector</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v4_vector</name></decl></parameter>, <parameter><decl><type><name>strip_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>entry_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name><index>[<expr><name><name>v4_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>entry_size</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name><index>[<expr><name><name>v4_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name><index>[<expr><name><name>v4_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name><index>[<expr><name><name>v4_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name><index>[<expr><name><name>v4_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name><index>[<expr><name><name>v4_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>entry_size</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_mb</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>a_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>a_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>b_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MB_SIZE</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>a_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>b_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>MB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MB_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a_data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>a_linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>b_data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>b_linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><name>MB_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_mode</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>scratch_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>scratch_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>last_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>last_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>strip_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>temp_size</name></decl>, <decl><type ref="prev"/><name>header_ofs</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mb_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>h</name> <operator>/</operator> <name>MB_AREA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_extra_bit</name></decl>, <decl><type ref="prev"/><name>should_write_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mb_info</name> <modifier>*</modifier></type><name>mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>sub_scratch_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>sub_last_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sub_scratch_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>sub_last_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>v4_size</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>skip_empty_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>encode_codebook</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>v4_size</name></name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>v1_size</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>skip_empty_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>encode_codebook</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>v1_size</name></name></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>MB_SIZE</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>MB_SIZE</name></expr><operator>,</operator> <expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>scratch_data</name></expr></argument>, <argument><expr><name>scratch_linesize</name></expr></argument>,

<argument><expr><name>sub_scratch_data</name></expr></argument>, <argument><expr><name>sub_scratch_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MC</name> <operator>&amp;&amp;</operator> <name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_SKIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>last_data</name></expr></argument>, <argument><expr><name>last_linesize</name></expr></argument>,

<argument><expr><name>sub_last_data</name></expr></argument>, <argument><expr><name>sub_last_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub_scratch_data</name></expr></argument>, <argument><expr><name>sub_scratch_linesize</name></expr></argument>,

<argument><expr><name>sub_last_data</name></expr></argument>, <argument><expr><name>sub_last_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_V1_ONLY</name> <operator>||</operator> <name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_v1_vector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub_scratch_data</name></expr></argument>, <argument><expr><name>sub_scratch_linesize</name></expr></argument>,

<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>v1_vector</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_v4_vector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub_scratch_data</name></expr></argument>, <argument><expr><name>sub_scratch_linesize</name></expr></argument>,

<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>v4_vector</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_V1_ONLY</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>write_chunk_header</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>v1_vector</name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_V1_V4</name></expr>:</case>

<expr_stmt><expr><name>header_ofs</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>best_encoding</name> <operator>==</operator> <name>ENC_V4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>y</name> <operator>+</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_vector</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_vector</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>write_chunk_header</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>header_ofs</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>ret</name> <operator>-</operator> <name>header_ofs</name> <operator>-</operator> <name>CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_MC</name></expr>:</case>

<expr_stmt><expr><name>header_ofs</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>bits</name> <operator>=</operator> <name>temp_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>!=</operator> <name>ENC_SKIP</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>bits</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_extra_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>should_write_temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>!=</operator> <name>ENC_SKIP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V4</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>bits</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>needs_extra_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_SKIP</name> <operator>||</operator> <name>needs_extra_bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>temp_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>should_write_temp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_extra_bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V4</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>temp_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_vector</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>==</operator> <name>ENC_V4</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>temp_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_vector</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_write_temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>temp_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>temp_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_chunk_header</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>header_ofs</name></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><name>ret</name> <operator>-</operator> <name>header_ofs</name> <operator>-</operator> <name>CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_mb_distortion</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>a_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>a_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>b_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>b_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MB_SIZE</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MB_SIZE</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>a_data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>a_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>b_data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>b_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>d</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MB_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MB_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>a_data</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>a_linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>b_data</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>b_linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>d</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERTAIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) != ENC_UNCERTAIN)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quantize</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1mode</name></decl></parameter>, <parameter><decl><type><name>strip_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>mb_encoding</name></type> <name>encoding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>mbn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook</name> <init>= <expr><ternary><condition><expr><name>v1mode</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>v1_codebook</name></name></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>v4_codebook</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>v1mode</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>v1_size</name></name></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>v4_size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>total_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vq_pict_buf</name><index>[<expr><operator>(</operator><name>MB_AREA</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>sub_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>vq_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sub_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vq_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mbn</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>MB_SIZE</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>MB_SIZE</name></expr><operator>,</operator> <expr><operator>++</operator><name>mbn</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CERTAIN</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>mbn</name></expr>]</index></name><operator>.</operator><name>best_encoding</name> <operator>!=</operator> <name>encoding</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>entry_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v1mode</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>y2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y2</name> <operator>&lt;</operator> <name>entry_size</name></expr>;</condition> <incr><expr><name>y2</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x2</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x2</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <ternary><condition><expr><name>y2</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>x2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <ternary><condition><expr><name>y2</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <ternary><condition><expr><name>shift</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>x2</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>y3</name> <operator>=</operator> <ternary><condition><expr><name>shift</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>y2</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>x3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>y3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>+</operator>

<name><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>x3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>y3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>+</operator>

<name><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>x3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>y3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>+</operator>

<name><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>x3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>y3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>y2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y2</name> <operator>&lt;</operator> <name>MB_SIZE</name></expr>;</condition> <incr><expr><name>y2</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x2</name> <operator>&lt;</operator> <name>MB_SIZE</name></expr>;</condition> <incr><expr><name>x2</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>entry_size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <ternary><condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>k</name> <operator>-</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>x2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y3</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>y2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>y2</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x3</name> <operator>+</operator> <name>y3</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><name>v1mode</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_init_elbg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name></expr></argument>, <argument><expr><name>entry_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>codebook</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_do_elbg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name></expr></argument>, <argument><expr><name>entry_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>codebook</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vq_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vq_pict_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vq_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MB_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vq_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>vq_pict_buf</name><index>[<expr><name>MB_AREA</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vq_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>vq_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>MB_AREA</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vq_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>vq_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MB_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>MB_SIZE</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>MB_SIZE</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mb_info</name> <modifier>*</modifier></type><name>mb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CERTAIN</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mb</name><operator>-&gt;</operator><name>best_encoding</name></name> <operator>!=</operator> <name>encoding</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>sub_data</name></expr></argument>, <argument><expr><name>sub_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v1mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>v1_vector</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_v1_vector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vq_data</name></expr></argument>, <argument><expr><name>vq_linesize</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>v1_vector</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name> <operator>=</operator> <call><name>compute_mb_distortion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub_data</name></expr></argument>, <argument><expr><name>sub_linesize</name></expr></argument>,

<argument><expr><name>vq_data</name></expr></argument>, <argument><expr><name>vq_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_error</name> <operator>+=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v1_error</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>v4_vector</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>decode_v4_vector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vq_data</name></expr></argument>, <argument><expr><name>vq_linesize</name></expr></argument>, <argument><expr><name><name>mb</name><operator>-&gt;</operator><name>v4_vector</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>v4_error</name></name> <operator>=</operator> <call><name>compute_mb_distortion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub_data</name></expr></argument>, <argument><expr><name>sub_linesize</name></expr></argument>,

<argument><expr><name>vq_data</name></expr></argument>, <argument><expr><name>vq_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_error</name> <operator>+=</operator> <name><name>mb</name><operator>-&gt;</operator><name>v4_error</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><name>v1mode</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_skip_errors</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>last_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>last_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>strip_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>sub_last_data</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>sub_pict_data</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sub_last_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sub_pict_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>MB_SIZE</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>MB_SIZE</name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>last_data</name></expr></argument>, <argument><expr><name>last_linesize</name></expr></argument>,

<argument><expr><name>sub_last_data</name></expr></argument>, <argument><expr><name>sub_last_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><name>sub_pict_data</name></expr></argument>, <argument><expr><name>sub_pict_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip_error</name> <operator>=</operator>

<call><name>compute_mb_distortion</name><argument_list>(<argument><expr><name>s</name></expr></argument>,

<argument><expr><name>sub_last_data</name></expr></argument>, <argument><expr><name>sub_last_linesize</name></expr></argument>,

<argument><expr><name>sub_pict_data</name></expr></argument>, <argument><expr><name>sub_pict_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_strip_header</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strip_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>keyframe</name></expr> ?</condition><then> <expr><literal type="number">0x10</literal></expr> </then><else>: <expr><literal type="number">0x11</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>strip_size</name> <operator>+</operator> <name>STRIP_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_strip</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>last_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>last_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>scratch_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>scratch_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>best_score</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>strip_info</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v1enough</name></decl>, <decl><type ref="prev"/><name>v1_size</name></decl>, <decl><type ref="prev"/><name>v4enough</name></decl>, <decl><type ref="prev"/><name>v4_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_v1_size</name></decl>, <decl><type ref="prev"/><name>new_v4_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v1shrunk</name></decl>, <decl><type ref="prev"/><name>v4shrunk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>calculate_skip_errors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>last_data</name></expr></argument>, <argument><expr><name>last_linesize</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALLEST_CODEBOOK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>v1enough</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v1_size</name> <operator>=</operator> <name>SMALLEST_CODEBOOK</name></expr>;</init> <condition><expr><name>v1_size</name> <operator>&lt;=</operator> <name>CODEBOOK_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>v1enough</name></expr>;</condition> <incr><expr><name>v1_size</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>v4enough</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v4_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v4_size</name> <operator>&lt;=</operator> <name>v1_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>v4enough</name></expr>;</condition> <incr><expr><name>v4_size</name> <operator>=</operator> <ternary><condition><expr><name>v4_size</name></expr> ?</condition><then> <expr><name>v4_size</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr> </then><else>: <expr><ternary><condition><expr><name>v1_size</name> <operator>&gt;=</operator> <name>SMALLEST_CODEBOOK</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>v1_size</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>SMALLEST_CODEBOOK</name></expr></else></ternary></expr></else></ternary></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CinepakMode</name></type> <name>mode</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mode</name> <operator>&lt;</operator> <name>MODE_COUNT</name></expr>;</condition> <incr><expr><name>mode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keyframe</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name>MODE_MC</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_V1_ONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>=</operator> <name>v1_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ENC_UNCERTAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>&lt;</operator> <name>v1_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v1enough</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v4_size</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_V1_V4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <name>v4_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ENC_UNCERTAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>&lt;</operator> <name>v4_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v4enough</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>calculate_mode_score</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>v1shrunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v4shrunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MODE_V1_ONLY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>extra_iterations_limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max_extra_cb_iterations</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>=</operator> <name>v1_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_v1_size</name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ENC_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_v1_size</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>v1_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>=</operator> <name>new_v1_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <name>v4_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_v4_size</name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ENC_V4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_v4_size</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>v4_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <name>new_v4_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>calculate_mode_score</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>v1shrunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v4shrunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>v1shrunk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>v4shrunk</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>extra_iterations_limit</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v1shrunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>=</operator> <name>v1_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_v1_size</name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ENC_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_v1_size</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>v1_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v1_size</name></name> <operator>=</operator> <name>new_v1_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v4shrunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <name>v4_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_v4_size</name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>ENC_V4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_v4_size</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>v4_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>v4_size</name></name> <operator>=</operator> <name>new_v4_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>best_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>score</name> <operator>&lt;</operator> <operator>*</operator><name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_size</name> <operator>=</operator> <call><name>encode_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>scratch_data</name></expr></argument>, <argument><expr><name>scratch_linesize</name></expr></argument>,

<argument><expr><name>last_data</name></expr></argument>, <argument><expr><name>last_linesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_buf</name></name> <operator>+</operator> <name>STRIP_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_strip_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_buf</name></name></expr></argument>, <argument><expr><name>best_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>best_size</name> <operator>+=</operator> <name>STRIP_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_buf</name></name></expr></argument>, <argument><expr><name>best_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>best_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_cvid_header</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_strips</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isakeyframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isakeyframe</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data_size</name> <operator>+</operator> <name>CVID_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>num_strips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CVID_HEADER_SIZE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_frame</name><parameter_list>(<parameter><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>isakeyframe</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_strips</name></decl>, <decl><type ref="prev"/><name>strip</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>nexty</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>temp_size</name></decl>, <decl><type ref="prev"/><name>best_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>last_data</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>data</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>scratch_data</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>last_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>scratch_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>score</name></decl>, <decl><type ref="prev"/><name>score_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_nstrips</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ir</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>rr</name></decl>, <decl><type ref="prev"/><name>gg</name></decl>, <decl><type ref="prev"/><name>bb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>scratch_data</name></expr></argument>, <argument><expr><name>scratch_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <name><name>ir</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>i1</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gg</name> <operator>=</operator> <name><name>ir</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>i1</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bb</name> <operator>=</operator> <name><name>ir</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>i1</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>rr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>+=</operator> <name>gg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>bb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>(</operator><literal type="number">2396625</literal> <operator>*</operator> <name>rr</name> <operator>+</operator> <literal type="number">4793251</literal> <operator>*</operator> <name>gg</name> <operator>+</operator> <literal type="number">1198732</literal> <operator>*</operator> <name>bb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rr</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scratch_data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i1</name> <operator>+</operator> <name>i2</name> <operator>*</operator> <name><name>scratch_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">299683</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">599156</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">898839</literal> <operator>*</operator> <name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rr</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scratch_data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rr</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>(</operator><literal type="number">748893</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">599156</literal> <operator>*</operator> <name>g</name> <operator>-</operator> <literal type="number">149737</literal> <operator>*</operator> <name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rr</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scratch_data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rr</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt> 

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>num_strips</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name></expr>;</init> <condition><expr><name>num_strips</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>&amp;&amp;</operator> <name>num_strips</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name>MB_SIZE</name></expr>;</condition> <incr><expr><name>num_strips</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>strip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>strip</name><operator>++</operator></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>nexty</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>strip_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nexty</name> <operator>=</operator> <name>strip</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name>num_strips</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>nexty</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nexty</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>nexty</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>strip_height</name> <operator>=</operator> <name>nexty</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strip_height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"skipping zero height strip %i of %i\n"</literal></expr></argument>, <argument><expr><name>strip</name></expr></argument>, <argument><expr><name>num_strips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>last_data</name></expr></argument>, <argument><expr><name>last_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_sub_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>scratch_data</name></expr></argument>, <argument><expr><name>scratch_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_size</name> <operator>=</operator> <call><name>rd_strip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>strip_height</name></expr></argument>, <argument><expr><name>isakeyframe</name></expr></argument>,

<argument><expr><name>last_data</name></expr></argument>, <argument><expr><name>last_linesize</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><name>scratch_data</name></expr></argument>, <argument><expr><name>scratch_linesize</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_buf</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>CVID_HEADER_SIZE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>score_temp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>temp_size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>score_temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>temp_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>score</name> <operator>&lt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_size</name> <operator>=</operator> <name>size</name> <operator>+</operator> <call><name>write_cvid_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_buf</name></name></expr></argument>, <argument><expr><name>num_strips</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>isakeyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_buf</name></name></expr></argument>, <argument><expr><name>best_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>best_nstrips</name> <operator>=</operator> <name>num_strips</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_strips</name> <operator>-</operator> <name>best_nstrips</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>strip_number_delta_range</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>best_nstrips</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>=</operator> <name>best_nstrips</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>=</operator> <name>best_nstrips</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>=</operator> <name>best_nstrips</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>strip_number_delta_range</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_max_strips</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>=</operator> <name>best_nstrips</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>strip_number_delta_range</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_strips</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_min_strips</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>best_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cinepak_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>quality</name></name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>quality</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal> <operator>*</operator> <name>FF_LAMBDA_SCALE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_buf_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rd_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>keyint</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cinepak_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CinepakEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codebook_closest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pict_bufs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_cinepak_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cinepak"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Cinepak"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_CINEPAK</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CinepakEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cinepak_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>cinepak_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>cinepak_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>cinepak_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
