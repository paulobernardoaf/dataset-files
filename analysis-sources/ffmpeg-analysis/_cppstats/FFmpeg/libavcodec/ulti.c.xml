<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ulti.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ulti_cb.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>UltimotionDecodeContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>, <name>blocks</name>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ulti_codebook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

}</block></struct></type> <name>UltimotionDecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ulti_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UltimotionDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ulti_codebook</name></name> <operator>=</operator> <name>ulti_codebook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ulti_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UltimotionDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>block_coords</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>angle_by_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ulti_lumas</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x28</literal></expr>,

<expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x44</literal></expr>,

<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x60</literal></expr>,

<expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x7C</literal></expr>,

<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x98</literal></expr>,

<expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB3</literal></expr>,

<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCF</literal></expr>,

<expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xEB</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ulti_chromas</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x8D</literal></expr>,

<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xC0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ulti_convert_yuv</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>luma</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_plane</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cr_plane</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cb_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cr_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_plane</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cr_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ulti_chromas</name><index>[<expr><name>chroma</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ulti_chromas</name><index>[<expr><name>chroma</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>y_plane</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ulti_lumas</name><index>[<expr><name><name>luma</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>y_plane</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ulti_pattern</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>f0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Luma</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>f0</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Y1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Y0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>f1</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Y1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Y0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ulti_convert_yuv</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>Luma</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ulti_grad</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>angle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Luma</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>angle</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>&amp;=</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>angle</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ulti_convert_yuv</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>Luma</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ulti_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UltimotionDecodeContext</name> <modifier>*</modifier></type><name>s</name><init>=<expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifier</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uniq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>blocks</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name></name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x70</literal></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x70</literal></expr>:</case> 

<expr_stmt><expr><name>modifier</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>modifier</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"warning: modifier must be 0 or 1, got %i\n"</literal></expr></argument>, <argument><expr><name>modifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x71</literal></expr>:</case> 

<expr_stmt><expr><name>uniq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x72</literal></expr>:</case> 

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>!</operator><name>mode</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x73</literal></expr>:</case> 

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x74</literal></expr>:</case> 

<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>blocks</name> <operator>+</operator> <name>skip</name><operator>)</operator> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>skip</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"warning: unknown escape 0x%02X\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>angle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chroma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>||</operator> <name>uniq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uniq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tx</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>block_coords</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ty</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>block_coords</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>angle_by_index</name><index>[<expr><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x3F</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>modifier</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&amp;=</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ulti_codebook</name><index>[<expr><name>tmp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ulti_codebook</name><index>[<expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ulti_codebook</name><index>[<expr><name>tmp</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ulti_codebook</name><index>[<expr><name>tmp</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>modifier</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Luma</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_be24u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_be24u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_be24u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_be24u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Luma</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ulti_convert_yuv</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>Luma</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ulti_grad</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>f0</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f1</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ulti_pattern</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ulti_grad</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>blocks</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ulti_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ultimotion"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"IBM UltiMotion"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ULTI</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UltimotionDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ulti_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ulti_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ulti_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
