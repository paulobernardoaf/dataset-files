<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\rv34.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_resilience.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg_er.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rectangle.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ZERO8x2</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rv34_mb_type_to_lavc</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>MB_TYPE_INTRA</name></expr>,

<expr><name>MB_TYPE_INTRA16x16</name> <operator>|</operator> <name>MB_TYPE_SEPARATE_DC</name></expr>,

<expr><name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_L0</name></expr>,

<expr><name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_L0</name></expr>,

<expr><name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_L0</name></expr>,

<expr><name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_L1</name></expr>,

<expr><name>MB_TYPE_SKIP</name></expr>,

<expr><name>MB_TYPE_DIRECT2</name> <operator>|</operator> <name>MB_TYPE_16x16</name></expr>,

<expr><name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_L0</name></expr>,

<expr><name>MB_TYPE_8x16</name> <operator>|</operator> <name>MB_TYPE_L0</name></expr>,

<expr><name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_L0L1</name></expr>,

<expr><name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_SEPARATE_DC</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RV34VLC</name></type> <name><name>intra_vlcs</name><index>[<expr><name>NUM_INTRA_TABLES</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inter_vlcs</name><index>[<expr><name>NUM_INTER_TABLES</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_mv</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>table_offs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1818</literal></expr>, <expr><literal type="number">3622</literal></expr>, <expr><literal type="number">4144</literal></expr>, <expr><literal type="number">4698</literal></expr>, <expr><literal type="number">5234</literal></expr>, <expr><literal type="number">5804</literal></expr>, <expr><literal type="number">5868</literal></expr>, <expr><literal type="number">5900</literal></expr>, <expr><literal type="number">5932</literal></expr>,

<expr><literal type="number">5996</literal></expr>, <expr><literal type="number">6252</literal></expr>, <expr><literal type="number">6316</literal></expr>, <expr><literal type="number">6348</literal></expr>, <expr><literal type="number">6380</literal></expr>, <expr><literal type="number">7674</literal></expr>, <expr><literal type="number">8944</literal></expr>, <expr><literal type="number">10274</literal></expr>, <expr><literal type="number">11668</literal></expr>, <expr><literal type="number">12250</literal></expr>,

<expr><literal type="number">14060</literal></expr>, <expr><literal type="number">15846</literal></expr>, <expr><literal type="number">16372</literal></expr>, <expr><literal type="number">16962</literal></expr>, <expr><literal type="number">17512</literal></expr>, <expr><literal type="number">18148</literal></expr>, <expr><literal type="number">18180</literal></expr>, <expr><literal type="number">18212</literal></expr>, <expr><literal type="number">18244</literal></expr>, <expr><literal type="number">18308</literal></expr>,

<expr><literal type="number">18564</literal></expr>, <expr><literal type="number">18628</literal></expr>, <expr><literal type="number">18660</literal></expr>, <expr><literal type="number">18692</literal></expr>, <expr><literal type="number">20036</literal></expr>, <expr><literal type="number">21314</literal></expr>, <expr><literal type="number">22648</literal></expr>, <expr><literal type="number">23968</literal></expr>, <expr><literal type="number">24614</literal></expr>, <expr><literal type="number">26384</literal></expr>,

<expr><literal type="number">28190</literal></expr>, <expr><literal type="number">28736</literal></expr>, <expr><literal type="number">29366</literal></expr>, <expr><literal type="number">29938</literal></expr>, <expr><literal type="number">30608</literal></expr>, <expr><literal type="number">30640</literal></expr>, <expr><literal type="number">30672</literal></expr>, <expr><literal type="number">30704</literal></expr>, <expr><literal type="number">30768</literal></expr>, <expr><literal type="number">31024</literal></expr>,

<expr><literal type="number">31088</literal></expr>, <expr><literal type="number">31120</literal></expr>, <expr><literal type="number">31184</literal></expr>, <expr><literal type="number">32570</literal></expr>, <expr><literal type="number">33898</literal></expr>, <expr><literal type="number">35236</literal></expr>, <expr><literal type="number">36644</literal></expr>, <expr><literal type="number">37286</literal></expr>, <expr><literal type="number">39020</literal></expr>, <expr><literal type="number">40802</literal></expr>,

<expr><literal type="number">41368</literal></expr>, <expr><literal type="number">42052</literal></expr>, <expr><literal type="number">42692</literal></expr>, <expr><literal type="number">43348</literal></expr>, <expr><literal type="number">43380</literal></expr>, <expr><literal type="number">43412</literal></expr>, <expr><literal type="number">43444</literal></expr>, <expr><literal type="number">43476</literal></expr>, <expr><literal type="number">43604</literal></expr>, <expr><literal type="number">43668</literal></expr>,

<expr><literal type="number">43700</literal></expr>, <expr><literal type="number">43732</literal></expr>, <expr><literal type="number">45100</literal></expr>, <expr><literal type="number">46430</literal></expr>, <expr><literal type="number">47778</literal></expr>, <expr><literal type="number">49160</literal></expr>, <expr><literal type="number">49802</literal></expr>, <expr><literal type="number">51550</literal></expr>, <expr><literal type="number">53340</literal></expr>, <expr><literal type="number">53972</literal></expr>,

<expr><literal type="number">54648</literal></expr>, <expr><literal type="number">55348</literal></expr>, <expr><literal type="number">55994</literal></expr>, <expr><literal type="number">56122</literal></expr>, <expr><literal type="number">56154</literal></expr>, <expr><literal type="number">56186</literal></expr>, <expr><literal type="number">56218</literal></expr>, <expr><literal type="number">56346</literal></expr>, <expr><literal type="number">56410</literal></expr>, <expr><literal type="number">56442</literal></expr>,

<expr><literal type="number">56474</literal></expr>, <expr><literal type="number">57878</literal></expr>, <expr><literal type="number">59290</literal></expr>, <expr><literal type="number">60636</literal></expr>, <expr><literal type="number">62036</literal></expr>, <expr><literal type="number">62682</literal></expr>, <expr><literal type="number">64460</literal></expr>, <expr><literal type="number">64524</literal></expr>, <expr><literal type="number">64588</literal></expr>, <expr><literal type="number">64716</literal></expr>,

<expr><literal type="number">64844</literal></expr>, <expr><literal type="number">66076</literal></expr>, <expr><literal type="number">67466</literal></expr>, <expr><literal type="number">67978</literal></expr>, <expr><literal type="number">68542</literal></expr>, <expr><literal type="number">69064</literal></expr>, <expr><literal type="number">69648</literal></expr>, <expr><literal type="number">70296</literal></expr>, <expr><literal type="number">72010</literal></expr>, <expr><literal type="number">72074</literal></expr>,

<expr><literal type="number">72138</literal></expr>, <expr><literal type="number">72202</literal></expr>, <expr><literal type="number">72330</literal></expr>, <expr><literal type="number">73572</literal></expr>, <expr><literal type="number">74936</literal></expr>, <expr><literal type="number">75454</literal></expr>, <expr><literal type="number">76030</literal></expr>, <expr><literal type="number">76566</literal></expr>, <expr><literal type="number">77176</literal></expr>, <expr><literal type="number">77822</literal></expr>,

<expr><literal type="number">79582</literal></expr>, <expr><literal type="number">79646</literal></expr>, <expr><literal type="number">79678</literal></expr>, <expr><literal type="number">79742</literal></expr>, <expr><literal type="number">79870</literal></expr>, <expr><literal type="number">81180</literal></expr>, <expr><literal type="number">82536</literal></expr>, <expr><literal type="number">83064</literal></expr>, <expr><literal type="number">83672</literal></expr>, <expr><literal type="number">84242</literal></expr>,

<expr><literal type="number">84934</literal></expr>, <expr><literal type="number">85576</literal></expr>, <expr><literal type="number">87384</literal></expr>, <expr><literal type="number">87448</literal></expr>, <expr><literal type="number">87480</literal></expr>, <expr><literal type="number">87544</literal></expr>, <expr><literal type="number">87672</literal></expr>, <expr><literal type="number">88982</literal></expr>, <expr><literal type="number">90340</literal></expr>, <expr><literal type="number">90902</literal></expr>,

<expr><literal type="number">91598</literal></expr>, <expr><literal type="number">92182</literal></expr>, <expr><literal type="number">92846</literal></expr>, <expr><literal type="number">93488</literal></expr>, <expr><literal type="number">95246</literal></expr>, <expr><literal type="number">95278</literal></expr>, <expr><literal type="number">95310</literal></expr>, <expr><literal type="number">95374</literal></expr>, <expr><literal type="number">95502</literal></expr>, <expr><literal type="number">96878</literal></expr>,

<expr><literal type="number">98266</literal></expr>, <expr><literal type="number">98848</literal></expr>, <expr><literal type="number">99542</literal></expr>, <expr><literal type="number">100234</literal></expr>, <expr><literal type="number">100884</literal></expr>, <expr><literal type="number">101524</literal></expr>, <expr><literal type="number">103320</literal></expr>, <expr><literal type="number">103352</literal></expr>, <expr><literal type="number">103384</literal></expr>, <expr><literal type="number">103416</literal></expr>,

<expr><literal type="number">103480</literal></expr>, <expr><literal type="number">104874</literal></expr>, <expr><literal type="number">106222</literal></expr>, <expr><literal type="number">106910</literal></expr>, <expr><literal type="number">107584</literal></expr>, <expr><literal type="number">108258</literal></expr>, <expr><literal type="number">108902</literal></expr>, <expr><literal type="number">109544</literal></expr>, <expr><literal type="number">111366</literal></expr>, <expr><literal type="number">111398</literal></expr>,

<expr><literal type="number">111430</literal></expr>, <expr><literal type="number">111462</literal></expr>, <expr><literal type="number">111494</literal></expr>, <expr><literal type="number">112878</literal></expr>, <expr><literal type="number">114320</literal></expr>, <expr><literal type="number">114988</literal></expr>, <expr><literal type="number">115660</literal></expr>, <expr><literal type="number">116310</literal></expr>, <expr><literal type="number">116950</literal></expr>, <expr><literal type="number">117592</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>table_data</name><index>[<expr><literal type="number">117592</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_gen_vlc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>insyms</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>counts</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>codes</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>cw</name><index>[<expr><name>MAX_VLC_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>syms</name><index>[<expr><name>MAX_VLC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits2</name><index>[<expr><name>MAX_VLC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>realsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>bits2</name><index>[<expr><name>realsize</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syms</name><index>[<expr><name>realsize</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>insyms</name></expr> ?</condition><then> <expr><name><name>insyms</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>realsize</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxbits</name></expr></argument>, <argument><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counts</name><index>[<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codes</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>realsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>codes</name><index>[<expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>table_data</name><index>[<expr><name><name>table_offs</name><index>[<expr><name>num</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>table_allocated</name></name> <operator>=</operator> <name><name>table_offs</name><index>[<expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>table_offs</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>maxbits</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>realsize</name></expr></argument>,

<argument><expr><name>bits2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>cw</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>syms</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>rv34_init_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_INTRA_TABLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_intra_cbppat</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>CBPPAT_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cbppattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">19</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_intra_secondpat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>OTHERBLK_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">19</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_intra_thirdpat</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>OTHERBLK_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>third_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">19</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_intra_cbp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CBP_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cbp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>rv34_cbp_code</name></expr></argument>, <argument><expr><literal type="number">19</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_intra_firstpat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>FIRSTBLK_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">19</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">14</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_intra_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>COEFF_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefficient</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">19</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_INTER_TABLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_inter_cbppat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>CBPPAT_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cbppattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">95</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_inter_cbp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>CBP_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>rv34_cbp_code</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">96</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_inter_firstpat</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>FIRSTBLK_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">100</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_inter_secondpat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>OTHERBLK_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">102</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_table_inter_thirdpat</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>OTHERBLK_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>third_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">104</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rv34_gen_vlc</name><argument_list>(<argument><expr><name><name>rv34_inter_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>COEFF_VLC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefficient</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">106</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_cbp</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>RV34VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pattern</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>cbp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ones</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cbp_masks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x100000</literal></expr>, <expr><literal type="number">0x010000</literal></expr>, <expr><literal type="number">0x110000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>shifts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>curshift</name> <init>= <expr><name>shifts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>cbppattern</name><index>[<expr><name>table</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ones</name> <operator>=</operator> <name><name>rv34_count_ones</name><index>[<expr><name>pattern</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>curshift</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pattern</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>ones</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name>table</name></expr>]</index><index>[<expr><name>ones</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>curshift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>modulo_three_table</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <name><name>cbp_masks</name><index>[<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <name><name>cbp_masks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>cbp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_coeff</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>esc</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VLC</name><modifier>*</modifier></type> <name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>coef</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>coef</name> <operator>==</operator> <name>esc</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>coef</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>coef</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>coef</name> <operator>-=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>coef</name> <operator>=</operator> <literal type="number">22</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>coef</name><operator>)</operator> <operator>|</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>coef</name> <operator>+=</operator> <name>esc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coef</name> <operator>=</operator> <operator>-</operator><name>coef</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><name>coef</name><operator>*</operator><name>q</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_subblock</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_block2</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>modulo_three_table</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>( <argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_block2</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>( <argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_subblock1</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coeff</name> <init>= <expr><name><name>modulo_three_table</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_subblock3</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>q_dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_ac1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_ac2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>modulo_three_table</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q_ac1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q_ac1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_coeff</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>q_ac2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_block</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>RV34VLC</name> <modifier>*</modifier></type><name>rvlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_ac1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_ac2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>pattern</name></decl>, <decl><type ref="prev"/><name>has_ac</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>rvlc</name><operator>-&gt;</operator><name>first_pattern</name><index>[<expr><name>fc</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modulo_three_table</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_subblock3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rvlc</name><operator>-&gt;</operator><name>coefficient</name></name></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac1</name></expr></argument>, <argument><expr><name>q_ac2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>decode_subblock1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rvlc</name><operator>-&gt;</operator><name>coefficient</name></name></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pattern</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_ac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pattern</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>rvlc</name><operator>-&gt;</operator><name>second_pattern</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_subblock</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rvlc</name><operator>-&gt;</operator><name>coefficient</name></name></expr></argument>, <argument><expr><name>q_ac2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pattern</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content> 

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>rvlc</name><operator>-&gt;</operator><name>second_pattern</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_subblock</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rvlc</name><operator>-&gt;</operator><name>coefficient</name></name></expr></argument>, <argument><expr><name>q_ac2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pattern</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>rvlc</name><operator>-&gt;</operator><name>third_pattern</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_subblock</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rvlc</name><operator>-&gt;</operator><name>coefficient</name></name></expr></argument>, <argument><expr><name>q_ac2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>has_ac</name> <operator>|</operator> <name>pattern</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rv34_get_start_offset</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>rv34_mb_max_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>mb_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name><name>rv34_mb_bits_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RV34VLC</name><modifier>*</modifier></type> <name>choose_vlc_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>quant</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quant</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>mod</name> <operator>&amp;&amp;</operator> <name>quant</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quant</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>inter_vlcs</name><index>[<expr><name><name>rv34_quant_to_vlc_set</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>quant</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name></expr>

</then><else>: <expr><operator>&amp;</operator><name><name>intra_vlcs</name><index>[<expr><name><name>rv34_quant_to_vlc_set</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>quant</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_intra_mb_header</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>intra_types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_INTRA16x16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <name>RV34_MB_TYPE_INTRA16x16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>intra_types</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>intra_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Need DQUANT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_INTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <name>RV34_MB_TYPE_INTRA</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>r</name><operator>-&gt;</operator><name>decode_intra_types</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name> <operator>=</operator> <call><name>choose_vlc_set</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>vlc_set</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rv34_decode_cbp</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_inter_mb_header</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>intra_types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>decode_mb_info</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name><name>rv34_mb_type_to_lavc</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>block_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>RV34_MB_SKIP</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>RV34_MB_P_16x16</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>RV34_MB_B_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>IS_INTRA16x16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rv34_decode_mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>RV34_MB_SKIP</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>intra_types</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>intra_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>intra_types</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>intra_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name><name>r</name><operator>-&gt;</operator><name>decode_intra_types</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name> <operator>=</operator> <call><name>choose_vlc_set</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>vlc_set</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>intra_types</name><index>[<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name> <operator>=</operator> <call><name>choose_vlc_set</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>vlc_set</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>==</operator> <name>RV34_MB_P_MIX16x16</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name> <operator>=</operator> <call><name>choose_vlc_set</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>vlc_set</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>rv34_decode_cbp</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>part_sizes_w</name><index>[<expr><name>RV34_MB_TYPES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>part_sizes_h</name><index>[<expr><name>RV34_MB_TYPES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>avail_indexes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_pred_mv</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subblock_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmv_no</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>avail</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name> <operator>+</operator> <name><name>avail_indexes</name><index>[<expr><name>subblock_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_off</name> <init>= <expr><name><name>part_sizes_w</name><index>[<expr><name>block_type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mv_pos</name> <operator>+=</operator> <operator>(</operator><name>subblock_no</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>subblock_no</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>subblock_no</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c_off</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avail</name><index>[<expr><name>c_off</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>rv30</name></name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>+</operator><name>c_off</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>+</operator><name>c_off</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>dmv_no</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>dmv_no</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>part_sizes_h</name><index>[<expr><name>block_type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>part_sizes_w</name><index>[<expr><name>block_type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PTS_DIFF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) - (b) + 8192) &amp; 0x1FFF)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_add_mv</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mul</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>mv_weight2</name></name></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>mv_weight1</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>val</name> <operator>*</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>mul</name> <operator>+</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rv34_pred_b_vector</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>A_avail</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B_avail</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>C_avail</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>A_avail</name> <operator>+</operator> <name>B_avail</name> <operator>+</operator> <name>C_avail</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>A_avail</name> <operator>+</operator> <name>B_avail</name> <operator>+</operator> <name>C_avail</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_pred_mv_b</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>has_B</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>has_C</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>cur_pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>MB_TYPE_L1</name></expr> </then><else>: <expr><name>MB_TYPE_L0</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>cur_pic</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_A</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_B</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_C</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_C</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rv34_pred_b_vector</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>has_A</name></expr></argument>, <argument><expr><name>has_B</name></expr></argument>, <argument><expr><name>has_C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_B_BACKWARD</name> <operator>||</operator> <name>block_type</name> <operator>==</operator> <name>RV34_MB_B_FORWARD</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ZERO8x2</name><argument_list>(<argument><expr><name><name>cur_pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_pred_mv_rv3</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>avail</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name> <operator>+</operator> <name><name>avail_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>chroma_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rv34_mc</name><argument_list>(<argument><expr><name>RV34DecContext</name> <operator>*</operator><name>r</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>block_type</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>int</name> <name>xoff</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>yoff</name></expr></argument>, <argument><expr><name>int</name> <name>mv_off</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>int</name> <name>width</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>height</name></expr></argument>, <argument><expr><name>int</name> <name>dir</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>int</name> <name>thirdpel</name></expr></argument>, <argument><expr><name>int</name> <name>weighted</name></expr></argument>,

<argument><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>qpel_mc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>h264_chroma_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>chroma_mc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>V</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcY</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcU</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>umx</name></decl>, <decl><type ref="prev"/><name>umy</name></decl>, <decl><type ref="prev"/><name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>, <decl><type ref="prev"/><name>uvmx</name></decl>, <decl><type ref="prev"/><name>uvmy</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>uvsrc_x</name></decl>, <decl><type ref="prev"/><name>uvsrc_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name>mv_off</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is16x16</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>thirdpel</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_mx</name></decl>, <decl><type ref="prev"/><name>chroma_my</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_mx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_my</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>umx</name> <operator>=</operator> <operator>(</operator><name>chroma_mx</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>umy</name> <operator>=</operator> <operator>(</operator><name>chroma_my</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvmx</name> <operator>=</operator> <name><name>chroma_coeffs</name><index>[<expr><operator>(</operator><name>chroma_mx</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvmy</name> <operator>=</operator> <name><name>chroma_coeffs</name><index>[<expr><operator>(</operator><name>chroma_my</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>mv_pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>umx</name> <operator>=</operator> <name>cx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>umy</name> <operator>=</operator> <name>cy</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvmx</name> <operator>=</operator> <operator>(</operator><name>cx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvmy</name> <operator>=</operator> <operator>(</operator><name>cy</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>uvmx</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>uvmy</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uvmx</name> <operator>=</operator> <name>uvmy</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_row</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>yoff</name> <operator>+</operator> <name>my</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>height</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>mb_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <name>ly</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>lx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcY</name> <operator>=</operator> <ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>srcU</name> <operator>=</operator> <ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>srcV</name> <operator>=</operator> <ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>yoff</name> <operator>+</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>xoff</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>umx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>yoff</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>umy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <name>src_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcU</name> <operator>+=</operator> <name>uvsrc_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcV</name> <operator>+=</operator> <name>uvsrc_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>-</operator> <operator>(</operator><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>src_x</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>lx</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>lx</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>width</name> <operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal> <operator>||</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>src_y</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>ly</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>ly</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>height</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>srcY</name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>srcY</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><operator>(</operator><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>src_x</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcY</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>weighted</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>yoff</name> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>xoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>yoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>xoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>yoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_y</name> <index>[<expr><name>dir</name></expr>]</index></name> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>yoff</name> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><name>dir</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>xoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>yoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><name>dir</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>xoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>yoff</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_P_16x8</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>qpel_mc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>Y</name><operator>,</operator> <name>srcY</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_P_8x16</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>qpel_mc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>Y</name><operator>,</operator> <name>srcY</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is16x16</name> <operator>=</operator> <operator>(</operator><name>block_type</name> <operator>!=</operator> <name>RV34_MB_P_8x8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>block_type</name> <operator>!=</operator> <name>RV34_MB_P_16x8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>block_type</name> <operator>!=</operator> <name>RV34_MB_P_8x16</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qpel_mc</name><index>[<expr><operator>!</operator><name>is16x16</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>Y</name><operator>,</operator> <name>srcY</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uvbuf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>uvbuf</name></expr></argument>, <argument><expr><name>srcU</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcU</name> <operator>=</operator> <name>uvbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvbuf</name> <operator>+=</operator> <literal type="number">9</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>uvbuf</name></expr></argument>, <argument><expr><name>srcV</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcV</name> <operator>=</operator> <name>uvbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chroma_mc</name><index>[<expr><literal type="number">2</literal><operator>-</operator><name>width</name></expr>]</index></name> <operator>(</operator><name>U</name><operator>,</operator> <name>srcU</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <name>height</name><operator>*</operator><literal type="number">4</literal><operator>,</operator> <name>uvmx</name><operator>,</operator> <name>uvmy</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_mc</name><index>[<expr><literal type="number">2</literal><operator>-</operator><name>width</name></expr>]</index></name> <operator>(</operator><name>V</name><operator>,</operator> <name>srcV</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <name>height</name><operator>*</operator><literal type="number">4</literal><operator>,</operator> <name>uvmx</name><operator>,</operator> <name>uvmy</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_mc_1mv</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>xoff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mv_off</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rv34_mc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>mv_off</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_chroma_pixels_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv4_weight</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv40_weight_pixels_tab</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>scaled_weight</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>weight1</name></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>weight2</name></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv40_weight_pixels_tab</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>scaled_weight</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>weight1</name></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>weight2</name></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>uvlinesize</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv40_weight_pixels_tab</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>scaled_weight</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>weight1</name></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>weight2</name></name><operator>,</operator>

<name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>uvlinesize</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_mc_2mv</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>weighted</name> <init>= <expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name> <operator>&amp;&amp;</operator> <name>block_type</name> <operator>!=</operator> <name>RV34_MB_B_BIDIR</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>weight1</name></name> <operator>!=</operator> <literal type="number">8192</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rv34_mc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr></argument>, <argument><expr><name>weighted</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_chroma_pixels_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>weighted</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>rv34_mc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>avg_chroma_pixels_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>rv34_mc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_chroma_pixels_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv4_weight</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_mc_2mv_skip</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>weighted</name> <init>= <expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>weight1</name></name> <operator>!=</operator> <literal type="number">8192</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_mc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>RV34_MB_P_8x8</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>j</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>j</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>b8_stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr></argument>,

<argument><expr><name>weighted</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_chroma_pixels_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>RV34_MB_P_8x8</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>j</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>j</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>b8_stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr></argument>,

<argument><expr><name>weighted</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>weighted</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>weighted</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>put_chroma_pixels_tab</name></name></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>avg_chroma_pixels_tab</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>weighted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rv4_weight</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>num_mvs</name><index>[<expr><name>RV34_MB_TYPES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_mv</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_bt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>num_mvs</name><index>[<expr><name>block_type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_interleaved_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_interleaved_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_VLC</name> <operator>||</operator>

<name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_VLC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<switch>switch<condition>(<expr><name>block_type</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>RV34_MB_TYPE_INTRA</name></expr>:</case>

<case>case <expr><name>RV34_MB_TYPE_INTRA16x16</name></expr>:</case>

<expr_stmt><expr><call><name>ZERO8x2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>RV34_MB_SKIP</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ZERO8x2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc_1mv</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>RV34_MB_B_DIRECT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_bt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>next_bt</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_SKIP</name><argument_list>(<argument><expr><name>next_bt</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ZERO8x2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO8x2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>calc_add_mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mv_pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>IS_16X8</name><argument_list>(<argument><expr><name>next_bt</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_8X16</name><argument_list>(<argument><expr><name>next_bt</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_8X8</name><argument_list>(<argument><expr><name>next_bt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>rv34_mc_2mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rv34_mc_2mv_skip</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ZERO8x2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RV34_MB_P_16x16</name></expr>:</case>

<case>case <expr><name>RV34_MB_P_MIX16x16</name></expr>:</case>

<expr_stmt><expr><call><name>rv34_pred_mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc_1mv</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RV34_MB_B_FORWARD</name></expr>:</case>

<case>case <expr><name>RV34_MB_B_BACKWARD</name></expr>:</case>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>dmv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rv34_pred_mv_rv3</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_B_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rv34_pred_mv_b</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_B_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>rv34_mc_1mv</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_B_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RV34_MB_P_16x8</name></expr>:</case>

<case>case <expr><name>RV34_MB_P_8x16</name></expr>:</case>

<expr_stmt><expr><call><name>rv34_pred_mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_pred_mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>block_type</name> <operator>==</operator> <name>RV34_MB_P_16x8</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_P_16x8</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>rv34_mc_1mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc_1mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block_type</name> <operator>==</operator> <name>RV34_MB_P_8x16</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>rv34_mc_1mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc_1mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RV34_MB_B_BIDIR</name></expr>:</case>

<expr_stmt><expr><call><name>rv34_pred_mv_b</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_pred_mv_b</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc_2mv</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RV34_MB_P_8x8</name></expr>:</case>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_pred_mv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_mc_1mv</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ittrans</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>DC_PRED</name></expr>, <expr><name>VERT_PRED</name></expr>, <expr><name>HOR_PRED</name></expr>, <expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>, <expr><name>DIAG_DOWN_LEFT_PRED</name></expr>,

<expr><name>VERT_RIGHT_PRED</name></expr>, <expr><name>VERT_LEFT_PRED</name></expr>, <expr><name>HOR_UP_PRED</name></expr>, <expr><name>HOR_DOWN_PRED</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ittrans16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>DC_PRED8x8</name></expr>, <expr><name>VERT_PRED8x8</name></expr>, <expr><name>HOR_PRED8x8</name></expr>, <expr><name>PLANE_PRED8x8</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_pred_4x4_block</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>down</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>dst</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>topleft</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>up</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itype</name> <operator>=</operator> <name>DC_128_PRED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>up</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>VERT_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>HOR_PRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>DC_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>LEFT_DC_PRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><operator>!</operator><name>left</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>HOR_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>VERT_PRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>DC_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>TOP_DC_PRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>DIAG_DOWN_LEFT_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>DIAG_DOWN_LEFT_PRED_RV40_NODOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>down</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>DIAG_DOWN_LEFT_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>DIAG_DOWN_LEFT_PRED_RV40_NODOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>HOR_UP_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>HOR_UP_PRED_RV40_NODOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>VERT_LEFT_PRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>VERT_LEFT_PRED_RV40_NODOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>right</name> <operator>&amp;&amp;</operator> <name>up</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>topleft</name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>stride</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101u</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>topleft</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>pred4x4</name><index>[<expr><name>itype</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>prev</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>adjust_pred16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>itype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>up</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itype</name> <operator>=</operator> <name>DC_128_PRED8x8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>up</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>PLANE_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>itype</name> <operator>=</operator> <name>HOR_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>VERT_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>HOR_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>DC_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>LEFT_DC_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><operator>!</operator><name>left</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>PLANE_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>itype</name> <operator>=</operator> <name>VERT_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>HOR_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>VERT_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>DC_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>TOP_DC_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>itype</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rv34_process_block</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pdst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_ac</name> <init>= <expr><call><name>rv34_decode_block</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>,

<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>has_ac</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_idct_add</name></name><argument_list>(<argument><expr><name>pdst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_idct_dc_add</name></name><argument_list>(<argument><expr><name>pdst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_output_i16x16</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>intra_types</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block16</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q_dc</name> <init>= <expr><name><name>rv34_qscale_tab</name><index>[ <expr><name><name>r</name><operator>-&gt;</operator><name>luma_dc_quant_i</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr> ]</index></name></expr></init></decl>,

<decl><type ref="prev"/><name>q_ac</name> <init>= <expr><name><name>rv34_qscale_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>itype</name></decl>, <decl><type ref="prev"/><name>has_ac</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_ac</name> <operator>=</operator> <call><name>rv34_decode_block</name><argument_list>(<argument><expr><name>block16</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>has_ac</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_inv_transform</name></name><argument_list>(<argument><expr><name>block16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_inv_transform_dc</name></name><argument_list>(<argument><expr><name>block16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>itype</name> <operator>=</operator> <name><name>ittrans16</name><index>[<expr><name><name>intra_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>itype</name> <operator>=</operator> <call><name>adjust_pred16</name><argument_list>(<argument><expr><name>itype</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>pred16x16</name><index>[<expr><name>itype</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block16</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>has_ac</name> <operator>=</operator> <call><name>rv34_decode_block</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>has_ac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>has_ac</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_idct_add</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_idct_dc_add</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>itype</name> <operator>=</operator> <name><name>ittrans16</name><index>[<expr><name><name>intra_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>itype</name> <operator>==</operator> <name>PLANE_PRED8x8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>itype</name> <operator>=</operator> <name>DC_PRED8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>itype</name> <operator>=</operator> <call><name>adjust_pred16</name><argument_list>(<argument><expr><name>itype</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_dc</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>rv34_chroma_quant</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>rv34_chroma_quant</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>pred8x8</name><index>[<expr><name>itype</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pdst</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>cbp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pdst</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_process_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pdst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_output_intra</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>intra_types</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>avail</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>q_ac</name></decl>, <decl><type ref="prev"/><name>q_dc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>avail</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>avail</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>avail</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">9</literal> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>rv34_pred_4x4_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>ittrans</name><index>[<expr><name><name>intra_types</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avail</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avail</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avail</name><index>[<expr><name>idx</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avail</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avail</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>cbp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rv34_process_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>intra_types</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>intra_types</name> <operator>-=</operator> <name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q_dc</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>rv34_chroma_quant</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>rv34_chroma_quant</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>acache</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>acache</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>itype</name> <init>= <expr><name><name>ittrans</name><index>[<expr><name><name>intra_types</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>j</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rv34_pred_4x4_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>itype</name></expr></argument>, <argument><expr><name><name>acache</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>acache</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>j</name></expr></argument>, <argument><expr><name><name>acache</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>acache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>cbp</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rv34_process_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_mv_diff_gt_3</name><argument_list>(<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>motion_val</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>step</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>motion_val</name><index>[<expr><operator>-</operator><name>step</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>d</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">3</literal> <operator>||</operator> <name>d</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>motion_val</name><index>[<expr><operator>-</operator><name>step</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>d</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">3</literal> <operator>||</operator> <name>d</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_set_deblock_coef</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hmvmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vmvmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>motion_val</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>midx</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_mv_diff_gt_3</name><argument_list>(<argument><expr><name>motion_val</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vmvmask</name> <operator>|=</operator> <literal type="number">0x11</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>j</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_mv_diff_gt_3</name><argument_list>(<argument><expr><name>motion_val</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hmvmask</name> <operator>|=</operator> <literal type="number">0x03</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>motion_val</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hmvmask</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x000F</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vmvmask</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x1111</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name></expr>)</condition><block>{<block_content> 

<expr_stmt><expr><name>vmvmask</name> <operator>|=</operator> <operator>(</operator><name>vmvmask</name> <operator>&amp;</operator> <literal type="number">0x4444</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hmvmask</name> <operator>|=</operator> <operator>(</operator><name>hmvmask</name> <operator>&amp;</operator> <literal type="number">0x0F00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>vmvmask</name> <operator>&amp;</operator> <literal type="number">0x1111</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>hmvmask</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hmvmask</name> <operator>|</operator> <name>vmvmask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_inter_macroblock</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>intra_types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>, <decl><type ref="prev"/><name>cbp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q_dc</name></decl>, <decl><type ref="prev"/><name>q_ac</name></decl>, <decl><type ref="prev"/><name>has_ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name>dist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator>

<name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dist</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name>dist</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <name>cbp2</name> <operator>=</operator> <call><name>rv34_decode_inter_mb_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name> <index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>cbp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>cbp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <call><name>rv34_set_deblock_coef</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>qscale_table</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rv34_output_i16x16</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rv34_output_intra</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block16</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_dc</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[ <expr><name><name>r</name><operator>-&gt;</operator><name>luma_dc_quant_p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rv34_decode_block</name><argument_list>(<argument><expr><name>block16</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_inv_transform</name></name><argument_list>(<argument><expr><name>block16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_inv_transform_dc</name></name><argument_list>(<argument><expr><name>block16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block16</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>has_ac</name> <operator>=</operator> <call><name>rv34_decode_block</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>has_ac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>has_ac</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_idct_add</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdsp</name><operator>.</operator><name>rv34_idct_dc_add</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_vlcs</name></name> <operator>=</operator> <call><name>choose_vlc_set</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>vlc_set</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>cbp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rv34_process_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>luma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>q_dc</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>rv34_chroma_quant</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_ac</name> <operator>=</operator> <name><name>rv34_qscale_tab</name><index>[<expr><name><name>rv34_chroma_quant</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cbp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pdst</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>cbp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pdst</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_process_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pdst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>chroma_vlc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q_dc</name></expr></argument>, <argument><expr><name>q_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_intra_macroblock</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>intra_types</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>, <decl><type ref="prev"/><name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name>dist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator>

<name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dist</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name>dist</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <call><name>rv34_decode_intra_mb_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name> <index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>cbp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name>cbp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>qscale_table</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cbp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is16</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>rv34_output_i16x16</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rv34_output_intra</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>intra_types</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_slice_end</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_skip_run</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv34_decoder_free</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mb_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decoder_alloc</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_height</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>mb_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name></name> <operator>&amp;&amp;</operator>

<name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>mb_type</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rv34_decoder_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decoder_realloc</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rv34_decoder_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rv34_decoder_alloc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv34_decode_slice</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name></decl>, <decl><type ref="prev"/><name>slice_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>parse_slice_header</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>si</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect or unknown slice header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slice_type</name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>type</name></name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>type</name></name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_I</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice type mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Size mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>quant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_skip_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <name>mb_pos</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice indicates MB offset %d, got %d\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>mb_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>start</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>start</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>check_slice_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_update_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>rv34_decode_inter_macroblock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>rv34_decode_intra_macroblock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_er_add_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>loop_filter</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ff_er_add_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_rv34_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mpv_decode_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_decode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_idct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpv_common_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_pred_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_RV40</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RV30_DECODER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV30</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_rv30dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RV40_DECODER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV40</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_rv40dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rv34_decoder_alloc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>intra_vlcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>cbppattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rv34_init_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rv34_decode_init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>intra_types_hist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_idct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_mpv_common_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rv34_decoder_alloc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rv34_decode_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r1</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type> const <name>s1</name> <init>= <expr><operator>&amp;</operator><name><name>r1</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src</name> <operator>||</operator> <operator>!</operator><name><name>s1</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s1</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s1</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_mpv_common_frame_size_change</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rv34_decoder_realloc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>=</operator> <name><name>r1</name><operator>-&gt;</operator><name>cur_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>r1</name><operator>-&gt;</operator><name>last_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>r1</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>si</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s1</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_mpeg_update_thread_context</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_slice_offset</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>slice_count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>slice_offset</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>n</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>n</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>n</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>finish_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_picture</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_er_frame_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_debug_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_export_qp_table</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>, <argument><expr><name>FF_QSCALE_TYPE_MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_picture</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_debug_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_export_qp_table</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name>FF_QSCALE_TYPE_MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_picture</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>got_picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVRational</name></type> <name>update_sar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>old_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_h</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>sar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sar</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>sar</argument>, <argument>av_mul_q((AVRational){new_h, new_w}, (AVRational){old_w, old_h})</argument>)</argument_list></macro></expr>;</expr_stmt>

<return>return <expr><name>sar</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rv34_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SliceInfo</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>slices_hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>faulty_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_picture_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>slice_count</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slices_hdr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>slice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>slice_count</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>slice_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slice_count</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>buf_size</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice offset is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_size</name><operator>-</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>r</name><operator>-&gt;</operator><name>parse_slice_header</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>si</name><operator>.</operator><name>start</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First slice header is incorrect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>si</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid decoder state: B-frame without "</literal>

<literal type="string">"reference data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>faulty_b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>.</operator><name>type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>.</operator><name>type</name></name><operator>!=</operator><name>AV_PICTURE_TYPE_I</name><operator>)</operator>

<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"New frame but still %d MB left.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_er_frame_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>si</name><operator>.</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>si</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Changing dimensions to %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>si</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>si</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>update_sar</name><argument_list>(

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>,

<argument><expr><name><name>si</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_mpv_common_frame_size_change</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rv34_decoder_realloc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>faulty_b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>si</name><operator>.</operator><name>type</name></name></expr> ?</condition><then> <expr><name><name>si</name><operator>.</operator><name>type</name></name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_I</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mpv_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg_er_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_base</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_base</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_base</name></name>

<operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_uv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tmp_b_block_base</name></name> <operator>+</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name>

<operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name>

<operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>cur_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>refdist</name> <init>= <expr><call><name>GET_PTS_DIFF</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>next_pts</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>last_pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist0</name> <init>= <expr><call><name>GET_PTS_DIFF</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_pts</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>last_pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist1</name> <init>= <expr><call><name>GET_PTS_DIFF</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>next_pts</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cur_pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>refdist</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mv_weight1</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>mv_weight2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>weight1</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>weight2</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>scaled_weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>dist0</name></expr></argument>, <argument><expr><name>dist1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>refdist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"distance overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mv_weight1</name></name> <operator>=</operator> <operator>(</operator><name>dist0</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <name>refdist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mv_weight2</name></name> <operator>=</operator> <operator>(</operator><name>dist1</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <name>refdist</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>mv_weight1</name></name><operator>|</operator><name><name>r</name><operator>-&gt;</operator><name>mv_weight2</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">511</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>weight1</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>mv_weight1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>weight2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>mv_weight2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>scaled_weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>weight1</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>mv_weight1</name></name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>weight2</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>mv_weight2</name></name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>scaled_weight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoder needs full frames in frame "</literal>

<literal type="string">"multithreading mode (start MB is %d).\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><name>i</name></expr></argument> , <argument><expr><name>slice_count</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset1</name> <init>= <expr><call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>slice_count</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>offset1</name> <operator>||</operator> <name>offset1</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice offset is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>offset1</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_y</name></name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_width</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>slice_count</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset2</name> <init>= <expr><call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>slice_count</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset2</name> <argument_list type="generic">&lt; <argument><expr><name>offset1</name> <operator>||</operator> <name>offset2</name></expr></argument> &gt;</argument_list></name> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice offset is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>offset1</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_size</name><operator>-</operator><name>offset1</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>r</name><operator>-&gt;</operator><name>parse_slice_header</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>offset2</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name> <argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;=</operator> <name>buf_size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>rv34_decode_slice</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>loop_filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>loop_filter</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_picture_ptr</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"marking unfished frame as finished\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_er_frame_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_rv34_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rv34_decoder_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
