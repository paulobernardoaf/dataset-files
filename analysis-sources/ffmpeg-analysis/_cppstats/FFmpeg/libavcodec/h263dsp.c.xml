<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h263dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263dsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_h263_loop_filter_strength</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h263_h_loop_filter_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>strength</name> <init>= <expr><name><name>ff_h263_loop_filter_strength</name><index>[<expr><name>qscale</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>ad1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p3</name> <init>= <expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>p0</name> <operator>-</operator> <name>p3</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>p2</name> <operator>-</operator> <name>p1</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>strength</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>strength</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>-=</operator> <name>d1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&amp;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>p1</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>&amp;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>p2</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ad1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>p0</name> <operator>-</operator> <name>p3</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><name>ad1</name></expr></argument>, <argument><expr><name>ad1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p0</name> <operator>-</operator> <name>d2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p3</name> <operator>+</operator> <name>d2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h263_v_loop_filter_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>strength</name> <init>= <expr><name><name>ff_h263_loop_filter_strength</name><index>[<expr><name>qscale</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>ad1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p3</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>p0</name> <operator>-</operator> <name>p3</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>p2</name> <operator>-</operator> <name>p1</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>strength</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>strength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>strength</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>-=</operator> <name>d1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&amp;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>p1</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>&amp;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>p2</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ad1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>p0</name> <operator>-</operator> <name>p3</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><name>ad1</name></expr></argument>, <argument><expr><name>ad1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>p0</name> <operator>-</operator> <name>d2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>p3</name> <operator>+</operator> <name>d2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h263dsp_init</name><parameter_list>(<parameter><decl><type><name>H263DSPContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h263_h_loop_filter</name></name> <operator>=</operator> <name>h263_h_loop_filter_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h263_v_loop_filter</name></name> <operator>=</operator> <name>h263_v_loop_filter_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263dsp_init_x86</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263dsp_init_mips</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
